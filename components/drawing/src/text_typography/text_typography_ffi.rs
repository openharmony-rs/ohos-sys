// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[allow(unused_imports)]
#[cfg(feature = "api-12")]
use crate::error_code::OH_Drawing_ErrorCode;
#[cfg(feature = "api-12")]
use crate::font::OH_Drawing_Font_Metrics;
use crate::text_declaration::*;

impl OH_Drawing_TextDirection {
    /// Right to left (RTL)
    pub const TEXT_DIRECTION_RTL: OH_Drawing_TextDirection = OH_Drawing_TextDirection(0);
}
impl OH_Drawing_TextDirection {
    /// Left to right (LTR)
    pub const TEXT_DIRECTION_LTR: OH_Drawing_TextDirection = OH_Drawing_TextDirection(1);
}
#[repr(transparent)]
/// Enumerates text directions.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDirection(pub ::core::ffi::c_uint);
impl OH_Drawing_TextAlign {
    /// Left-aligned
    pub const TEXT_ALIGN_LEFT: OH_Drawing_TextAlign = OH_Drawing_TextAlign(0);
}
impl OH_Drawing_TextAlign {
    /// Right-aligned
    pub const TEXT_ALIGN_RIGHT: OH_Drawing_TextAlign = OH_Drawing_TextAlign(1);
}
impl OH_Drawing_TextAlign {
    /// Center-aligned
    pub const TEXT_ALIGN_CENTER: OH_Drawing_TextAlign = OH_Drawing_TextAlign(2);
}
impl OH_Drawing_TextAlign {
    /// Justified, which means that each line (except the last line) is stretched so that every line has equal width,
    /// and the left and right margins are straight.
    pub const TEXT_ALIGN_JUSTIFY: OH_Drawing_TextAlign = OH_Drawing_TextAlign(3);
}
impl OH_Drawing_TextAlign {
    /// <b>TEXT_ALIGN_START</b> achieves the same effect as <b>TEXT_ALIGN_LEFT</b>
    /// when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_LTR</b>;
    /// it achieves the same effect as <b>TEXT_ALIGN_RIGHT</b>
    /// when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_RTL</b>.
    pub const TEXT_ALIGN_START: OH_Drawing_TextAlign = OH_Drawing_TextAlign(4);
}
impl OH_Drawing_TextAlign {
    /// <b>TEXT_ALIGN_END</b> achieves the same effect as <b>TEXT_ALIGN_RIGHT</b>
    /// when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_LTR</b>;
    /// it achieves the same effect as <b>TEXT_ALIGN_LEFT</b>
    /// when <b>OH_Drawing_TextDirection</b> is <b>TEXT_DIRECTION_RTL</b>.
    pub const TEXT_ALIGN_END: OH_Drawing_TextAlign = OH_Drawing_TextAlign(5);
}
#[repr(transparent)]
/// Enumerates text alignment modes.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextAlign(pub ::core::ffi::c_uint);
impl OH_Drawing_FontWeight {
    /// Thin
    pub const FONT_WEIGHT_100: OH_Drawing_FontWeight = OH_Drawing_FontWeight(0);
}
impl OH_Drawing_FontWeight {
    /// Extra-light
    pub const FONT_WEIGHT_200: OH_Drawing_FontWeight = OH_Drawing_FontWeight(1);
}
impl OH_Drawing_FontWeight {
    /// Light
    pub const FONT_WEIGHT_300: OH_Drawing_FontWeight = OH_Drawing_FontWeight(2);
}
impl OH_Drawing_FontWeight {
    /// Normal/Regular
    pub const FONT_WEIGHT_400: OH_Drawing_FontWeight = OH_Drawing_FontWeight(3);
}
impl OH_Drawing_FontWeight {
    /// Medium
    pub const FONT_WEIGHT_500: OH_Drawing_FontWeight = OH_Drawing_FontWeight(4);
}
impl OH_Drawing_FontWeight {
    /// Semi-bold
    pub const FONT_WEIGHT_600: OH_Drawing_FontWeight = OH_Drawing_FontWeight(5);
}
impl OH_Drawing_FontWeight {
    /// Bold
    pub const FONT_WEIGHT_700: OH_Drawing_FontWeight = OH_Drawing_FontWeight(6);
}
impl OH_Drawing_FontWeight {
    /// Extra-bold
    pub const FONT_WEIGHT_800: OH_Drawing_FontWeight = OH_Drawing_FontWeight(7);
}
impl OH_Drawing_FontWeight {
    /// Black
    pub const FONT_WEIGHT_900: OH_Drawing_FontWeight = OH_Drawing_FontWeight(8);
}
#[repr(transparent)]
/// Enumerates font weights.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontWeight(pub ::core::ffi::c_uint);
impl OH_Drawing_TextBaseline {
    /// Alphabetic, where the letters in alphabets like English sit on.
    pub const TEXT_BASELINE_ALPHABETIC: OH_Drawing_TextBaseline = OH_Drawing_TextBaseline(0);
}
impl OH_Drawing_TextBaseline {
    /// Ideographic. The baseline is at the bottom of the text area.
    pub const TEXT_BASELINE_IDEOGRAPHIC: OH_Drawing_TextBaseline = OH_Drawing_TextBaseline(1);
}
#[repr(transparent)]
/// Enumerates text baselines.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextBaseline(pub ::core::ffi::c_uint);
impl OH_Drawing_TextDecoration {
    /// No decoration.
    pub const TEXT_DECORATION_NONE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(0);
}
impl OH_Drawing_TextDecoration {
    /// A underline is used for decoration.
    pub const TEXT_DECORATION_UNDERLINE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(1);
}
impl OH_Drawing_TextDecoration {
    /// An overline is used for decoration.
    pub const TEXT_DECORATION_OVERLINE: OH_Drawing_TextDecoration = OH_Drawing_TextDecoration(2);
}
impl OH_Drawing_TextDecoration {
    /// A strikethrough is used for decoration.
    pub const TEXT_DECORATION_LINE_THROUGH: OH_Drawing_TextDecoration =
        OH_Drawing_TextDecoration(4);
}
#[repr(transparent)]
/// Enumerates text decorations.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDecoration(pub ::core::ffi::c_uint);
impl OH_Drawing_FontStyle {
    /// Normal style
    pub const FONT_STYLE_NORMAL: OH_Drawing_FontStyle = OH_Drawing_FontStyle(0);
}
impl OH_Drawing_FontStyle {
    /// Italic style
    pub const FONT_STYLE_ITALIC: OH_Drawing_FontStyle = OH_Drawing_FontStyle(1);
}
impl OH_Drawing_FontStyle {
    /// Oblique style
    pub const FONT_STYLE_OBLIQUE: OH_Drawing_FontStyle = OH_Drawing_FontStyle(2);
}
#[repr(transparent)]
/// Enumerates font styles.
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontStyle(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Offset At Baseline
    pub const ALIGNMENT_OFFSET_AT_BASELINE: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Above Baseline
    pub const ALIGNMENT_ABOVE_BASELINE: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(1);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Below Baseline
    pub const ALIGNMENT_BELOW_BASELINE: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(2);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Top of Row Box
    pub const ALIGNMENT_TOP_OF_ROW_BOX: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(3);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Bottom of Row Box
    pub const ALIGNMENT_BOTTOM_OF_ROW_BOX: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(4);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_PlaceholderVerticalAlignment {
    /// Center of Row Box
    pub const ALIGNMENT_CENTER_OF_ROW_BOX: OH_Drawing_PlaceholderVerticalAlignment =
        OH_Drawing_PlaceholderVerticalAlignment(5);
}
#[repr(transparent)]
/// Enumerates placeholder vertical alignment.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_PlaceholderVerticalAlignment(pub ::core::ffi::c_uint);
/// Defines the placeholder span.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_PlaceholderSpan {
    /// width of placeholder
    pub width: f64,
    /// height of placeholder
    pub height: f64,
    /// alignment of placeholder
    pub alignment: OH_Drawing_PlaceholderVerticalAlignment,
    /// baseline of placeholder
    pub baseline: OH_Drawing_TextBaseline,
    /// baselineoffset of placeholder
    pub baselineOffset: f64,
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_TextDecorationStyle {
    /// Solid style
    pub const TEXT_DECORATION_STYLE_SOLID: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_TextDecorationStyle {
    /// Double style
    pub const TEXT_DECORATION_STYLE_DOUBLE: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(1);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_TextDecorationStyle {
    /// Dotted style
    pub const TEXT_DECORATION_STYLE_DOTTED: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(2);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_TextDecorationStyle {
    /// Dashed style
    pub const TEXT_DECORATION_STYLE_DASHED: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(3);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_TextDecorationStyle {
    /// Wavy style
    pub const TEXT_DECORATION_STYLE_WAVY: OH_Drawing_TextDecorationStyle =
        OH_Drawing_TextDecorationStyle(4);
}
#[repr(transparent)]
/// Enumerates text decoration style.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextDecorationStyle(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_EllipsisModal {
    /// Head modal
    pub const ELLIPSIS_MODAL_HEAD: OH_Drawing_EllipsisModal = OH_Drawing_EllipsisModal(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_EllipsisModal {
    /// Middle modal
    pub const ELLIPSIS_MODAL_MIDDLE: OH_Drawing_EllipsisModal = OH_Drawing_EllipsisModal(1);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_EllipsisModal {
    /// Tail modal
    pub const ELLIPSIS_MODAL_TAIL: OH_Drawing_EllipsisModal = OH_Drawing_EllipsisModal(2);
}
#[repr(transparent)]
/// Enumerates ellipsis modal.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_EllipsisModal(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_BreakStrategy {
    /// Greedy strategy
    pub const BREAK_STRATEGY_GREEDY: OH_Drawing_BreakStrategy = OH_Drawing_BreakStrategy(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_BreakStrategy {
    /// Quality strategy
    pub const BREAK_STRATEGY_HIGH_QUALITY: OH_Drawing_BreakStrategy = OH_Drawing_BreakStrategy(1);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_BreakStrategy {
    /// Balanced strategy
    pub const BREAK_STRATEGY_BALANCED: OH_Drawing_BreakStrategy = OH_Drawing_BreakStrategy(2);
}
#[repr(transparent)]
/// Enumerates break strategy.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_BreakStrategy(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_WordBreakType {
    /// Normal type
    pub const WORD_BREAK_TYPE_NORMAL: OH_Drawing_WordBreakType = OH_Drawing_WordBreakType(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_WordBreakType {
    /// Break All type
    pub const WORD_BREAK_TYPE_BREAK_ALL: OH_Drawing_WordBreakType = OH_Drawing_WordBreakType(1);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_WordBreakType {
    /// Break Word type
    pub const WORD_BREAK_TYPE_BREAK_WORD: OH_Drawing_WordBreakType = OH_Drawing_WordBreakType(2);
}
#[repr(transparent)]
/// Enumerates word break type.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_WordBreakType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectHeightStyle {
    /// Tight style
    pub const RECT_HEIGHT_STYLE_TIGHT: OH_Drawing_RectHeightStyle = OH_Drawing_RectHeightStyle(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectHeightStyle {
    /// Max style
    pub const RECT_HEIGHT_STYLE_MAX: OH_Drawing_RectHeightStyle = OH_Drawing_RectHeightStyle(1);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectHeightStyle {
    /// Includelinespacemiddle style
    pub const RECT_HEIGHT_STYLE_INCLUDELINESPACEMIDDLE: OH_Drawing_RectHeightStyle =
        OH_Drawing_RectHeightStyle(2);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectHeightStyle {
    /// Includelinespacetop style
    pub const RECT_HEIGHT_STYLE_INCLUDELINESPACETOP: OH_Drawing_RectHeightStyle =
        OH_Drawing_RectHeightStyle(3);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectHeightStyle {
    /// Includelinespacebottom style
    pub const RECT_HEIGHT_STYLE_INCLUDELINESPACEBOTTOM: OH_Drawing_RectHeightStyle =
        OH_Drawing_RectHeightStyle(4);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectHeightStyle {
    /// Struct style
    pub const RECT_HEIGHT_STYLE_STRUCT: OH_Drawing_RectHeightStyle = OH_Drawing_RectHeightStyle(5);
}
#[repr(transparent)]
/// Enumerates rect height style.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_RectHeightStyle(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectWidthStyle {
    /// Tight style
    pub const RECT_WIDTH_STYLE_TIGHT: OH_Drawing_RectWidthStyle = OH_Drawing_RectWidthStyle(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_RectWidthStyle {
    /// Max style
    pub const RECT_WIDTH_STYLE_MAX: OH_Drawing_RectWidthStyle = OH_Drawing_RectWidthStyle(1);
}
#[repr(transparent)]
/// Enumerates rect Width style.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_RectWidthStyle(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontConfigInfoErrorCode {
    /// The list of system font configuration information was successfully obtained
    pub const SUCCESS_FONT_CONFIG_INFO: OH_Drawing_FontConfigInfoErrorCode =
        OH_Drawing_FontConfigInfoErrorCode(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontConfigInfoErrorCode {
    /// Unknown error
    pub const ERROR_FONT_CONFIG_INFO_UNKNOWN: OH_Drawing_FontConfigInfoErrorCode =
        OH_Drawing_FontConfigInfoErrorCode(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontConfigInfoErrorCode {
    /// Parse system config file error
    pub const ERROR_FONT_CONFIG_INFO_PARSE_FILE: OH_Drawing_FontConfigInfoErrorCode =
        OH_Drawing_FontConfigInfoErrorCode(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontConfigInfoErrorCode {
    /// Alloc memory error
    pub const ERROR_FONT_CONFIG_INFO_ALLOC_MEMORY: OH_Drawing_FontConfigInfoErrorCode =
        OH_Drawing_FontConfigInfoErrorCode(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontConfigInfoErrorCode {
    /// Copy string data error
    pub const ERROR_FONT_CONFIG_INFO_COPY_STRING_DATA: OH_Drawing_FontConfigInfoErrorCode =
        OH_Drawing_FontConfigInfoErrorCode(4);
}
#[repr(transparent)]
/// Gets system font configuration information list result enum.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontConfigInfoErrorCode(pub ::core::ffi::c_uint);
/// Fallback font information.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontFallbackInfo {
    /// The type of language supported by the font set. The language format is bcp47
    pub language: *mut ::core::ffi::c_char,
    /// Font family name
    pub familyName: *mut ::core::ffi::c_char,
}
/// Fallback font group.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_Drawing_FontFallbackGroup {
    /// The name of the font set corresponding to the fallback font set. If the value is null,
    /// all fonts can be set using the fallback font set list.
    pub groupName: *mut ::core::ffi::c_char,
    /// Fallback font Info Size
    pub fallbackInfoSize: usize,
    /// A list of font sets for fallback fonts
    pub fallbackInfoSet: *mut OH_Drawing_FontFallbackInfo,
}
/// Font weight mapping information.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontAdjustInfo {
    /// The font's original weight value
    pub weight: ::core::ffi::c_int,
    /// The font weight displayed in the application
    pub to: ::core::ffi::c_int,
}
/// Alias font information.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontAliasInfo {
    /// Font family name
    pub familyName: *mut ::core::ffi::c_char,
    /// Font weight value. When the weight value is greater than 0,
    /// the font set contains only fonts with the specified weight.
    /// When the weight value is equal to 0, the font set contains all fonts.
    pub weight: ::core::ffi::c_int,
}
/// General font set information supported by the system.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_Drawing_FontGenericInfo {
    /// Font family name
    pub familyName: *mut ::core::ffi::c_char,
    /// The size of alias font lists
    pub aliasInfoSize: usize,
    /// The size of font weight mapping information lists
    pub adjustInfoSize: usize,
    /// List of alias fonts
    pub aliasInfoSet: *mut OH_Drawing_FontAliasInfo,
    /// Font weight mapping information lists
    pub adjustInfoSet: *mut OH_Drawing_FontAdjustInfo,
}
/// System font configuration information.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_Drawing_FontConfigInfo {
    /// Count of system font file paths
    pub fontDirSize: usize,
    /// List size of generic font sets
    pub fontGenericInfoSize: usize,
    /// Count of fallback font set lists
    pub fallbackGroupSize: usize,
    /// List of system font file paths
    pub fontDirSet: *mut *mut ::core::ffi::c_char,
    /// List of generic font sets
    pub fontGenericInfoSet: *mut OH_Drawing_FontGenericInfo,
    /// List of fallback font sets
    pub fallbackGroupSet: *mut OH_Drawing_FontFallbackGroup,
}
/// Describes the font information.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontDescriptor {
    /// The file path of System font
    pub path: *mut ::core::ffi::c_char,
    /// A name that uniquely identifies the font
    pub postScriptName: *mut ::core::ffi::c_char,
    /// The name of System font
    pub fullName: *mut ::core::ffi::c_char,
    /// The family of System font
    pub fontFamily: *mut ::core::ffi::c_char,
    /// The subfont family of the system font
    pub fontSubfamily: *mut ::core::ffi::c_char,
    /// The weight of System font
    pub weight: ::core::ffi::c_int,
    /// The width of System font
    pub width: ::core::ffi::c_int,
    /// Whether the system font is tilted
    pub italic: ::core::ffi::c_int,
    /// Whether the system font is compact
    pub monoSpace: bool,
    /// whether symbolic fonts are supported
    pub symbolic: bool,
}
/// The metrics of line.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_Drawing_LineMetrics {
    /// Text ascender height
    pub ascender: f64,
    /// Tex descender height
    pub descender: f64,
    /// The height of a capital letter
    pub capHeight: f64,
    /// The height of a lowercase letter
    pub xHeight: f64,
    /// Text width
    pub width: f64,
    /// Line height
    pub height: f64,
    /// The distance from the left end of the text to the left end of the container,
    /// aligned to 0, is the width of the container minus the width of the line of text
    pub x: f64,
    /// The height from the top of the text to the top of the container, the first line is 0,
    /// and the second line is the height of the first line
    pub y: f64,
    /// Start Index
    pub startIndex: usize,
    /// End Index
    pub endIndex: usize,
    /// The metrics information of the first character
    pub firstCharMetrics: OH_Drawing_Font_Metrics,
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextHeightBehavior {
    /// both ascend of first row and last row style
    pub const TEXT_HEIGHT_ALL: OH_Drawing_TextHeightBehavior = OH_Drawing_TextHeightBehavior(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextHeightBehavior {
    /// forbidding ascend of first row style
    pub const TEXT_HEIGHT_DISABLE_FIRST_ASCENT: OH_Drawing_TextHeightBehavior =
        OH_Drawing_TextHeightBehavior(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextHeightBehavior {
    /// forbidding ascend of last row style
    pub const TEXT_HEIGHT_DISABLE_LAST_ASCENT: OH_Drawing_TextHeightBehavior =
        OH_Drawing_TextHeightBehavior(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextHeightBehavior {
    /// neither ascend of first row nor last row style
    pub const TEXT_HEIGHT_DISABLE_ALL: OH_Drawing_TextHeightBehavior =
        OH_Drawing_TextHeightBehavior(3);
}
#[repr(transparent)]
/// Enumerates of heightmode of text.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextHeightBehavior(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// None style
    pub const TEXT_STYLE_NONE: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// All attributes style
    pub const TEXT_STYLE_ALL_ATTRIBUTES: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// Font style
    pub const TEXT_STYLE_FONT: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// Foreground style
    pub const TEXT_STYLE_FOREGROUND: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// Background style
    pub const TEXT_STYLE_BACKGROUND: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(4);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// Shadow style
    pub const TEXT_STYLE_SHADOW: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(5);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// Decorations style
    pub const TEXT_STYLE_DECORATIONS: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(6);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// Letter spacing style
    pub const TEXT_STYLE_LETTER_SPACING: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(7);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_TextStyleType {
    /// Word spacing style
    pub const TEXT_STYLE_WORD_SPACING: OH_Drawing_TextStyleType = OH_Drawing_TextStyleType(8);
}
#[repr(transparent)]
/// Enumerates text style type.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_TextStyleType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_ULTRA_CONDENSED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_EXTRA_CONDENSED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_CONDENSED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_SEMI_CONDENSED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(4);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_NORMAL: OH_Drawing_FontWidth = OH_Drawing_FontWidth(5);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_SEMI_EXPANDED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(6);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_EXPANDED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(7);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_EXTRA_EXPANDED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(8);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontWidth {
    pub const FONT_WIDTH_ULTRA_EXPANDED: OH_Drawing_FontWidth = OH_Drawing_FontWidth(9);
}
#[repr(transparent)]
/// Enumerates font width.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontWidth(pub ::core::ffi::c_uint);
/// Defines the font style struct.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontStyleStruct {
    /// Font weight
    pub weight: OH_Drawing_FontWeight,
    /// Font width
    pub width: OH_Drawing_FontWidth,
    /// Font slant
    pub slant: OH_Drawing_FontStyle,
}
/// Defines the fontfeature.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_FontFeature {
    /// key of fontfeature
    pub tag: *mut ::core::ffi::c_char,
    /// value of fontfeature
    pub value: ::core::ffi::c_int,
}
/// Defines StrutStyle info struct.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_Drawing_StrutStyle {
    /// The font weight to use when calculating the strut
    pub weight: OH_Drawing_FontWeight,
    /// The font style to use when calculating the strut
    pub style: OH_Drawing_FontStyle,
    /// The size of the ascent plus descent in logical pixels
    pub size: f64,
    /// The minimum height of the strut, as a multiple of fontSize
    pub heightScale: f64,
    /// Whether the height is override
    pub heightOverride: bool,
    /// Whether the halfleading is enable
    pub halfLeading: bool,
    /// The additional leading to apply to the strut as a multiple of Size
    pub leading: f64,
    /// Whether the strut height should be forced
    pub forceStrutHeight: bool,
    /// The size of font families
    pub familiesSize: usize,
    /// The families of the font to use when calculating the strut
    pub families: *mut *mut ::core::ffi::c_char,
}
extern "C" {
    /// Creates an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_TypographyStyle</b> object created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CreateTypographyStyle() -> *mut OH_Drawing_TypographyStyle;
    /// Releases the memory occupied by an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_DestroyTypographyStyle(arg1: *mut OH_Drawing_TypographyStyle);
    /// Sets the text direction.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `int` - Indicates the text direction to set. For details, see the enum <b>OH_Drawing_TextDirection</b>.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTypographyTextDirection(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the text alignment mode.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `int` - Indicates the text alignment mode to set. For details, see the enum <b>OH_Drawing_TextAlign</b>.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTypographyTextAlign(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the maximum number of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `int` - Indicates the maximum number of lines to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTypographyTextMaxLines(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Creates an <b>OH_Drawing_TextStyle</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_TextStyle</b> object created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CreateTextStyle() -> *mut OH_Drawing_TextStyle;
    /// Releases the memory occupied by an <b>OH_Drawing_TextStyle</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_DestroyTextStyle(arg1: *mut OH_Drawing_TextStyle);
    /// Sets the text color.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `uint32_t` - Indicates the color to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
    /// Sets the font size.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `double` - Indicates the font size to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleFontSize(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /// Sets the font weight.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `int` - Indicates the font weight to set. For details, see the enum <b>OH_Drawing_FontWeight</b>.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleFontWeight(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the text baseline.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `int` - Indicates the text baseline to set. For details, see the enum <b>OH_Drawing_TextBaseline</b>.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleBaseLine(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the text decoration.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `int` - Indicates the text decoration to set. For details, see the enum <b>OH_Drawing_TextDecoration</b>.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleDecoration(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the color for the text decoration.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `uint32_t` - Indicates the color to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleDecorationColor(arg1: *mut OH_Drawing_TextStyle, arg2: u32);
    /// Sets the font height.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `double` - Indicates the font height to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleFontHeight(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /// Sets the font families.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `int` - Indicates the number of font families to set.
    ///
    /// * `char` - Indicates the pointer to the font families to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleFontFamilies(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
        fontFamilies: *mut *const ::core::ffi::c_char,
    );
    /// Sets the font style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `int` - Indicates the font style to set. For details, see the enum <b>OH_Drawing_FontStyle</b>.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleFontStyle(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the locale.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `char` - Indicates the pointer to the locale to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_SetTextStyleLocale(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::core::ffi::c_char,
    );
    /// Sets the foreground brush style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Brush` - Indicates the pointer to a brush object <b>OH_Drawing_Brush</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTextStyleForegroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
    /// Gets the foreground brush style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Brush` - Indicates the pointer to a brush object <b>OH_Drawing_Brush</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetForegroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
    /// Sets the foreground pen style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Pen` - Indicates the pointer to a pen object <b>OH_Drawing_Pen</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTextStyleForegroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
    /// Gets the foreground pen style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Pen` - Indicates the pointer to a pen object <b>OH_Drawing_Pen</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetForegroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
    /// Sets the background brush style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Brush` - Indicates the pointer to a brush object <b>OH_Drawing_Brush</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTextStyleBackgroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
    /// Gets the background brush style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Brush` - Indicates the pointer to a brush object <b>OH_Drawing_Brush</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetBackgroundBrush(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Brush,
    );
    /// Sets the background pen style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Pen` - Indicates the pointer to a pen object <b>OH_Drawing_Pen</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTextStyleBackgroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
    /// Gets the background pen style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Pen` - Indicates the pointer to a pen object <b>OH_Drawing_Pen</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetBackgroundPen(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *mut OH_Drawing_Pen,
    );
    /// Creates a pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `OH_Drawing_FontCollection` - Indicates the pointer to an <b>OH_Drawing_FontCollection</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_TypographyCreate</b> object created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CreateTypographyHandler(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_FontCollection,
    ) -> *mut OH_Drawing_TypographyCreate;
    /// Releases the memory occupied by an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyCreate` - Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_DestroyTypographyHandler(arg1: *mut OH_Drawing_TypographyCreate);
    /// Sets the text style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyCreate` - Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_TypographyHandlerPushTextStyle(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *mut OH_Drawing_TextStyle,
    );
    /// Sets the text content.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyCreate` - Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    /// * `char` - Indicates the pointer to the text content to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_TypographyHandlerAddText(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *const ::core::ffi::c_char,
    );
    /// Removes the topmost style in the stack, leaving the remaining styles in effect.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyCreate` - Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_TypographyHandlerPopTextStyle(arg1: *mut OH_Drawing_TypographyCreate);
    /// Creates an <b>OH_Drawing_Typography</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyCreate` - Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_Typography</b> object created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CreateTypography(
        arg1: *mut OH_Drawing_TypographyCreate,
    ) -> *mut OH_Drawing_Typography;
    /// Releases the memory occupied by an <b>OH_Drawing_Typography</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_DestroyTypography(arg1: *mut OH_Drawing_Typography);
    /// Lays out the typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `double` - Indicates the maximum text width to set.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_TypographyLayout(arg1: *mut OH_Drawing_Typography, arg2: f64);
    /// Paints text on the canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// * `double` - Indicates the x coordinate.
    ///
    /// * `double` - Indicates the y coordinate.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_TypographyPaint(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_Canvas,
        arg3: f64,
        arg4: f64,
    );
    /// Paints path text on the canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// * `OH_Drawing_Path` - Indicates path information.
    ///
    /// * `double` - Indicates the distance along the path to add to the text's starting position.
    ///
    /// * `double` - Indicates the distance above(-) or below(+) the path to position the text.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyPaintOnPath(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_Canvas,
        arg3: *mut OH_Drawing_Path,
        arg4: f64,
        arg5: f64,
    );
    /// Gets the max width.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the max width.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.1
    pub fn OH_Drawing_TypographyGetMaxWidth(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Gets the height.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the height.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.1
    pub fn OH_Drawing_TypographyGetHeight(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Gets the longest line.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the length of the longest line.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.1
    pub fn OH_Drawing_TypographyGetLongestLine(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Obtains the width of the longest line with indent. You are advised to
    /// round up the return value in actual use. When the text content is empty, the
    /// minimum float value, that is, 0.0, is returned.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Pointer to an <b>OH_Drawing_Typography</b> object, which is obtained by
    /// [`OH_Drawing_CreateTypography`].
    ///
    /// # Returns
    ///
    /// * Returns the width of the longest line with indent.
    ///
    /// Available since API-level: 13
    ///
    /// Version: 1.1
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Drawing_TypographyGetLongestLineWithIndent(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Gets the min intrinsic width.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the min intrinsic width.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.1
    pub fn OH_Drawing_TypographyGetMinIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Gets the max intrinsic width.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the max intrinsic width.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.1
    pub fn OH_Drawing_TypographyGetMaxIntrinsicWidth(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Gets the alphabetic baseline.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the alphabetic baseline.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.1
    pub fn OH_Drawing_TypographyGetAlphabeticBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Gets the ideographic baseline.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the ideographic baseline.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.1
    pub fn OH_Drawing_TypographyGetIdeographicBaseline(arg1: *mut OH_Drawing_Typography) -> f64;
    /// Sets the placeholder.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyCreate` - Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    /// * `OH_Drawing_PlaceholderSpan` - Indicates the pointer to an <b>OH_Drawing_PlaceholderSpan</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyHandlerAddPlaceholder(
        arg1: *mut OH_Drawing_TypographyCreate,
        arg2: *mut OH_Drawing_PlaceholderSpan,
    );
    /// Gets the exceed maxLines.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the exceed maxLines.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyDidExceedMaxLines(arg1: *mut OH_Drawing_Typography) -> bool;
    /// Gets the rects for range.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `size_t` - Indicates the start of range to set.
    ///
    /// * `size_t` - Indicates the end of range to set.
    ///
    /// * `OH_Drawing_RectHeightStyle` - Indicates the height style to set.
    /// For details, see the enum <b>OH_Drawing_RectHeightStyle</b>.
    ///
    /// * `OH_Drawing_RectWidthStyle` - Indicates the width style to set.
    /// For details, see the enum <b>OH_Drawing_RectWidthStyle</b>.
    ///
    /// # Returns
    ///
    /// * Returns the rects for range.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetRectsForRange(
        arg1: *mut OH_Drawing_Typography,
        arg2: usize,
        arg3: usize,
        arg4: OH_Drawing_RectHeightStyle,
        arg5: OH_Drawing_RectWidthStyle,
    ) -> *mut OH_Drawing_TextBox;
    /// Gets the rects for placeholders.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the rects for placeholders.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetRectsForPlaceholders(
        arg1: *mut OH_Drawing_Typography,
    ) -> *mut OH_Drawing_TextBox;
    /// Gets left from textbox.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextBox` - Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    ///
    /// * `int` - Indicates the index of textbox.
    ///
    /// # Returns
    ///
    /// * Returns left from textbox.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetLeftFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /// Gets right from textbox.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextBox` - Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    ///
    /// * `int` - Indicates the index of textbox.
    ///
    /// # Returns
    ///
    /// * Returns right from textbox.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetRightFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /// Gets top from textbox.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextBox` - Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    ///
    /// * `int` - Indicates the index of textbox.
    ///
    /// # Returns
    ///
    /// * Returns top from textbox.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetTopFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /// Gets bottom from textbox.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextBox` - Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    ///
    /// * `int` - Indicates the index of textbox.
    ///
    /// # Returns
    ///
    /// * Returns bottom from textbox.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetBottomFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /// Gets direction from textbox.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextBox` - Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    ///
    /// * `int` - Indicates the index of textbox.
    ///
    /// # Returns
    ///
    /// * Returns direction from textbox.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetTextDirectionFromTextBox(
        arg1: *mut OH_Drawing_TextBox,
        arg2: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
    /// Gets size of textbox.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextBox` - Indicates the pointer to an <b>OH_Drawing_TextBox</b> object.
    ///
    /// # Returns
    ///
    /// * Returns size of textbox.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetSizeOfTextBox(arg1: *mut OH_Drawing_TextBox) -> usize;
    /// Gets the glyphposition at coordinate.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `double` - Indicates the positionX of typography to set.
    ///
    /// * `double` - Indicates the positionY of typography to set.
    ///
    /// # Returns
    ///
    /// * Returns the glyphposition at coordinate.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetGlyphPositionAtCoordinate(
        arg1: *mut OH_Drawing_Typography,
        arg2: f64,
        arg3: f64,
    ) -> *mut OH_Drawing_PositionAndAffinity;
    /// Gets the glyphposition at coordinate with cluster.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `double` - Indicates the positionX of typography to set.
    ///
    /// * `double` - Indicates the positionY of typography to set.
    ///
    /// # Returns
    ///
    /// * Returns the glyphposition at coordinate with cluster.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetGlyphPositionAtCoordinateWithCluster(
        arg1: *mut OH_Drawing_Typography,
        arg2: f64,
        arg3: f64,
    ) -> *mut OH_Drawing_PositionAndAffinity;
    /// Gets position from position and affinity.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_PositionAndAffinity` - Indicates the pointer to an <b>OH_Drawing_PositionAndAffinity</b> object.
    ///
    /// # Returns
    ///
    /// * Returns position from position and affinity.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetPositionFromPositionAndAffinity(
        arg1: *mut OH_Drawing_PositionAndAffinity,
    ) -> usize;
    /// Gets affinity from position and affinity.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_PositionAndAffinity` - Indicates the pointer to an <b>OH_Drawing_PositionAndAffinity</b> object.
    ///
    /// # Returns
    ///
    /// * Returns affinity from position and affinity.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetAffinityFromPositionAndAffinity(
        arg1: *mut OH_Drawing_PositionAndAffinity,
    ) -> ::core::ffi::c_int;
    /// Gets the word boundary.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `size_t` - Indicates the size of text to set.
    ///
    /// # Returns
    ///
    /// * Returns the word boundary.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetWordBoundary(
        arg1: *mut OH_Drawing_Typography,
        arg2: usize,
    ) -> *mut OH_Drawing_Range;
    /// Gets start from range.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Range` - Indicates the pointer to an <b>OH_Drawing_Range</b> object.
    ///
    /// # Returns
    ///
    /// * Returns start from range.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetStartFromRange(arg1: *mut OH_Drawing_Range) -> usize;
    /// Gets end from range.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Range` - Indicates the pointer to an <b>OH_Drawing_Range</b> object.
    ///
    /// # Returns
    ///
    /// * Returns end from range.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_GetEndFromRange(arg1: *mut OH_Drawing_Range) -> usize;
    /// Gets the line count.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the line count.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetLineCount(arg1: *mut OH_Drawing_Typography) -> usize;
    /// Sets the decoration style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `int` - Indicates the text decoration style to set.
    /// For details, see the enum <b>OH_Drawing_TextDecorationStyle</b>.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTextStyleDecorationStyle(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the decoration thickness scale.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `double` - Indicates the thickness scale of text decoration to set.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTextStyleDecorationThicknessScale(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: f64,
    );
    /// Sets the letter spacing.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `double` - Indicates the letter space to set.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTextStyleLetterSpacing(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /// Sets the word spacing.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `double` - Indicates the word space to set.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTextStyleWordSpacing(arg1: *mut OH_Drawing_TextStyle, arg2: f64);
    /// Sets the half leading.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `bool` - Indicates the half leading to set.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTextStyleHalfLeading(arg1: *mut OH_Drawing_TextStyle, arg2: bool);
    /// Sets the ellipsis.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `char*` - Indicates the pointer to ellipsis style.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTextStyleEllipsis(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::core::ffi::c_char,
    );
    /// Sets the ellipsis modal.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `int` - Indicates the ellipsis model to set. For details, see the enum <b>OH_Drawing_EllipsisModal</b>.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTextStyleEllipsisModal(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the break strategy.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `int` - Indicates the break strategy to set. For details, see the enum <b>OH_Drawing_BreakStrategy</b>.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTypographyTextBreakStrategy(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the word break type.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `int` - Indicates the word break type to set. For details, see the enum <b>OH_Drawing_WordBreakType</b>.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTypographyTextWordBreakType(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the ellipsis modal.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `int` - Indicates the ellipsis modal to set. For details, see the enum <b>OH_Drawing_EllipsisModal</b>.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_SetTypographyTextEllipsisModal(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// get line height.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `int` - Indicates the line number.
    ///
    /// # Returns
    ///
    /// * Returns line height.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetLineHeight(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
    ) -> f64;
    /// get line width.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `int` - Indicates the line number.
    ///
    /// # Returns
    ///
    /// * Returns line width.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_TypographyGetLineWidth(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
    ) -> f64;
    /// get line text range.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to an <b>OH_Drawing_Typography</b> object.
    ///
    /// * `int` - Indicates the line number.
    ///
    /// * `bool` - Indicates whether spaces are contained.
    ///
    /// # Returns
    ///
    /// * Returns line text range.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetLineTextRange(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
        arg3: bool,
    ) -> *mut OH_Drawing_Range;
    /// Creates an <b>OH_Drawing_FontDescriptor</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the font descriptor object <b>OH_Drawing_FontDescriptor</b> created.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CreateFontDescriptor() -> *mut OH_Drawing_FontDescriptor;
    /// Releases the memory occupied by an <b>OH_Drawing_FontDescriptor</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_FontDescriptor` - the pointer to the font descriptor object <b>OH_Drawing_FontDescriptor</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_DestroyFontDescriptor(arg1: *mut OH_Drawing_FontDescriptor);
    /// Creates an <b>OH_Drawing_FontParser</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the font parser object <b>OH_Drawing_FontParser</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CreateFontParser() -> *mut OH_Drawing_FontParser;
    /// Releases the memory occupied by an <b>OH_Drawing_FontParser</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_FontParser` - Indicates the pointer to the font parser object <b>OH_Drawing_FontParser</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_DestroyFontParser(arg1: *mut OH_Drawing_FontParser);
    /// Gets a list of system font names.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_FontParser` - Indicates the pointer to the font parser object <b>OH_Drawing_FontParser</b>.
    ///
    /// * `size_t` - Returns the number of obtained system font names.
    ///
    /// # Returns
    ///
    /// * Returns a list of obtained system fonts.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontParserGetSystemFontList(
        arg1: *mut OH_Drawing_FontParser,
        arg2: *mut usize,
    ) -> *mut *mut ::core::ffi::c_char;
    /// Releases the memory occupied by a list of system font names.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `char**` - Indicates the pointer to a list of system font names.
    ///
    /// * `size_t` - The number of obtained system font names.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_DestroySystemFontList(arg1: *mut *mut ::core::ffi::c_char, arg2: usize);
    /// Gets information about the system font by font name.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_FontParser` - Indicates the pointer to the font parser object <b>OH_Drawing_FontParser</b>.
    ///
    /// * `char**` - font name.
    ///
    /// # Returns
    ///
    /// * Returns system fonts information.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontParserGetFontByName(
        arg1: *mut OH_Drawing_FontParser,
        arg2: *const ::core::ffi::c_char,
    ) -> *mut OH_Drawing_FontDescriptor;
    /// Get line metrics information.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// # Returns
    ///
    /// * Indicates the pointer to a line metrics object <b>OH_Drawing_LineMetrics</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetLineMetrics(
        arg1: *mut OH_Drawing_Typography,
    ) -> *mut OH_Drawing_LineMetrics;
    /// Get the number of lines.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_LineMetrics` - Indicates the pointer to a line metrics object <b>OH_Drawing_LineMetrics</b>.
    ///
    /// # Returns
    ///
    /// * Returns the number of lines.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_LineMetricsGetSize(arg1: *mut OH_Drawing_LineMetrics) -> usize;
    /// Releases the memory occupied by line metrics.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_LineMetrics` - Indicates the pointer to a line metrics object <b>OH_Drawing_LineMetrics</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_DestroyLineMetrics(arg1: *mut OH_Drawing_LineMetrics);
    /// Gets the specified line by line number.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// * `int` - Line number.
    ///
    /// * `OH_Drawing_LineMetrics` - Indicates the pointer to a line metrics object <b>OH_Drawing_LineMetrics</b>.
    ///
    /// # Returns
    ///
    /// * Whether the line metrics was obtained.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetLineMetricsAt(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
        arg3: *mut OH_Drawing_LineMetrics,
    ) -> bool;
    /// Sets the ellipsis of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// * `char` - Indicates the line textellipsis.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextEllipsis(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *const ::core::ffi::c_char,
    );
    /// Sets the locale of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `char` - Indicates the pointer to the locale to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLocale(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *const ::core::ffi::c_char,
    );
    /// Sets the textSplitRatio of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `float` - Indicates the textSplitRatio of lines to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextSplitRatio(arg1: *mut OH_Drawing_TypographyStyle, arg2: f32);
    /// Gets the TextStyle of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Returns line text textstyle.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetTextStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> *mut OH_Drawing_TextStyle;
    /// Gets the EffectiveAlign of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Returns line text align.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetEffectiveAlignment(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> ::core::ffi::c_int;
    /// Gets the UnlimitedLines of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Returns whether the text has a maximum line limit,
    /// with true indicating a maximum line limit and false indicating no maximum line limit.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyIsLineUnlimited(arg1: *mut OH_Drawing_TypographyStyle) -> bool;
    /// Gets the IsEllipsized of lines in a text file.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Returns whether the text has ellipsis,
    /// true meaning there is an ellipsis and false meaning there is no ellipsis.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyIsEllipsized(arg1: *mut OH_Drawing_TypographyStyle) -> bool;
    /// set line textstyle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_TextStyle,
    );
    /// get line fontmetrics.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_Font_Metrics` - Indicates the pointer to a font metrics object <b>OH_Drawing_Font_Metrics</b>.
    ///
    /// # Returns
    ///
    /// * Whether the font metrics was obtained.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontMetrics(
        arg1: *mut OH_Drawing_Typography,
        arg2: *mut OH_Drawing_TextStyle,
        arg3: *mut OH_Drawing_Font_Metrics,
    ) -> bool;
    /// Gets the position of the specified line or the first text of the specified line.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// * `int` - Line number.
    ///
    /// * `bool` - True is the information for the whole line, and false is the information to get the first character
    ///
    /// * `bool` - Whether the text width contains whitespace.
    ///
    /// * `OH_Drawing_LineMetrics` - Indicates the pointer to a line metrics object <b>OH_Drawing_LineMetrics</b>.
    ///
    /// # Returns
    ///
    /// * return whether the information was successfully fetched.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetLineInfo(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
        arg3: bool,
        arg4: bool,
        arg5: *mut OH_Drawing_LineMetrics,
    ) -> bool;
    /// Sets the font weight of text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `int` - Indicates the font weight of text typography to set. For details,
    /// see the enum <b>OH_Drawing_FontWeight</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextFontWeight(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the font style of text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `int` - Indicates the font style of text typography to set. For details,
    /// see the enum <b>OH_Drawing_FontStyle</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextFontStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the font family of text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `char` - Indicates the pointer to the font family of text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextFontFamily(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *const ::core::ffi::c_char,
    );
    /// Sets the font size of text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `double` - Indicates the font size of text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextFontSize(arg1: *mut OH_Drawing_TypographyStyle, arg2: f64);
    /// Sets the font height of text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `double` - Indicates the font height of text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextFontHeight(arg1: *mut OH_Drawing_TypographyStyle, arg2: f64);
    /// Sets the half leading of text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `bool` - Indicates the half leading of text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextHalfLeading(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
    /// Sets whether to enable line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `bool` - Indicates whether the line style for text typography is used.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextUseLineStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
    /// Sets the font weight of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `int` - Indicates the font weight of line style for text typography to set.
    /// For details, see the enum <b>OH_Drawing_FontWeight</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleFontWeight(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the font style of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `int` - Indicates the font style of line style for text typography to set. For details,
    /// see the enum <b>OH_Drawing_FontStyle</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleFontStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
    );
    /// Sets the font families of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `int` - Indicates the number of font families to set.
    ///
    /// * `char` - Indicates the pointer to the font families of line style for text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleFontFamilies(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: ::core::ffi::c_int,
        fontFamilies: *mut *const ::core::ffi::c_char,
    );
    /// Sets the font size of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `double` - Indicates the font size of line style for text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleFontSize(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: f64,
    );
    /// Sets the font height of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `double` - Indicates the font height of line style for text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleFontHeight(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: f64,
    );
    /// Sets the half leading of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `bool` - Indicates the half leading of line for text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleHalfLeading(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
    /// Sets the spacing scale of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `double` - Indicates the space scale of line for text typography to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleSpacingScale(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: f64,
    );
    /// Sets whether only line style is enabled for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `bool` - Indicates the line style for text typography to set only.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyTextLineStyleOnly(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: bool,
    );
    /// Creates an <b>OH_Drawing_TextShadow</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the text shadow object created <b>OH_Drawing_TextShadow</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CreateTextShadow() -> *mut OH_Drawing_TextShadow;
    /// Releases the memory occupied by the text shadow object <b>OH_Drawing_TextShadow</b>.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextShadow` - Indicates the pointer to the text shadow object <b>OH_Drawing_TextShadow</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_DestroyTextShadow(arg1: *mut OH_Drawing_TextShadow);
    /// Gets the vector of TextShadow in TextStyle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `int` - Indicates the number in vector to set.
    ///
    /// * `OH_Drawing_TextShadow` - Indicates the pointer to the text shadow object <b>OH_Drawing_TextShadow</b>.
    ///
    /// # Returns
    ///
    /// * Returns the vector of TextShadow.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetShadows(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> *mut OH_Drawing_TextShadow;
    /// Gets the size of vector of TextShadow in TextStyle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// # Returns
    ///
    /// * Returns the size of vector.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetShadowCount(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> ::core::ffi::c_int;
    /// Adds element in vector of TextShadow in TextStyle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `OH_Drawing_TextShadow` - Indicates the pointer to the text shadow object <b>OH_Drawing_TextShadow</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleAddShadow(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const OH_Drawing_TextShadow,
    );
    /// clear elements in vector of TextShadow in TextStyle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleClearShadows(arg1: *mut OH_Drawing_TextStyle);
    /// Gets element in vector of TextShadow with index.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to a text style object <b>OH_Drawing_TextStyle</b>.
    ///
    /// * `int` - Indicates the index to set.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to element with the index in vector of the text style object
    /// <b>OH_Drawing_TextStyle</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetShadowWithIndex(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: ::core::ffi::c_int,
    ) -> *mut OH_Drawing_TextShadow;
    /// Set indents of the typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// * `float` - Indicates the pointer to the indents to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographySetIndents(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
        indents: *const f32,
    );
    /// Gets element with index in vector of Indents.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// * `int` - Indicates the index to set.
    ///
    /// # Returns
    ///
    /// * float Indicates the element with the index in vector of Indents.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetIndentsWithIndex(
        arg1: *mut OH_Drawing_Typography,
        arg2: ::core::ffi::c_int,
    ) -> f32;
    /// Releases the memory occupied by vector with the text shadow object <b>OH_Drawing_TextShadow</b>.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `Indicates` - the pointer to the text shadow object <b>OH_Drawing_TextShadow</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_DestroyTextShadows(arg1: *mut OH_Drawing_TextShadow);
    /// Set mode of applying the leading over and under text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `heightMode` - Indicates the mode to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextSetHeightBehavior(
        arg1: *mut OH_Drawing_TypographyStyle,
        heightMode: OH_Drawing_TextHeightBehavior,
    );
    /// Get mode of applying the leading over and under text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the mode.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextGetHeightBehavior(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextHeightBehavior;
    /// Set struct of background rect and styleId of text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `OH_Drawing_RectStyle_Info` - Indicates the pointer to an <b>OH_Drawing_RectStyle_Info</b> object.
    ///
    /// * `styleId` - Indicates the styleId of text to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleSetBackgroundRect(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const OH_Drawing_RectStyle_Info,
        styleId: ::core::ffi::c_int,
    );
    /// Add symbols in creating typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyCreate` - Indicates the pointer to an <b>OH_Drawing_TypographyCreate</b> object.
    ///
    /// * `symbol` - Indicates the symbol to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyHandlerAddSymbol(
        arg1: *mut OH_Drawing_TypographyCreate,
        symbol: u32,
    );
    /// Add font feature.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `tag` - Indicates the pointer to the tag to set.
    ///
    /// * `value` - Indicates the value to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleAddFontFeature(
        arg1: *mut OH_Drawing_TextStyle,
        tag: *const ::core::ffi::c_char,
        value: ::core::ffi::c_int,
    );
    /// Add font variation.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `char*` - Indicates the pointer to font variation axis.
    ///
    /// * `float` - Indicates the font variation value to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleAddFontVariation(
        arg1: *mut OH_Drawing_TextStyle,
        arg2: *const ::core::ffi::c_char,
        arg3: f32,
    );
    /// Get all font features.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * OH_Drawing_FontFeature Indicates the pointer to an array of structures of OH_Drawing_FontFeature.
    /// Get size of font feature by OH_Drawing_TextStyleGetFontFeatureSize.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontFeatures(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> *mut OH_Drawing_FontFeature;
    /// Release the memory occupied by array of structures of font features.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_FontFeature` - Indicates the pointer to an array of structures of OH_Drawing_FontFeature.
    ///
    /// * `fontFeatureSize` - Indicates the size of array of structures of OH_Drawing_FontFeature.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleDestroyFontFeatures(
        arg1: *mut OH_Drawing_FontFeature,
        fontFeatureSize: usize,
    );
    /// Get size of font features.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the size of fontfeatures map.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontFeatureSize(arg1: *mut OH_Drawing_TextStyle) -> usize;
    /// Clear font features.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleClearFontFeature(arg1: *mut OH_Drawing_TextStyle);
    /// Set baseline shift of text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `lineShift` - Indicates the baseline shift to set.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleSetBaselineShift(arg1: *mut OH_Drawing_TextStyle, lineShift: f64);
    /// Get baseline shift of text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the baseline shift.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetBaselineShift(arg1: *mut OH_Drawing_TextStyle) -> f64;
    /// Gets the text color.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the text color.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetColor(arg1: *mut OH_Drawing_TextStyle) -> u32;
    /// Gets text decoration style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns text decoration style.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetDecorationStyle(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_TextDecorationStyle;
    /// Gets font weight.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns font Weight.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontWeight(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_FontWeight;
    /// Gets font style.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns font style.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontStyle(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_FontStyle;
    /// Gets the font baseline.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the font baseline.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetBaseline(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_TextBaseline;
    /// Gets a list of font families.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `num` - Indicates count of font families result.
    ///
    /// # Returns
    ///
    /// * Returns a list of font families.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontFamilies(
        arg1: *mut OH_Drawing_TextStyle,
        num: *mut usize,
    ) -> *mut *mut ::core::ffi::c_char;
    /// Releases the memory occupied by a list of font families.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `fontFamilies` - Indicates the pointer to a list of font families.
    ///
    /// * `num` - Indicates the count of obtained font families.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleDestroyFontFamilies(
        fontFamilies: *mut *mut ::core::ffi::c_char,
        num: usize,
    );
    /// Gets font size.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns font size.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontSize(arg1: *mut OH_Drawing_TextStyle) -> f64;
    /// Gets the letter spacing of the text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the size of the letter spacing.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetLetterSpacing(arg1: *mut OH_Drawing_TextStyle) -> f64;
    /// Gets the word spacing of the text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns word spacing size.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetWordSpacing(arg1: *mut OH_Drawing_TextStyle) -> f64;
    /// Gets font height.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns font height.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontHeight(arg1: *mut OH_Drawing_TextStyle) -> f64;
    /// Gets whether to set the text to half line spacing.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns true indicates that the spacing takes effect,
    /// false indicates that the spacing does not take effect.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetHalfLeading(arg1: *mut OH_Drawing_TextStyle) -> bool;
    /// Gets the locale.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns a locale of data type as a pointer to a char. As with the TextStyle lifecycle.
    /// No release is required and the return value is invalidated after the set method is called.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetLocale(
        arg1: *mut OH_Drawing_TextStyle,
    ) -> *const ::core::ffi::c_char;
    /// Sets the text style, including font weight, font width and font slant.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `OH_Drawing_FontStyleStruct` - Indicates an <b>OH_Drawing_FontStyleStruct</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTextStyleFontStyleStruct(
        drawingTextStyle: *mut OH_Drawing_TextStyle,
        fontStyle: OH_Drawing_FontStyleStruct,
    );
    /// Gets the text style, including font weight, font width and font slant.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the <b>OH_Drawing_FontStyleStruct</b> object getted.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleGetFontStyleStruct(
        drawingTextStyle: *mut OH_Drawing_TextStyle,
    ) -> OH_Drawing_FontStyleStruct;
    /// Sets the typography style, including font weight, font width and font slant.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `OH_Drawing_FontStyleStruct` - Indicates an <b>OH_Drawing_FontStyleStruct</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyStyleFontStyleStruct(
        drawingStyle: *mut OH_Drawing_TypographyStyle,
        fontStyle: OH_Drawing_FontStyleStruct,
    );
    /// Gets the typography style, including font weight, font width and font slant.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the <b>OH_Drawing_FontStyleStruct</b> object getted.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleGetFontStyleStruct(
        drawingStyle: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_FontStyleStruct;
    /// Gets whether the two TextStyle objects are equal.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `style` - Indicates source of comparison <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `comparedStyle` - Indicates comparison <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Compare result.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleIsEqual(
        style: *const OH_Drawing_TextStyle,
        comparedStyle: *const OH_Drawing_TextStyle,
    ) -> bool;
    /// Gets whether the font properties of two TextStyle objects are equal.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `style` - Indicates source of <b>comparison OH_Drawing_TextStyle</b> object.
    ///
    /// * `comparedStyle` - Indicates comparison <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Compare result.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleIsEqualByFont(
        style: *const OH_Drawing_TextStyle,
        comparedStyle: *const OH_Drawing_TextStyle,
    ) -> bool;
    /// Gets whether two TextStyle objects match attributes
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `textStyleType` - Indicates enumerates of text style type.
    ///
    /// * `style` - Indicates source of comparison <b>OH_Drawing_TextStyle</b> object.
    ///
    /// * `comparedStyle` - Indicates comparison <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Match attributes result.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleIsAttributeMatched(
        style: *const OH_Drawing_TextStyle,
        comparedStyle: *const OH_Drawing_TextStyle,
        textStyleType: OH_Drawing_TextStyleType,
    ) -> bool;
    /// Set placeholder of TextStyle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleSetPlaceholder(style: *mut OH_Drawing_TextStyle);
    /// Gets whether placeholder is enable.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextStyle` - Indicates the pointer to an <b>OH_Drawing_TextStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Whether placeholder is enable.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TextStyleIsPlaceholder(style: *mut OH_Drawing_TextStyle) -> bool;
    /// Gets text alignment mode.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns text alignment mode.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleGetEffectiveAlignment(
        style: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextAlign;
    /// Gets whether the hinting is enabled.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// # Returns
    ///
    /// * True, if the hinting takes effect; False, if the hinting does not take effect.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleIsHintEnabled(style: *mut OH_Drawing_TypographyStyle) -> bool;
    /// Gets system font configuration information.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_FontConfigInfoErrorCode` - Indicates error code returned, based on the error code to
    /// release the memory of system font configuration information.
    /// For details, see the enum <b>OH_Drawing_FontConfigInfoErrorCode</b>.
    ///
    /// # Returns
    ///
    /// * Returns a pointer to system font configuration information.
    /// Indicates the pointer to an <b>OH_Drawing_FontConfigInfo</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_GetSystemFontConfigInfo(
        arg1: *mut OH_Drawing_FontConfigInfoErrorCode,
    ) -> *mut OH_Drawing_FontConfigInfo;
    /// Releases the memory occupied by system font configuration information.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_FontConfigInfo` - Indicates the pointer to an <b>OH_Drawing_FontConfigInfo</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_DestroySystemFontConfigInfo(arg1: *mut OH_Drawing_FontConfigInfo);
    /// Sets the strut style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `OH_Drawing_StrutStyle` - Indicates the pointer of <b>OH_Drawing_StrutStyle</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTypographyStyleTextStrutStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
        arg2: *mut OH_Drawing_StrutStyle,
    );
    /// Releases the memory occupied by an <b>OH_Drawing_StrutStyle</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_StrutStyle` - Indicates the pointer of <b>OH_Drawing_StrutStyle</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleDestroyStrutStyle(arg1: *mut OH_Drawing_StrutStyle);
    /// Gets the strut style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer of <b>OH_Drawing_StrutStyle</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleGetStrutStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> *mut OH_Drawing_StrutStyle;
    /// Overriding the struct StrutStyle equals operator.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `from` - Indicates source of comparison object.
    ///
    /// * `to` - Indicates comparison object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleStrutStyleEquals(
        from: *mut OH_Drawing_StrutStyle,
        to: *mut OH_Drawing_StrutStyle,
    ) -> bool;
    /// Sets the hinting of text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to an <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// * `hintsEnabled` - Indicates the hinting of text typography..
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleSetHintsEnabled(
        style: *mut OH_Drawing_TypographyStyle,
        hintsEnabled: bool,
    );
    /// Free up all the space taken up by the lineFontMetric.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font_Metrics` - Indicates the first address of the lineFontMetric gather to be destroyed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyDestroyLineFontMetrics(arg1: *mut OH_Drawing_Font_Metrics);
    /// Mark the Typography as dirty, and initially state the Typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to the text <b>OH_Drawing_Typography</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyMarkDirty(arg1: *mut OH_Drawing_Typography);
    /// Get the unresolved Glyphs count of lines in a text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to the text <b>OH_Drawing_Typography</b> object.
    ///
    /// # Returns
    ///
    /// * Returns unresolved Glyphs count.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetUnresolvedGlyphsCount(arg1: *mut OH_Drawing_Typography) -> i32;
    /// Update the font size of lines in a text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Typography` - Indicates the pointer to the text <b>OH_Drawing_Typography</b> object.
    ///
    /// * `from` - Indicates the source of the original font size.
    ///
    /// * `to` - Indicates the destination of the updated font size.
    ///
    /// * `fontSize` - Indicates the size of the font.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyUpdateFontSize(
        arg1: *mut OH_Drawing_Typography,
        from: usize,
        to: usize,
        fontSize: f32,
    );
    /// Get whether the text layout enables line styles.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to the text <b>OH_Drawing_TypographyStyle</b> object.
    ///
    /// # Returns
    ///
    /// * Whether or not to enable line styles in text layout only, true means enable, false means disable.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextGetLineStyle(arg1: *mut OH_Drawing_TypographyStyle) -> bool;
    /// Get the font weight of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the font weight of line style for text typography.
    /// For details, see the enum <b>OH_Drawing_FontWeight</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetFontWeight(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_FontWeight;
    /// Get the font style of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the font style of line style for text typography.
    /// For details, see the enum <b>OH_Drawing_FontStyle</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetFontStyle(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_FontStyle;
    /// Get the font families of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// * `num` - The number of obtained font names.
    ///
    /// # Returns
    ///
    /// * Return the font families of line style for text typography.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetFontFamilies(
        arg1: *mut OH_Drawing_TypographyStyle,
        num: *mut usize,
    ) -> *mut *mut ::core::ffi::c_char;
    /// Releases the memory occupied by a list of font families names.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `fontFamilies` - Indicates the pointer to a list of font families names.
    ///
    /// * `fontFamiliesNum` - Indicates the number of obtained font names.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleDestroyFontFamilies(
        fontFamilies: *mut *mut ::core::ffi::c_char,
        fontFamiliesNum: usize,
    );
    /// Get the font size of font size for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the font size of font size for text typography.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetFontSize(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> f64;
    /// Get the font height scale in text layout.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Retrun the font height scale in text layout.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetHeightScale(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> f64;
    /// Get whether to enable font height for line styles in text layout only.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Whether or not to enable the font height for line styles in text layout only,
    /// true means enable, false means disable.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetHeightOnly(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> bool;
    /// Get the half leading of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Whether to enable the text line half leading style, true means enable, false means disable.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetHalfLeading(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> bool;
    /// Get the spacing scale of line style for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the spacing scale of line style for text typography.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineStyleGetSpacingScale(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> f64;
    /// Get whether only line style is enabled for text typography.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Returns whether only line style is enabled for text layout, true means it is enabled,
    /// false means it is not.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyTextlineGetStyleOnly(arg1: *mut OH_Drawing_TypographyStyle)
        -> bool;
    /// Get the text alignment mode.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the text alignment mode. For details, see the enum <b>OH_Drawing_TextAlign</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetTextAlign(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextAlign;
    /// Get the text direction.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the text direction. For details, see the enum <b>OH_Drawing_TextDirection</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetTextDirection(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> OH_Drawing_TextDirection;
    /// Sets the maximum number of lines in a text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the maximum number of lines in a text.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetTextMaxLines(arg1: *mut OH_Drawing_TypographyStyle) -> usize;
    /// Get the ellipsis of lines in a text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TypographyStyle` - Indicates the pointer to a typography style object
    /// <b>OH_Drawing_TypographyStyle</b>.
    ///
    /// # Returns
    ///
    /// * Return the ellipsis of lines in a text.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyGetTextEllipsis(
        arg1: *mut OH_Drawing_TypographyStyle,
    ) -> *mut ::core::ffi::c_char;
    /// Releases the memory occupied by a list of Ellipsis names.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `ellipsis` - Indicates the pointer to a list of Ellipsis names.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyDestroyEllipsis(ellipsis: *mut ::core::ffi::c_char);
    /// Overriding the class ParagraphStyle equals operator.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `from` - Indicates source of comparison object.
    ///
    /// * `to` - Indicates comparison object.
    ///
    /// # Returns
    ///
    /// * Compare result.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyStyleEquals(
        from: *mut OH_Drawing_TypographyStyle,
        to: *mut OH_Drawing_TypographyStyle,
    ) -> bool;
    /// Releases the memory occupied by text box.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextBox` - Indicates the pointer to a text box object <b>OH_Drawing_TextBox</b>.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_TypographyDestroyTextBox(arg1: *mut OH_Drawing_TextBox);
    /// Sets the parameter of text-shadow.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_TextShadow` - Indicates the pointer to an <b>OH_Drawing_TextShadow</b> object.
    ///
    /// * `color` - Indicates the color setting of text-shadow.
    ///
    /// * `OH_Drawing_Point` - Indicates the pointer to an <b>OH_Drawing_Point</b> object.
    ///
    /// * `blurRadius` - Indicates the radius of blur for text-shadow.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SetTextShadow(
        shadow: *mut OH_Drawing_TextShadow,
        color: u32,
        offset: *mut OH_Drawing_Point,
        blurRadius: f64,
    );
}
