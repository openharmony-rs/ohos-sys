/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[allow(unused_imports)]
#[cfg(feature = "api-12")]
use crate::error_code::OH_Drawing_ErrorCode;

/** @brief Defines the options about GPU context.

@since 12
@version 1.0*/
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_GpuContextOptions {
    /// If true this allows path mask textures to be cached
    pub allowPathMaskCaching: bool,
}
extern "C" {
    /** @brief Creates an <b>OH_Drawing_GpuContext</b> object, whose GPU backend context is GL.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_GpuContextOptions Indicates the GPU context options.
    @return Returns the pointer to the <b>OH_Drawing_GpuContext</b> object created.
    @since 12
    @version 1.0*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_GpuContextCreateFromGL(
        arg1: OH_Drawing_GpuContextOptions,
    ) -> *mut OH_Drawing_GpuContext;
    /** @brief Destroys an <b>OH_Drawing_GpuContext</b> object and reclaims the memory occupied by the object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_GpuContext Indicates the pointer to an <b>OH_Drawing_GpuContext</b> object.
    @since 12
    @version 1.0*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_GpuContextDestroy(arg1: *mut OH_Drawing_GpuContext);
}
