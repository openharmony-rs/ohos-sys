/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

impl OH_Drawing_ErrorCode {
    /// @error Operation completed successfully.
    pub const OH_DRAWING_SUCCESS: OH_Drawing_ErrorCode = OH_Drawing_ErrorCode(0);
}
impl OH_Drawing_ErrorCode {
    /// @error Permission verification failed.
    pub const OH_DRAWING_ERROR_NO_PERMISSION: OH_Drawing_ErrorCode = OH_Drawing_ErrorCode(201);
}
impl OH_Drawing_ErrorCode {
    /// @error Invalid input parameter. For example, the pointer in the parameter is a nullptr.
    pub const OH_DRAWING_ERROR_INVALID_PARAMETER: OH_Drawing_ErrorCode = OH_Drawing_ErrorCode(401);
}
impl OH_Drawing_ErrorCode {
    /// @error The parameter is not in the valid range.
    pub const OH_DRAWING_ERROR_PARAMETER_OUT_OF_RANGE: OH_Drawing_ErrorCode =
        OH_Drawing_ErrorCode(26200001);
}
#[repr(transparent)]
/** @brief Enumerates error codes of drawing.
@since 12*/
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_ErrorCode(pub ::core::ffi::c_uint);
extern "C" {
    /** @brief Obtains the error code of the drawing module.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @return Returns the error code.
    @since 12
    @version 1.0*/
    pub fn OH_Drawing_ErrorCodeGet() -> OH_Drawing_ErrorCode;
}
