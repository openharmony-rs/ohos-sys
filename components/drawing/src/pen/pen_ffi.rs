// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

impl OH_Drawing_PenLineCapStyle {
    /// There is no cap style. Both ends of the line segment are cut off square.
    pub const LINE_FLAT_CAP: OH_Drawing_PenLineCapStyle = OH_Drawing_PenLineCapStyle(0);
    /// Square cap style. Both ends have a square, the height of which
    /// is half of the width of the line segment, with the same width.
    pub const LINE_SQUARE_CAP: OH_Drawing_PenLineCapStyle = OH_Drawing_PenLineCapStyle(1);
    /// Round cap style. Both ends have a semicircle centered, the diameter of which
    /// is the same as the width of the line segment.
    pub const LINE_ROUND_CAP: OH_Drawing_PenLineCapStyle = OH_Drawing_PenLineCapStyle(2);
}
#[repr(transparent)]
/// Enumerates line cap styles of a pen. The line cap style defines
/// the style of both ends of a line segment drawn by the pen.
///
///
/// Available since API-level: 8
///
/// Version: 1.0
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_PenLineCapStyle(pub ::core::ffi::c_uint);
impl OH_Drawing_PenLineJoinStyle {
    /// Mitered corner. If the angle of a polyline is small, its miter length may be inappropriate.
    /// In this case, you need to use the miter limit to limit the miter length.
    pub const LINE_MITER_JOIN: OH_Drawing_PenLineJoinStyle = OH_Drawing_PenLineJoinStyle(0);
    /// Round corner.
    pub const LINE_ROUND_JOIN: OH_Drawing_PenLineJoinStyle = OH_Drawing_PenLineJoinStyle(1);
    /// Beveled corner.
    pub const LINE_BEVEL_JOIN: OH_Drawing_PenLineJoinStyle = OH_Drawing_PenLineJoinStyle(2);
}
#[repr(transparent)]
/// Enumerates pen line join styles. The line join style defines
/// the shape of the joints of a polyline segment drawn by the pen.
///
///
/// Available since API-level: 8
///
/// Version: 1.0
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_PenLineJoinStyle(pub ::core::ffi::c_uint);
extern "C" {
    /// Creates an <b>OH_Drawing_Pen</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_Pen</b> object created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenCreate() -> *mut OH_Drawing_Pen;
    /// Creates an <b>OH_Drawing_Pen</b> copy object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_Pen</b> object created.
    /// If nullptr is returned, the creation fails.
    /// The possible cause of the failure is that the available memory is empty or a nullptr is passed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_PenCopy(pen: *mut OH_Drawing_Pen) -> *mut OH_Drawing_Pen;
    /// Destroys an <b>OH_Drawing_Pen</b> object and reclaims the memory occupied by the object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenDestroy(pen: *mut OH_Drawing_Pen);
    /// Checks whether anti-aliasing is enabled for a pen. If anti-aliasing is enabled,
    /// edges will be drawn with partial transparency.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if anti-aliasing is enabled; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenIsAntiAlias(pen: *const OH_Drawing_Pen) -> bool;
    /// Enables or disables anti-aliasing for a pen. If anti-aliasing is enabled,
    /// edges will be drawn with partial transparency.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `antiAlias` - Specifies whether to enable anti-aliasing. The value <b>true</b> means
    /// to enable anti-aliasing, and <b>false</b> means the opposite.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenSetAntiAlias(pen: *mut OH_Drawing_Pen, antiAlias: bool);
    /// Obtains the color of a pen. The color is used by the pen to outline a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns a 32-bit (ARGB) variable that describes the color.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenGetColor(pen: *const OH_Drawing_Pen) -> u32;
    /// Sets the color for a pen. The color is used by the pen to outline a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `color` - Indicates the color to set, which is a 32-bit (ARGB) variable.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenSetColor(pen: *mut OH_Drawing_Pen, color: u32);
    /// Obtains the alpha of a pen. The alpha is used by the pen to outline a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns a 8-bit variable that describes the alpha.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_PenGetAlpha(pen: *const OH_Drawing_Pen) -> u8;
    /// Sets the alpha for a pen. The alpha is used by the pen to outline a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `alpha` - Indicates the alpha to set, which is a 8-bit variable.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_PenSetAlpha(pen: *mut OH_Drawing_Pen, alpha: u8);
    /// Obtains the thickness of a pen. This thickness determines the width of the outline of a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the thickness.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenGetWidth(pen: *const OH_Drawing_Pen) -> f32;
    /// Sets the thickness for a pen. This thickness determines the width of the outline of a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `width` - Indicates the thickness to set, which is a variable.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenSetWidth(pen: *mut OH_Drawing_Pen, width: f32);
    /// Obtains the stroke miter limit of a polyline drawn by a pen.
    ///
    /// When the corner type is bevel, a beveled corner is displayed if the miter limit is exceeded,
    /// and a mitered corner is displayed if the miter limit is not exceeded.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the miter limit.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenGetMiterLimit(pen: *const OH_Drawing_Pen) -> f32;
    /// Sets the stroke miter limit for a polyline drawn by a pen.
    ///
    /// When the corner type is bevel, a beveled corner is displayed if the miter limit is exceeded,
    /// and a mitered corner is displayed if the miter limit is not exceeded.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `miter` - Indicates a variable that describes the miter limit.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenSetMiterLimit(pen: *mut OH_Drawing_Pen, miter: f32);
    /// Obtains the line cap style of a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the line cap style.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenGetCap(pen: *const OH_Drawing_Pen) -> OH_Drawing_PenLineCapStyle;
    /// Sets the line cap style for a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `capStyle` - Indicates a variable that describes the line cap style.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenSetCap(pen: *mut OH_Drawing_Pen, capStyle: OH_Drawing_PenLineCapStyle);
    /// Obtains the line join style of a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the line join style.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenGetJoin(pen: *const OH_Drawing_Pen) -> OH_Drawing_PenLineJoinStyle;
    /// Sets the line join style for a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `joinStyle` - Indicates a variable that describes the line join style.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_PenSetJoin(pen: *mut OH_Drawing_Pen, joinStyle: OH_Drawing_PenLineJoinStyle);
    /// Sets the shaderEffect for a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `shaderEffect` - Indicates the pointer to an <b>OH_Drawing_ShaderEffect</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_PenSetShaderEffect(
        pen: *mut OH_Drawing_Pen,
        shaderEffect: *mut OH_Drawing_ShaderEffect,
    );
    /// Sets the shadowLayer for a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `shadowLayer` - Indicates the pointer to an <b>OH_Drawing_ShadowLayer</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_PenSetShadowLayer(
        pen: *mut OH_Drawing_Pen,
        shadowLayer: *mut OH_Drawing_ShadowLayer,
    );
    /// Sets the pathEffect for a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `pathEffect` - Indicates the pointer to an <b>OH_Drawing_PathEffect</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_PenSetPathEffect(
        pen: *mut OH_Drawing_Pen,
        pathEffect: *mut OH_Drawing_PathEffect,
    );
    /// Sets the filter for a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `filter` - Indicates the pointer to an <b>OH_Drawing_Filter</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_PenSetFilter(pen: *mut OH_Drawing_Pen, filter: *mut OH_Drawing_Filter);
    /// Gets the filter from a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `filter` - Indicates the pointer to an <b>OH_Drawing_Filter</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_PenGetFilter(pen: *mut OH_Drawing_Pen, filter: *mut OH_Drawing_Filter);
    /// Sets a blender that implements the specified blendmode enum for a pen.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `blendMode` - Indicates the blend mode.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_PenSetBlendMode(pen: *mut OH_Drawing_Pen, blendMode: OH_Drawing_BlendMode);
    /// Gets the filled equivalent of the src path.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// * `src` - Indicates the Path read to create a filled version.
    ///
    /// * `dst` - Indicates the resulting Path.
    ///
    /// * `rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object that limits the PathEffect area if
    /// Pen has PathEffect.
    ///
    /// * `matrix` - Indicates the pointer to an <b>OH_Drawing_Matrix</b> object that tranfomation applied to
    /// PathEffect if Pen has PathEffect.
    ///
    /// # Returns
    ///
    /// * Returns true if get successes; false if get fails.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_PenGetFillPath(
        pen: *mut OH_Drawing_Pen,
        src: *const OH_Drawing_Path,
        dst: *mut OH_Drawing_Path,
        rect: *const OH_Drawing_Rect,
        matrix: *const OH_Drawing_Matrix,
    ) -> bool;
    /// Resets all pen contents to their initial values.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_PenReset(pen: *mut OH_Drawing_Pen);
}
