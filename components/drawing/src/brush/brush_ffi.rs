// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[allow(unused_imports)]
#[cfg(feature = "api-12")]
use crate::error_code::OH_Drawing_ErrorCode;

extern "C" {
    /// Creates an <b>OH_Drawing_Brush</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OH_Drawing_Brush</b> object created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_BrushCreate() -> *mut OH_Drawing_Brush;
    /// Creates an <b>OH_Drawing_Brush</b> copy object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OH_Drawing_Brush</b> object created.
    /// If nullptr is returned, the creation fails.
    /// The possible cause of the failure is that the available memory is empty or a nullptr is passed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_BrushCopy(arg1: *mut OH_Drawing_Brush) -> *mut OH_Drawing_Brush;
    /// Destroys an <b>OH_Drawing_Brush</b> object and reclaims the memory occupied by the object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_BrushDestroy(arg1: *mut OH_Drawing_Brush);
    /// Checks whether anti-aliasing is enabled for a brush. If anti-aliasing is enabled,
    /// edges will be drawn with partial transparency.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// # Returns
    ///
    /// Returns <b>true</b> if anti-aliasing is enabled; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_BrushIsAntiAlias(arg1: *const OH_Drawing_Brush) -> bool;
    /// Enables or disables anti-aliasing for a brush. If anti-aliasing is enabled,
    /// edges will be drawn with partial transparency.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `bool` - Specifies whether to enable anti-aliasing. The value <b>true</b> means
    /// to enable anti-aliasing, and <b>false</b> means the opposite.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_BrushSetAntiAlias(arg1: *mut OH_Drawing_Brush, arg2: bool);
    /// Obtains the color of a brush. The color is used by the brush to fill in a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// # Returns
    ///
    /// Returns a 32-bit (ARGB) variable that describes the color.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_BrushGetColor(arg1: *const OH_Drawing_Brush) -> u32;
    /// Sets the color for a brush. The color will be used by the brush to fill in a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `color` - Indicates the color to set, which is a 32-bit (ARGB) variable.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_BrushSetColor(arg1: *mut OH_Drawing_Brush, color: u32);
    /// Obtains the alpha of a brush. The alpha is used by the brush to fill in a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// # Returns
    ///
    /// Returns a 8-bit variable that describes the alpha.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_BrushGetAlpha(arg1: *const OH_Drawing_Brush) -> u8;
    /// Sets the alpha for a brush. The alpha will be used by the brush to fill in a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `alpha` - Indicates the alpha to set, which is a 8-bit variable.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_BrushSetAlpha(arg1: *mut OH_Drawing_Brush, alpha: u8);
    /// Sets the shaderEffect for a brush.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `OH_Drawing_ShaderEffect` - Indicates the pointer to an <b>OH_Drawing_ShaderEffect</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_BrushSetShaderEffect(
        arg1: *mut OH_Drawing_Brush,
        arg2: *mut OH_Drawing_ShaderEffect,
    );
    /// Sets the shadowLayer for a brush.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `OH_Drawing_ShadowLayer` - Indicates the pointer to an <b>OH_Drawing_ShadowLayer</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_BrushSetShadowLayer(
        arg1: *mut OH_Drawing_Brush,
        arg2: *mut OH_Drawing_ShadowLayer,
    );
    /// Sets the filter for a brush.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `OH_Drawing_Filter` - Indicates the pointer to an <b>OH_Drawing_Filter</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_BrushSetFilter(arg1: *mut OH_Drawing_Brush, arg2: *mut OH_Drawing_Filter);
    /// Gets the filter from a brush.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `OH_Drawing_Filter` - Indicates the pointer to an <b>OH_Drawing_Filter</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_BrushGetFilter(arg1: *mut OH_Drawing_Brush, arg2: *mut OH_Drawing_Filter);
    /// Sets a blender that implements the specified blendmode enum for a brush.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Pen` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// `OH_Drawing_BlendMode` - Indicates the blend mode.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_BrushSetBlendMode(arg1: *mut OH_Drawing_Brush, arg2: OH_Drawing_BlendMode);
    /// Resets all brush contents to their initial values.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_BrushReset(arg1: *mut OH_Drawing_Brush);
}
