// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[allow(unused_imports)]
#[cfg(feature = "api-12")]
use crate::error_code::OH_Drawing_ErrorCode;

#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_SrcRectConstraint {
    /// Using sampling only inside bounds in a slower manner.
    pub const STRICT_SRC_RECT_CONSTRAINT: OH_Drawing_SrcRectConstraint =
        OH_Drawing_SrcRectConstraint(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_SrcRectConstraint {
    /// Using sampling outside bounds in a faster manner.
    pub const FAST_SRC_RECT_CONSTRAINT: OH_Drawing_SrcRectConstraint =
        OH_Drawing_SrcRectConstraint(1);
}
#[repr(transparent)]
/// Enumeration defines the constraint type.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_SrcRectConstraint(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_PointMode {
    /// Draw each point separately.
    pub const POINT_MODE_POINTS: OH_Drawing_PointMode = OH_Drawing_PointMode(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_PointMode {
    /// Draw each pair of points as a line segment.
    pub const POINT_MODE_LINES: OH_Drawing_PointMode = OH_Drawing_PointMode(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_PointMode {
    /// Draw the array of points as a open polygon.
    pub const POINT_MODE_POLYGON: OH_Drawing_PointMode = OH_Drawing_PointMode(2);
}
#[repr(transparent)]
/// Enumerates of scale to fit flags, selects if an array of points are drawn as discrete points, as lines,
/// or as an open polygon.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_PointMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_CanvasClipOp {
    /// Clip with difference.
    pub const DIFFERENCE: OH_Drawing_CanvasClipOp = OH_Drawing_CanvasClipOp(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_Drawing_CanvasClipOp {
    /// Clip with intersection.
    pub const INTERSECT: OH_Drawing_CanvasClipOp = OH_Drawing_CanvasClipOp(1);
}
#[repr(transparent)]
/// Enumerates clip op.
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_CanvasClipOp(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_CanvasShadowFlags {
    /// Use no shadow flags.
    pub const SHADOW_FLAGS_NONE: OH_Drawing_CanvasShadowFlags = OH_Drawing_CanvasShadowFlags(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_CanvasShadowFlags {
    /// The occluding object is transparent.
    pub const SHADOW_FLAGS_TRANSPARENT_OCCLUDER: OH_Drawing_CanvasShadowFlags =
        OH_Drawing_CanvasShadowFlags(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_CanvasShadowFlags {
    /// No need to analyze shadows.
    pub const SHADOW_FLAGS_GEOMETRIC_ONLY: OH_Drawing_CanvasShadowFlags =
        OH_Drawing_CanvasShadowFlags(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_CanvasShadowFlags {
    /// Use all shadow flags.
    pub const SHADOW_FLAGS_ALL: OH_Drawing_CanvasShadowFlags = OH_Drawing_CanvasShadowFlags(3);
}
#[repr(transparent)]
/// Enumerates of shadow flags.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_CanvasShadowFlags(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_VertexMode {
    /// The vertices are a triangle list.
    pub const VERTEX_MODE_TRIANGLES: OH_Drawing_VertexMode = OH_Drawing_VertexMode(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_VertexMode {
    /// The vertices are a triangle strip.
    pub const VERTEX_MODE_TRIANGLES_STRIP: OH_Drawing_VertexMode = OH_Drawing_VertexMode(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_VertexMode {
    /// The vertices are a triangle fan.
    pub const VERTEX_MODE_TRIANGLE_FAN: OH_Drawing_VertexMode = OH_Drawing_VertexMode(2);
}
#[repr(transparent)]
/// Enumerates of vertices flags.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_VertexMode(pub ::core::ffi::c_uint);
extern "C" {
    /// Creates an <b>OH_Drawing_Canvas</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OH_Drawing_Canvas</b> object created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasCreate() -> *mut OH_Drawing_Canvas;
    /// Destroys an <b>OH_Drawing_Canvas</b> object and reclaims the memory occupied by the object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasDestroy(arg1: *mut OH_Drawing_Canvas);
    /// Binds a bitmap to a canvas so that the content drawn on the canvas
    /// is output to the bitmap (this process is called CPU rendering).
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Bitmap` - Indicates the pointer to an <b>OH_Drawing_Bitmap</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasBind(arg1: *mut OH_Drawing_Canvas, arg2: *mut OH_Drawing_Bitmap);
    /// Attaches a pen to a canvas so that the canvas will use the style and color of the pen to outline a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Pen` - Indicates the pointer to an <b>OH_Drawing_Pen</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasAttachPen(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Pen);
    /// Detaches the pen from a canvas so that the canvas will not use the style
    /// and color of the pen to outline a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasDetachPen(arg1: *mut OH_Drawing_Canvas);
    /// Attaches a brush to a canvas so that the canvas will use the style and color of the brush to fill in a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasAttachBrush(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Brush,
    );
    /// Detaches the brush from a canvas so that the canvas will not use the style
    /// and color of the brush to fill in a shape.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasDetachBrush(arg1: *mut OH_Drawing_Canvas);
    /// Saves the current canvas status (canvas matrix) to the top of the stack.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasSave(arg1: *mut OH_Drawing_Canvas);
    /// Saves matrix and clip, and allocates a bitmap for subsequent drawing.
    /// Calling restore discards changes to matrix and clip, and draws the bitmap.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object.
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasSaveLayer(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_Brush,
    );
    /// Restores the canvas status (canvas matrix) saved on the top of the stack.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasRestore(arg1: *mut OH_Drawing_Canvas);
    /// Gets the number of the canvas status (canvas matrix) saved in the stack.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// # Returns
    ///
    /// Returns a 32-bit variable that describes the number of canvas status.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasGetSaveCount(arg1: *mut OH_Drawing_Canvas) -> u32;
    /// Restores the specific number of the canvas status (canvas matrix) saved in the stack.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `saveCount` - Indicates the specific number of canvas status.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasRestoreToCount(arg1: *mut OH_Drawing_Canvas, saveCount: u32);
    /// Draws a line segment.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `x1` - Indicates the x coordinate of the start point of the line segment.
    ///
    /// `y1` - Indicates the y coordinate of the start point of the line segment.
    ///
    /// `x2` - Indicates the x coordinate of the end point of the line segment.
    ///
    /// `y2` - Indicates the y coordinate of the end point of the line segment.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasDrawLine(
        arg1: *mut OH_Drawing_Canvas,
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    );
    /// Draws a path.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Path` - Indicates the pointer to an <b>OH_Drawing_Path</b> object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasDrawPath(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Path);
    /// Draw the specified area of the Media::PixelMap to the specified area of the canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_PixelMap` - Indicates the pointer to an <b>OH_Drawing_PixelMap</b> object.
    ///
    /// `src` - the area of source pixelmap.
    ///
    /// `dst` - the area of destination canvas.
    ///
    /// `OH_Drawing_SamplingOptions` - the sampling mode.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawPixelMapRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_PixelMap,
        src: *const OH_Drawing_Rect,
        dst: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_SamplingOptions,
    );
    /// Fills clipped canvas area with brush.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Brush` - Indicates the pointer to an <b>OH_Drawing_Brush</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawBackground(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Brush,
    );
    /// Draws region using clip, matrix and paint.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Region` - Indicates the pointer to an <b>OH_Drawing_Region</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawRegion(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Region,
    );
    /// Draws a point.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `point` - Indicates the pointer to an <b>OH_Drawing_Point</b> object.
    ///
    /// # Returns
    ///
    /// Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if canvas or point is nullptr.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawPoint(
        canvas: *mut OH_Drawing_Canvas,
        point: *const OH_Drawing_Point2D,
    ) -> OH_Drawing_ErrorCode;
    /// Draws point array as separate point, line segment or open polygon according to given point mode.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `mode` - Draw points enum.
    ///
    /// `count` - The point count.
    ///
    /// `OH_Drawing_Point2D` - Point struct array.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawPoints(
        arg1: *mut OH_Drawing_Canvas,
        mode: OH_Drawing_PointMode,
        count: u32,
        arg2: *const OH_Drawing_Point2D,
    );
    /// Draws a bitmap.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Bitmap` - Indicates the pointer to an <b>OH_Drawing_Bitmap</b> object.
    ///
    /// `left` - Indicates the left position of the <b>OH_Drawing_Bitmap</b>.
    ///
    /// `top` - Indicates the top position of the <b>OH_Drawing_Bitmap</b>.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasDrawBitmap(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Bitmap,
        left: f32,
        top: f32,
    );
    /// Draw the specified area of the bitmap to the specified area of the canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Bitmap` - Indicates the pointer to an <b>OH_Drawing_Bitmap</b> object.
    ///
    /// `src` - the area of source bitmap, can be nullptr.
    ///
    /// `dst` - the area of destination canvas.
    ///
    /// `OH_Drawing_SamplingOptions` - the sampling mode.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawBitmapRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Bitmap,
        src: *const OH_Drawing_Rect,
        dst: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_SamplingOptions,
    );
    /// Draws a rect.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasDrawRect(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Rect);
    /// Draws a circle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Point` - Indicates the pointer to an <b>OH_Drawing_Point</b> object.
    ///
    /// `radius` - Indicates the radius of the circle.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasDrawCircle(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Point,
        radius: f32,
    );
    /// Fills the entire canvas with the specified color and blend mode.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `color` - Indicates the color, which is a 32-bit variable.
    ///
    /// `blendMode` - Indicates the blend mode.
    ///
    /// # Returns
    ///
    /// Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if canvas is nullptr.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawColor(
        canvas: *mut OH_Drawing_Canvas,
        color: u32,
        blendMode: OH_Drawing_BlendMode,
    ) -> OH_Drawing_ErrorCode;
    /// Draws an oval.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasDrawOval(arg1: *mut OH_Drawing_Canvas, arg2: *const OH_Drawing_Rect);
    /// Draws an arc.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object.
    ///
    /// `startAngle` - Indicates the startAngle of the arc.
    ///
    /// `sweepAngle` - Indicates the sweepAngle of the arc.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasDrawArc(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Rect,
        startAngle: f32,
        sweepAngle: f32,
    );
    /// Draws a roundrect.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_RoundRect` - Indicates the pointer to an <b>OH_Drawing_RoundRect</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasDrawRoundRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_RoundRect,
    );
    /// Draws a single character.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `str` - Indicates the single character encoded in UTF-8.
    ///
    /// `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// `x` - Indicates the horizontal offset applied to the single character.
    ///
    /// `y` - Indicates the vertical offset applied to the single character.
    ///
    /// # Returns
    ///
    /// Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if any of canvas, str
    /// and font is nullptr or strlen(str) is 0.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawSingleCharacter(
        canvas: *mut OH_Drawing_Canvas,
        str_: *const ::core::ffi::c_char,
        font: *const OH_Drawing_Font,
        x: f32,
        y: f32,
    ) -> OH_Drawing_ErrorCode;
    /// Draws a textblob.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_TextBlob` - Indicates the pointer to an <b>OH_Drawing_TextBlob</b> object.
    ///
    /// `x` - Indicates the horizontal offset applied to blob.
    ///
    /// `y` - Indicates the vertical offset applied to blob.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasDrawTextBlob(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_TextBlob,
        x: f32,
        y: f32,
    );
    /// Clip a rect.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object.
    ///
    /// `clipOp` - Indicates the operation to apply to clip.
    ///
    /// `doAntiAlias` - Indicates whether clip operation requires anti-aliased.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasClipRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Rect,
        clipOp: OH_Drawing_CanvasClipOp,
        doAntiAlias: bool,
    );
    /// Clip a round rect.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_RoundRect` - Indicates the pointer to an <b>OH_Drawing_RoundRect</b> object.
    ///
    /// `clipOp` - Indicates the operation to apply to clip.
    ///
    /// `doAntiAlias` - Indicates whether clip operation requires anti-aliased.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasClipRoundRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_RoundRect,
        clipOp: OH_Drawing_CanvasClipOp,
        doAntiAlias: bool,
    );
    /// Clip a path.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Path` - Indicates the pointer to an <b>OH_Drawing_Path</b> object.
    ///
    /// `clipOp` - Indicates the operation to apply to clip.
    ///
    /// `doAntiAlias` - Indicates whether clip operation requires anti-aliased.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasClipPath(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Path,
        clipOp: OH_Drawing_CanvasClipOp,
        doAntiAlias: bool,
    );
    /// Clips a region.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `region` - Indicates the pointer to an <b>OH_Drawing_Region</b> object.
    ///
    /// `clipOp` - To apply to clip.
    ///
    /// # Returns
    ///
    /// Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if canvas or region is nullptr.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasClipRegion(
        canvas: *mut OH_Drawing_Canvas,
        region: *const OH_Drawing_Region,
        clipOp: OH_Drawing_CanvasClipOp,
    ) -> OH_Drawing_ErrorCode;
    /// Rotates by degrees. Positive degrees rotates clockwise.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `degrees` - Indicates the amount to rotate, in degrees.
    ///
    /// `px` - Indicates the x-axis value of the point to rotate about.
    ///
    /// `py` - Indicates the y-axis value of the point to rotate about.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasRotate(arg1: *mut OH_Drawing_Canvas, degrees: f32, px: f32, py: f32);
    /// Translates by dx along the x-axis and dy along the y-axis.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `dx` - Indicates the distance to translate on x-axis.
    ///
    /// `dy` - Indicates the distance to translate on y-axis.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasTranslate(arg1: *mut OH_Drawing_Canvas, dx: f32, dy: f32);
    /// Scales by sx on the x-axis and sy on the y-axis.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `sx` - Indicates the amount to scale on x-axis.
    ///
    /// `sy` - Indicates the amount to scale on y-axis.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_CanvasScale(arg1: *mut OH_Drawing_Canvas, sx: f32, sy: f32);
    /// Skew by sx on the x-axis and sy on the y-axis.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `sx` - Indicates the amount to skew on x-axis.
    ///
    /// `sy` - Indicates the amount to skew on y-axis.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasSkew(arg1: *mut OH_Drawing_Canvas, sx: f32, sy: f32);
    /// Clears a canvas by using a specified color.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `color` - Indicates the color, which is a 32-bit (ARGB) variable.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_Drawing_CanvasClear(arg1: *mut OH_Drawing_Canvas, color: u32);
    /// Get the width of a canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasGetWidth(arg1: *mut OH_Drawing_Canvas) -> i32;
    /// Get the height of a canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasGetHeight(arg1: *mut OH_Drawing_Canvas) -> i32;
    /// Get the bounds of clip of a canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasGetLocalClipBounds(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Rect,
    );
    /// Get a 3x3 matrix of the transform from local coordinates to 'device'.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Matrix` - Indicates the pointer to an <b>OH_Drawing_Matrix</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasGetTotalMatrix(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Matrix,
    );
    /// Use the passed matrix to transforming the geometry, then use existing matrix.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Matrix` - Indicates the pointer to an <b>OH_Drawing_Matrix</b> object,
    /// represents the matrix which is passed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasConcatMatrix(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Matrix,
    );
    /// Use circular light to draw an offset spot shadow and outlining ambient shadow for the given path.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Path` - Indicates the pointer to an <b>OH_Drawing_Path</b> object, use to generate shadows.
    ///
    /// `planeParams` - Represents the value of the function which returns Z offset of the occluder from the
    /// canvas based on x and y.
    ///
    /// `devLightPos` - Represents the position of the light relative to the canvas.
    ///
    /// `lightRadius` - The radius of the circular light.
    ///
    /// `ambientColor` - Ambient shadow's color.
    ///
    /// `spotColor` - Spot shadow's color.
    ///
    /// `flag` - Indicates the flag to control opaque occluder, shadow, and light position.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawShadow(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Path,
        planeParams: OH_Drawing_Point3D,
        devLightPos: OH_Drawing_Point3D,
        lightRadius: f32,
        ambientColor: u32,
        spotColor: u32,
        flag: OH_Drawing_CanvasShadowFlags,
    );
    /// Sets matrix of canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Matrix` - Indicates the pointer to an <b>OH_Drawing_Matrix</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasSetMatrix(arg1: *mut OH_Drawing_Canvas, arg2: *mut OH_Drawing_Matrix);
    /// Reset matrix to the idenmtity matrix, any prior matrix state is overwritten.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasResetMatrix(arg1: *mut OH_Drawing_Canvas);
    /// Draws the specified source rectangle of the image onto the canvas,
    /// scaled and translated to the destination rectangle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Image` - Indicates the pointer to an <b>OH_Drawing_Image</b> object.
    ///
    /// `src` - The area of source image.
    ///
    /// `dst` - The area of destination canvas.
    ///
    /// `OH_Drawing_SamplingOptions` - Indicates the pointer to an <b>OH_Drawing_SamplingOptions</b> object.
    ///
    /// `OH_Drawing_SrcRectConstraint` - Constraint type.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawImageRectWithSrc(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *const OH_Drawing_Image,
        src: *const OH_Drawing_Rect,
        dst: *const OH_Drawing_Rect,
        arg3: *const OH_Drawing_SamplingOptions,
        arg4: OH_Drawing_SrcRectConstraint,
    );
    /// Draws the specified source rectangle of the image onto the canvas,
    /// scaled and translated to the destination rectangle.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Image` - Indicates the pointer to an <b>OH_Drawing_Image</b> object.
    ///
    /// `OH_Drawing_Rect` - Indicates the pointer to an <b>OH_Drawing_Rect</b> object.
    ///
    /// `OH_Drawing_SamplingOptions` - Indicates the pointer to an <b>OH_Drawing_SamplingOptions</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawImageRect(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Image,
        dst: *mut OH_Drawing_Rect,
        arg3: *mut OH_Drawing_SamplingOptions,
    );
    /// Draw a triangular mesh with vertex descriptions.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `vertexMmode` - Draw a set of vertices.
    ///
    /// `vertexCount` - Vertex count.
    ///
    /// `positions` - Positions data pointer.
    ///
    /// `texs` - Texture coordinate data pointer.
    ///
    /// `colors` - Color data pointer.
    ///
    /// `indexCount` - Index count.
    ///
    /// `indices` - Index data pointer.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasDrawVertices(
        arg1: *mut OH_Drawing_Canvas,
        vertexMmode: OH_Drawing_VertexMode,
        vertexCount: i32,
        positions: *const OH_Drawing_Point2D,
        texs: *const OH_Drawing_Point2D,
        colors: *const u32,
        indexCount: i32,
        indices: *const u16,
        mode: OH_Drawing_BlendMode,
    );
    /// Read pixels data from canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Image_Info` - width, height, colorType, and alphaType of dstPixels.
    ///
    /// `dstPixels` - destination pixel storage.
    ///
    /// `dstRowBytes` - size of one row of pixels.
    ///
    /// `srcX` - offset into canvas writable pixels on x-axis.
    ///
    /// `srcY` - offset into canvas writable pixels on y-axis.
    ///
    /// # Returns
    ///
    /// true if pixels are copied to dstPixels.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasReadPixels(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Image_Info,
        dstPixels: *mut ::core::ffi::c_void,
        dstRowBytes: u32,
        srcX: i32,
        srcY: i32,
    ) -> bool;
    /// Read pixels data to a bitmap from canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `OH_Drawing_Canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `OH_Drawing_Bitmap` - Indicates the pointer to an <b>OH_Drawing_Bitmap</b> object.
    ///
    /// `srcX` - offset into canvas writable pixels on x-axis.
    ///
    /// `srcY` - offset into canvas writable pixels on y-axis.
    ///
    /// # Returns
    ///
    /// true if pixels are copied to dstBitmap.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasReadPixelsToBitmap(
        arg1: *mut OH_Drawing_Canvas,
        arg2: *mut OH_Drawing_Bitmap,
        srcX: i32,
        srcY: i32,
    ) -> bool;
    /// Checks whether the drawable area is empty.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `isClipEmpty` - Indicates if drawable area is empty.
    ///
    /// # Returns
    ///
    /// Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if canvas or isClipEmpty is nullptr.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasIsClipEmpty(
        canvas: *mut OH_Drawing_Canvas,
        isClipEmpty: *mut bool,
    ) -> OH_Drawing_ErrorCode;
    /// Gets image info of canvas.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `imageInfo` - Indicates the pointer to an <b>OH_Drawing_Image_Info</b> object.
    ///
    /// # Returns
    ///
    /// Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if canvas or imageInfo is nullptr.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_CanvasGetImageInfo(
        canvas: *mut OH_Drawing_Canvas,
        imageInfo: *mut OH_Drawing_Image_Info,
    ) -> OH_Drawing_ErrorCode;
    /// Replay drawing command.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// `canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// `recordCmd` - Indicates the pointer to an <b>OH_Drawing_RecordCmd</b> object.
    ///
    /// # Returns
    ///
    /// Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if canvas or recordCmd is nullptr.
    ///
    /// Available since API-level: 13
    ///
    /// Version: 1.0
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Drawing_CanvasDrawRecordCmd(
        canvas: *mut OH_Drawing_Canvas,
        recordCmd: *mut OH_Drawing_RecordCmd,
    ) -> OH_Drawing_ErrorCode;
}
