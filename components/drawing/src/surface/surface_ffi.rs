/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[allow(unused_imports)]
#[cfg(feature = "api-12")]
use crate::error_code::OH_Drawing_ErrorCode;

extern "C" {
    /** @brief Creates an <b>OH_Drawing_Surface</b> object on GPU indicated by context.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_GpuContext Indicates the pointer to an <b>OH_Drawing_GpuContext</b> object.
    @param bool Indicates whether an allocation should count against a cache budget.
    @param OH_Drawing_Image_Info Indicates the image info.
    @return Returns the pointer to the <b>OH_Drawing_Surface</b> object created.
    @since 12
    @version 1.0*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SurfaceCreateFromGpuContext(
        arg1: *mut OH_Drawing_GpuContext,
        arg2: bool,
        arg3: OH_Drawing_Image_Info,
    ) -> *mut OH_Drawing_Surface;
    /** @brief Gets the canvas that draws into surface.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Surface Indicates the pointer to an <b>OH_Drawing_Surface</b> object.
    @return Returns the pointer to the <b>OH_Drawing_Canvas</b> object. The returned pointer does not need to be managed
            by the caller.
    @since 12
    @version 1.0*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SurfaceGetCanvas(arg1: *mut OH_Drawing_Surface) -> *mut OH_Drawing_Canvas;
    /** @brief Destroys an <b>OH_Drawing_Surface</b> object and reclaims the memory occupied by the object.

    @syscap SystemCapability.Graphic.Graphic2D.NativeDrawing
    @param OH_Drawing_Surface Indicates the pointer to an <b>OH_Drawing_Surface</b> object.
    @since 12
    @version 1.0*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_SurfaceDestroy(arg1: *mut OH_Drawing_Surface);
}
