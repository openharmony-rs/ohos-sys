// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::text_declaration::{OH_Drawing_Run, OH_Drawing_TextLine, OH_Drawing_Typography};
use crate::types::*;

/// User-defined callback functions for using offsets and indexes.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
/// # Arguments
///
/// * `offset` - Character offset is traversed as an argument to the callback function.
///
/// * `index` - Character index is traversed as an argument to the callback function.
///
/// * `leadingEdge` - Whether the current offset is at the character front, as an argument to the callback function.
///
/// # Returns
///
/// * The return value of the user-defined callback function.
/// If false is returned, the traversal continues.
/// If true is returned, the traversal stops.
///
/// Available since API-level: 18
///
/// Version: 1.0
#[cfg(feature = "api-18")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
pub type Drawing_CaretOffsetsCallback = ::core::option::Option<
    unsafe extern "C" fn(offset: f64, index: i32, leadingEdge: bool) -> bool,
>;
extern "C" {
    /// Get text line information.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `typography` - Indicates the pointer to a typography object <b>OH_Drawing_Typography</b>.
    ///
    /// # Returns
    ///
    /// * Indicates the pointer to a text line array object <b>OH_Drawing_Array</b>.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TypographyGetTextLines(
        typography: *mut OH_Drawing_Typography,
    ) -> *mut OH_Drawing_Array;
    /// Releases the memory occupied by the text line array object <b>OH_Drawing_Array</b>.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `lines` - Indicates the pointer to the text line array object <b>OH_Drawing_Array</b>.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_DestroyTextLines(lines: *mut OH_Drawing_Array);
    /// Releases the memory occupied by the text line object <b>OH_Drawing_TextLine</b>.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to the text line object <b>OH_Drawing_TextLine</b>.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_DestroyTextLine(line: *mut OH_Drawing_TextLine);
    /// Get the text line object by index.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `lines` - Indicates the pointer to the text line array object <b>OH_Drawing_Array</b>.
    ///
    /// * `index` - The text line object index.
    ///
    /// # Returns
    ///
    /// * Indicates the pointer to a text line object <b>OH_Drawing_TextLine</b>.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_GetTextLineByIndex(
        lines: *mut OH_Drawing_Array,
        index: usize,
    ) -> *mut OH_Drawing_TextLine;
    /// Get the count of glyphs.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the count of glyphs.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetGlyphCount(line: *mut OH_Drawing_TextLine) -> f64;
    /// Get the range of text line.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `start` - Indicates the pointer to text line start position.
    ///
    /// * `end` - Indicates the pointer to text line end position.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetTextRange(
        line: *mut OH_Drawing_TextLine,
        start: *mut usize,
        end: *mut usize,
    );
    /// Get the glyph runs array of text line.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// # Returns
    ///
    /// * Indicates the pointer to a glyph runs array object of text line <b>OH_Drawing_Array</b>.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetGlyphRuns(line: *mut OH_Drawing_TextLine)
        -> *mut OH_Drawing_Array;
    /// Releases the memory occupied by the run array object <b>OH_Drawing_Array</b>.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `runs` - Indicates the pointer to the run array object <b>OH_Drawing_Array</b>.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_DestroyRuns(runs: *mut OH_Drawing_Array);
    /// Get the run object by index.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `runs` - Indicates the pointer to the run array object <b>OH_Drawing_Array</b>.
    ///
    /// * `index` - The run object index.
    ///
    /// # Returns
    ///
    /// * Indicates the pointer to a run object <b>OH_Drawing_Run</b>.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_GetRunByIndex(
        runs: *mut OH_Drawing_Array,
        index: usize,
    ) -> *mut OH_Drawing_Run;
    /// Paint the range of text line.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `canvas` - Indicates the pointer to an <b>OH_Drawing_Canvas</b> object.
    ///
    /// * `x` - Represents the X-axis position on the canvas.
    ///
    /// * `y` - Represents the Y-axis position on the canvas.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLinePaint(
        line: *mut OH_Drawing_TextLine,
        canvas: *mut OH_Drawing_Canvas,
        x: f64,
        y: f64,
    );
    /// Creates a truncated text line object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `width` - Indicates the text line width to set.
    ///
    /// * `mode` - Indicates the ellipsis model to set, EllipsisMode:MIDDLE is not supported.
    /// For details, see the enum <b>OH_Drawing_EllipsisModal</b>.
    ///
    /// * `ellipsis` - Indicates the ellipsis string to set.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_TextLine</b> object created.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineCreateTruncatedLine(
        line: *mut OH_Drawing_TextLine,
        width: f64,
        mode: ::core::ffi::c_int,
        ellipsis: *const ::core::ffi::c_char,
    ) -> *mut OH_Drawing_TextLine;
    /// Gets the text line typographic bounds.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `ascent` - Indicates the distance that the pointer points to remain above the baseline.
    ///
    /// * `descent` - Indicates the pointer to the distance that remains below the baseline.
    ///
    /// * `leading` - Indicates the pointer to the line Spacing.
    ///
    /// # Returns
    ///
    /// * Returns The total width of the typesetting border.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetTypographicBounds(
        line: *mut OH_Drawing_TextLine,
        ascent: *mut f64,
        descent: *mut f64,
        leading: *mut f64,
    ) -> f64;
    /// Gets the text line image bounds.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_Rect</b> struct created.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetImageBounds(
        line: *mut OH_Drawing_TextLine,
    ) -> *mut OH_Drawing_Rect;
    /// Gets the tail space width.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the tail space width.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetTrailingSpaceWidth(line: *mut OH_Drawing_TextLine) -> f64;
    /// Gets the string index of the given position.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `point` - Indicates the pointer to an <b>OH_Drawing_Point</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the string index for a given position.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetStringIndexForPosition(
        line: *mut OH_Drawing_TextLine,
        point: *mut OH_Drawing_Point,
    ) -> i32;
    /// Gets the offset of the given string index.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `index` - The given string index.
    ///
    /// # Returns
    ///
    /// * Returns the offset for a given string index.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetOffsetForStringIndex(
        line: *mut OH_Drawing_TextLine,
        index: i32,
    ) -> f64;
    /// Enumerate caret offset and index in text lines.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `callback` - User-defined callback functions, see <b>Drawing_CaretOffsetsCallback</b>.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineEnumerateCaretOffsets(
        line: *mut OH_Drawing_TextLine,
        callback: Drawing_CaretOffsetsCallback,
    );
    /// Gets the text offset based on the given alignment factor and alignment width.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `line` - Indicates the pointer to an <b>OH_Drawing_TextLine</b> object.
    ///
    /// * `alignmentFactor` - The coefficients that text needs to be aligned.
    /// Less than or equal to 0 is left justified, 0.5 is center justified,
    /// and greater than or equal to 1 is right justified.
    ///
    /// * `alignmentWidth` - The width of the text to be aligned.
    /// Returns 0 if it is less than the actual width of the text.
    ///
    /// # Returns
    ///
    /// * Returns the offset of the aligned text.
    ///
    /// Available since API-level: 18
    ///
    /// Version: 1.0
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_Drawing_TextLineGetAlignmentOffset(
        line: *mut OH_Drawing_TextLine,
        alignmentFactor: f64,
        alignmentWidth: f64,
    ) -> f64;
}
