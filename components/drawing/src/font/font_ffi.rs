// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[allow(unused_imports)]
#[cfg(feature = "api-12")]
use crate::error_code::OH_Drawing_ErrorCode;

#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontHinting {
    /// glyph outlines unchanged
    pub const FONT_HINTING_NONE: OH_Drawing_FontHinting = OH_Drawing_FontHinting(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontHinting {
    /// minimal modification to improve contrast
    pub const FONT_HINTING_SLIGHT: OH_Drawing_FontHinting = OH_Drawing_FontHinting(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontHinting {
    /// glyph outlines modified to improve contrast
    pub const FONT_HINTING_NORMAL: OH_Drawing_FontHinting = OH_Drawing_FontHinting(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontHinting {
    /// modifies glyph outlines for maximum contrast
    pub const FONT_HINTING_FULL: OH_Drawing_FontHinting = OH_Drawing_FontHinting(3);
}
#[repr(transparent)]
/// Enumerates font hinting pattern.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontHinting(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontEdging {
    /// no transparent pixels on glyph edges
    pub const FONT_EDGING_ALIAS: OH_Drawing_FontEdging = OH_Drawing_FontEdging(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontEdging {
    /// may have transparent pixels on glyph edges
    pub const FONT_EDGING_ANTI_ALIAS: OH_Drawing_FontEdging = OH_Drawing_FontEdging(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Drawing_FontEdging {
    /// glyph positioned in pixel using transparency
    pub const FONT_EDGING_SUBPIXEL_ANTI_ALIAS: OH_Drawing_FontEdging = OH_Drawing_FontEdging(2);
}
#[repr(transparent)]
/// Enumerates font edging effect.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_Drawing_FontEdging(pub ::core::ffi::c_uint);
/// Defines a run, supplies storage for the metrics of an <b>OH_Drawing_Font</b>.
///
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_Drawing_Font_Metrics {
    /// Indicating which metrics are valid
    pub flags: u32,
    /// storage for top in font metrics
    pub top: f32,
    /// storage for ascent in font metrics
    pub ascent: f32,
    /// storage for descent in font metrics
    pub descent: f32,
    /// storage for bottom in font metrics
    pub bottom: f32,
    /// storage for leading in font metrics
    pub leading: f32,
    /// Average character width, zero if unknown
    pub avgCharWidth: f32,
    /// Maximum character width, zero if unknown
    pub maxCharWidth: f32,
    /// Greatest extent to left of origin of any glyph bounding box, typically negative; deprecated with variable fonts
    pub xMin: f32,
    /// Greatest extent to right of origin of any glyph bounding box, typically positive; deprecated with variable fonts
    pub xMax: f32,
    /// Height of lower-case letter, zero if unknown, typically negative
    pub xHeight: f32,
    /// Height of an upper-case letter, zero if unknown, typically negative
    pub capHeight: f32,
    /// Underline thickness
    pub underlineThickness: f32,
    /// Distance from baseline to top of stroke, typically positive
    pub underlinePosition: f32,
    /// Strikeout thickness
    pub strikeoutThickness: f32,
    /// Distance from baseline to bottom of stroke, typically negative
    pub strikeoutPosition: f32,
}
extern "C" {
    /// Creates an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>OH_Drawing_Font</b> object created.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_FontCreate() -> *mut OH_Drawing_Font;
    /// Sets whether the font baselines and pixels alignment when the transformation matrix is ​​axis aligned.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `baselineSnap` - Indicates whether the font baselines and pixels alignment.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontSetBaselineSnap(arg1: *mut OH_Drawing_Font, baselineSnap: bool);
    /// Gets whether the font baselines and pixels alignment when the transformation matrix is ​​axis aligned.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the font baselines and pixels alignment; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontIsBaselineSnap(arg1: *const OH_Drawing_Font) -> bool;
    /// Sets whether the font uses sub-pixel rendering.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `isSubpixel` - Indicates whether the font uses sub-pixel rendering.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontSetSubpixel(arg1: *mut OH_Drawing_Font, isSubpixel: bool);
    /// Gets whether the font uses sub-pixel rendering.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the font uses sub-pixel rendering; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontIsSubpixel(arg1: *const OH_Drawing_Font) -> bool;
    /// Sets whether the font outline is automatically adjusted.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `isForceAutoHinting` - Indicates whether the font outline is automatically adjusted.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontSetForceAutoHinting(arg1: *mut OH_Drawing_Font, isForceAutoHinting: bool);
    /// Gets whether the font outline is automatically adjusted.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the font outline is automatically adjusted; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontIsForceAutoHinting(arg1: *const OH_Drawing_Font) -> bool;
    /// Sets an <b>OH_Drawing_Typeface</b> object for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `OH_Drawing_Typeface` - Indicates the pointer to an <b>OH_Drawing_Typeface</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_FontSetTypeface(arg1: *mut OH_Drawing_Font, arg2: *mut OH_Drawing_Typeface);
    /// Gets an <b>OH_Drawing_Typeface</b> object from the <b>OH_Drawing_Typeface</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * OH_Drawing_Typeface Indicates the pointer to an <b>OH_Drawing_Typeface</b> object.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetTypeface(arg1: *mut OH_Drawing_Font) -> *mut OH_Drawing_Typeface;
    /// Sets text size for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `textSize` - Indicates the text size.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_FontSetTextSize(arg1: *mut OH_Drawing_Font, textSize: f32);
    /// Gets text size for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the size of text.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetTextSize(arg1: *const OH_Drawing_Font) -> f32;
    /// Calculate number of glyphs represented by text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `text` - Indicates the character storage encoded with text encoding.
    ///
    /// * `byteLength` - Indicates the text length in bytes.
    ///
    /// * `encoding` - Indicates the text encoding.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontCountText(
        arg1: *mut OH_Drawing_Font,
        text: *const ::core::ffi::c_void,
        byteLength: usize,
        encoding: OH_Drawing_TextEncoding,
    ) -> ::core::ffi::c_int;
    /// Converts text into glyph indices.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `text` - Indicates the character storage encoded with text encoding.
    ///
    /// * `byteLength` - Indicates the text length in bytes.
    ///
    /// * `encoding` - Indicates the text encoding.
    ///
    /// * `glyphs` - Indicates the storage for glyph indices.
    ///
    /// * `maxGlyphCount` - Indicates the storage capacity.
    ///
    /// # Returns
    ///
    /// * Returns the number of glyph indices represented by text.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontTextToGlyphs(
        arg1: *const OH_Drawing_Font,
        text: *const ::core::ffi::c_void,
        byteLength: u32,
        encoding: OH_Drawing_TextEncoding,
        glyphs: *mut u16,
        maxGlyphCount: ::core::ffi::c_int,
    ) -> u32;
    /// Retrieves the advance for each glyph in glyphs.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `glyphs` - Indicates the array of glyph indices to be measured.
    ///
    /// * `count` - Indicates the number of glyphs.
    ///
    /// * `widths` - Indicates the text advances for each glyph returned to the caller.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetWidths(
        arg1: *const OH_Drawing_Font,
        glyphs: *const u16,
        count: ::core::ffi::c_int,
        widths: *mut f32,
    );
    /// Measures the width of a single character.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `str` - Indicates the single character encoded in UTF-8.
    ///
    /// * `textWidth` - Indicates the width of the single character.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if any of font, str
    /// and textWidth is nullptr or strlen(str) is 0.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontMeasureSingleCharacter(
        font: *const OH_Drawing_Font,
        str_: *const ::core::ffi::c_char,
        textWidth: *mut f32,
    ) -> OH_Drawing_ErrorCode;
    /// Measures the width of text.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `text` - Indicates the character storage encoded with text encoding.
    ///
    /// * `byteLength` - Indicates the text length in bytes.
    ///
    /// * `encoding` - Indicates the text encoding.
    ///
    /// * `bounds` - Gets the bounding box relative to (0, 0) if not nullptr.
    ///
    /// * `textWidth` - Indicates the width of text.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`OH_DRAWING_SUCCESS`] if the operation is successful.
    /// Returns [`OH_DRAWING_ERROR_INVALID_PARAMETER`] if any of font, text
    /// and textWidth is nullptr or byteLength is 0.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontMeasureText(
        font: *const OH_Drawing_Font,
        text: *const ::core::ffi::c_void,
        byteLength: usize,
        encoding: OH_Drawing_TextEncoding,
        bounds: *mut OH_Drawing_Rect,
        textWidth: *mut f32,
    ) -> OH_Drawing_ErrorCode;
    /// Enables or disables linearly scalable font for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `isLinearText` - Indicates whether to enable linearly scalable font.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_FontSetLinearText(arg1: *mut OH_Drawing_Font, isLinearText: bool);
    /// Gets whether the font is linearly scalable.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the font is linearly scalable; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontIsLinearText(arg1: *const OH_Drawing_Font) -> bool;
    /// Sets text skew on x-axis for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `skewX` - Indicates the additional shear on x-axis relative to y-axis.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_FontSetTextSkewX(arg1: *mut OH_Drawing_Font, skewX: f32);
    /// Gets text skew on x-axis for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns additional skew on x-axis relative to y-axis.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetTextSkewX(arg1: *const OH_Drawing_Font) -> f32;
    /// Enables or disables to increase stroke width to approximate bold fonts for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `isFakeBoldText` - Indicates whether to enable to increase stroke width.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_FontSetFakeBoldText(arg1: *mut OH_Drawing_Font, isFakeBoldText: bool);
    /// Gets whether to increase the stroke width to approximate bold fonts.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> to increase the stroke width to approximate bold fonts; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontIsFakeBoldText(arg1: *const OH_Drawing_Font) -> bool;
    /// Sets text scale on x-axis for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `scaleX` - Indicates the text horizontal scale.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontSetScaleX(arg1: *mut OH_Drawing_Font, scaleX: f32);
    /// Gets text scale on x-axis from an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns text horizontal scale on x-axis.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetScaleX(arg1: *const OH_Drawing_Font) -> f32;
    /// Sets hinting pattern for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `OH_Drawing_FontHinting` - Indicates the font hinting pattern.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontSetHinting(arg1: *mut OH_Drawing_Font, arg2: OH_Drawing_FontHinting);
    /// Gets hinting pattern from an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the font hinting pattern.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetHinting(arg1: *const OH_Drawing_Font) -> OH_Drawing_FontHinting;
    /// Sets whether to use bitmaps instead of outlines in the <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `isEmbeddedBitmaps` - Indicates whether to use bitmaps instead of outlines.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontSetEmbeddedBitmaps(arg1: *mut OH_Drawing_Font, isEmbeddedBitmaps: bool);
    /// Gets whether to use bitmaps instead of outlines in the <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if using bitmaps instead of outlines; returns <b>false</b> otherwise.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontIsEmbeddedBitmaps(arg1: *const OH_Drawing_Font) -> bool;
    /// Sets the font edging effect for an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `OH_Drawing_FontEdging` - Indicates the font edging effect.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontSetEdging(arg1: *mut OH_Drawing_Font, arg2: OH_Drawing_FontEdging);
    /// Gets the font edging effect from an <b>OH_Drawing_Font</b> object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the font edging effect.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetEdging(arg1: *const OH_Drawing_Font) -> OH_Drawing_FontEdging;
    /// Destroys an <b>OH_Drawing_Font</b> object and reclaims the memory occupied by the object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_Drawing_FontDestroy(arg1: *mut OH_Drawing_Font);
    /// Obtains the metrics of a font.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeDrawing
    /// # Arguments
    ///
    /// * `OH_Drawing_Font` - Indicates the pointer to an <b>OH_Drawing_Font</b> object.
    ///
    /// * `OH_Drawing_Font_Metrics` - Indicates the pointer to an <b>OH_Drawing_Font_Metrics</b> object.
    ///
    /// # Returns
    ///
    /// * Returns a float variable that recommended spacing between lines.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Drawing_FontGetMetrics(
        arg1: *mut OH_Drawing_Font,
        arg2: *mut OH_Drawing_Font_Metrics,
    ) -> f32;
}
