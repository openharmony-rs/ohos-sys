// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::axis_type::{InputEvent_AxisAction, InputEvent_AxisEventType, InputEvent_AxisType};
#[cfg(feature = "api-14")]
use ohos_sys_opaque_types::Input_Hotkey;
use ohos_sys_opaque_types::{
    Input_AxisEvent, Input_KeyEvent, Input_KeyState, Input_MouseEvent, Input_TouchEvent,
};

#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl Input_KeyStateAction {
    /// Default
    pub const KEY_DEFAULT: Input_KeyStateAction = Input_KeyStateAction(-1);
    /// Pressing of a key
    pub const KEY_PRESSED: Input_KeyStateAction = Input_KeyStateAction(0);
    /// Release of a key
    pub const KEY_RELEASED: Input_KeyStateAction = Input_KeyStateAction(1);
    /// Key switch enabled
    pub const KEY_SWITCH_ON: Input_KeyStateAction = Input_KeyStateAction(2);
    /// Key switch disabled
    pub const KEY_SWITCH_OFF: Input_KeyStateAction = Input_KeyStateAction(3);
}
#[repr(transparent)]
/// Enumerated values of key event action.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Input_KeyStateAction(pub ::core::ffi::c_int);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl Input_KeyEventAction {
    /// Cancellation of a key action.
    pub const KEY_ACTION_CANCEL: Input_KeyEventAction = Input_KeyEventAction(0);
    /// Pressing of a key.
    pub const KEY_ACTION_DOWN: Input_KeyEventAction = Input_KeyEventAction(1);
    /// Release of a key.
    pub const KEY_ACTION_UP: Input_KeyEventAction = Input_KeyEventAction(2);
}
#[repr(transparent)]
/// Enumerates key event types.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Input_KeyEventAction(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl Input_MouseEventAction {
    /// Cancel.
    pub const MOUSE_ACTION_CANCEL: Input_MouseEventAction = Input_MouseEventAction(0);
    /// Moving of the mouse pointer.
    pub const MOUSE_ACTION_MOVE: Input_MouseEventAction = Input_MouseEventAction(1);
    /// Pressing down of the mouse.
    pub const MOUSE_ACTION_BUTTON_DOWN: Input_MouseEventAction = Input_MouseEventAction(2);
    /// Lifting of the mouse button.
    pub const MOUSE_ACTION_BUTTON_UP: Input_MouseEventAction = Input_MouseEventAction(3);
    /// Beginning of the mouse axis event
    pub const MOUSE_ACTION_AXIS_BEGIN: Input_MouseEventAction = Input_MouseEventAction(4);
    /// Updating of the mouse axis event
    pub const MOUSE_ACTION_AXIS_UPDATE: Input_MouseEventAction = Input_MouseEventAction(5);
    /// End of the mouse axis event
    pub const MOUSE_ACTION_AXIS_END: Input_MouseEventAction = Input_MouseEventAction(6);
}
#[repr(transparent)]
/// Enumerated values of mouse event action.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Input_MouseEventAction(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputEvent_MouseAxis {
    /// Vertical scroll axis
    pub const MOUSE_AXIS_SCROLL_VERTICAL: InputEvent_MouseAxis = InputEvent_MouseAxis(0);
    /// Horizontal scroll axis
    pub const MOUSE_AXIS_SCROLL_HORIZONTAL: InputEvent_MouseAxis = InputEvent_MouseAxis(1);
}
#[repr(transparent)]
/// Mouse axis types.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct InputEvent_MouseAxis(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl Input_MouseEventButton {
    /// Invalid button
    pub const MOUSE_BUTTON_NONE: Input_MouseEventButton = Input_MouseEventButton(-1);
    /// Left button on the mouse.
    pub const MOUSE_BUTTON_LEFT: Input_MouseEventButton = Input_MouseEventButton(0);
    /// Middle button on the mouse.
    pub const MOUSE_BUTTON_MIDDLE: Input_MouseEventButton = Input_MouseEventButton(1);
    /// Right button on the mouse.
    pub const MOUSE_BUTTON_RIGHT: Input_MouseEventButton = Input_MouseEventButton(2);
    /// Forward button on the mouse.
    pub const MOUSE_BUTTON_FORWARD: Input_MouseEventButton = Input_MouseEventButton(3);
    /// Back button on the mouse.
    pub const MOUSE_BUTTON_BACK: Input_MouseEventButton = Input_MouseEventButton(4);
}
#[repr(transparent)]
/// Enumerated values of mouse event button.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Input_MouseEventButton(pub ::core::ffi::c_int);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl Input_TouchEventAction {
    /// Touch cancelled.
    pub const TOUCH_ACTION_CANCEL: Input_TouchEventAction = Input_TouchEventAction(0);
    /// Touch pressed.
    pub const TOUCH_ACTION_DOWN: Input_TouchEventAction = Input_TouchEventAction(1);
    /// Touch moved.
    pub const TOUCH_ACTION_MOVE: Input_TouchEventAction = Input_TouchEventAction(2);
    /// Touch lifted.
    pub const TOUCH_ACTION_UP: Input_TouchEventAction = Input_TouchEventAction(3);
}
#[repr(transparent)]
/// Enumerated values of touch event action.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Input_TouchEventAction(pub ::core::ffi::c_uint);
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl Input_KeyboardType {
    /// Keyboard without keys
    pub const KEYBOARD_TYPE_NONE: Input_KeyboardType = Input_KeyboardType(0);
    /// Keyboard with unknown keys
    pub const KEYBOARD_TYPE_UNKNOWN: Input_KeyboardType = Input_KeyboardType(1);
    /// Full keyboard
    pub const KEYBOARD_TYPE_ALPHABETIC: Input_KeyboardType = Input_KeyboardType(2);
    /// Digital keyboard
    pub const KEYBOARD_TYPE_DIGITAL: Input_KeyboardType = Input_KeyboardType(3);
    /// Stylus
    pub const KEYBOARD_TYPE_STYLUS: Input_KeyboardType = Input_KeyboardType(4);
    /// Remote control
    pub const KEYBOARD_TYPE_REMOTE_CONTROL: Input_KeyboardType = Input_KeyboardType(5);
}
#[repr(transparent)]
/// Enumerates keyboard types.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Input_KeyboardType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputEvent_SourceType {
    /// Indicates that the input source generates events similar to mouse cursor movement,
    /// button press and release, and wheel scrolling.
    ///
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const SOURCE_TYPE_MOUSE: InputEvent_SourceType = InputEvent_SourceType(1);
    /// Indicates that the input source generates a touchscreen multi-touch event.
    ///
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const SOURCE_TYPE_TOUCHSCREEN: InputEvent_SourceType = InputEvent_SourceType(2);
    /// Indicates that the input source generates a touchpad multi-touch event.
    ///
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const SOURCE_TYPE_TOUCHPAD: InputEvent_SourceType = InputEvent_SourceType(3);
}
#[repr(transparent)]
/// Enumerates event source types.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct InputEvent_SourceType(pub ::core::ffi::c_uint);
pub type Input_Result = Result<(), InputErrorCode>;
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputErrorCode {
    /// Permission verification failed
    pub const PERMISSION_DENIED: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(201).unwrap() });
    /// Non-system application
    pub const NOT_SYSTEM_APPLICATION: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(202).unwrap() });
    /// Parameter check failed
    pub const PARAMETER_ERROR: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(401).unwrap() });
    /// Device not support
    pub const DEVICE_NOT_SUPPORTED: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(801).unwrap() });
    /// Service error
    pub const SERVICE_EXCEPTION: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(3800001).unwrap() });
    /// Interceptor repeatedly created for an application
    pub const REPEAT_INTERCEPTOR: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(4200001).unwrap() });
    /// Already occupied by the system
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const OCCUPIED_BY_SYSTEM: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(4200002).unwrap() });
    /// Already occupied by the other
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const OCCUPIED_BY_OTHER: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(4200003).unwrap() });
    /// No keyboard device connected
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const KEYBOARD_DEVICE_NOT_EXIST: InputErrorCode =
        InputErrorCode(const { core::num::NonZero::new(3900002).unwrap() });
}
#[repr(transparent)]
/// Enumerates error codes.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct InputErrorCode(pub core::num::NonZero<::core::ffi::c_uint>);
/// Callback used to return shortcut key events.
///
/// Available since API-level: 14
#[cfg(feature = "api-14")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
pub type Input_HotkeyCallback =
    ::core::option::Option<unsafe extern "C" fn(hotkey: *mut Input_Hotkey)>;
/// Represents information about the input device.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct Input_DeviceInfo {
    _unused: [u8; 0],
}
/// Defines a lifecycle callback for keyEvent. If the callback is triggered, keyEvent will be destroyed.
///
/// # Arguments
///
/// * `keyEvent` - Key event object.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type Input_KeyEventCallback =
    ::core::option::Option<unsafe extern "C" fn(keyEvent: *const Input_KeyEvent)>;
/// Defines a lifecycle callback for mouseEvent. If the callback is triggered, mouseEvent will be destroyed.
///
/// # Arguments
///
/// * `mouseEvent` - Mouse event object.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type Input_MouseEventCallback =
    ::core::option::Option<unsafe extern "C" fn(mouseEvent: *const Input_MouseEvent)>;
/// Defines a lifecycle callback for touchEvent. If the callback is triggered, touchEvent will be destroyed.
///
/// # Arguments
///
/// * `touchEvent` - Touch event object.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type Input_TouchEventCallback =
    ::core::option::Option<unsafe extern "C" fn(touchEvent: *const Input_TouchEvent)>;
/// Defines a lifecycle callback for axisEvent. If the callback is triggered, axisEvent will be destroyed.
///
/// # Arguments
///
/// * `axisEvent` - Axis event object.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type Input_AxisEventCallback =
    ::core::option::Option<unsafe extern "C" fn(axisEvent: *const Input_AxisEvent)>;
/// Defines the callback for device addition events.
/// # Arguments
///
/// * `deviceId` - Device ID.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
pub type Input_DeviceAddedCallback = ::core::option::Option<unsafe extern "C" fn(deviceId: i32)>;
/// Defines the callback for device removal events.
/// # Arguments
///
/// * `deviceId` - Device ID.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
pub type Input_DeviceRemovedCallback = ::core::option::Option<unsafe extern "C" fn(deviceId: i32)>;
/// Defines the structure for the interceptor of event callbacks,
/// including mouseCallback, touchCallback, and axisCallback.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_InterceptorEventCallback {
    /// Defines a lifecycle callback for **mouseEvent**.
    pub mouseCallback: Input_MouseEventCallback,
    /// Defines a lifecycle callback for **touchEvent**.
    pub touchCallback: Input_TouchEventCallback,
    /// Defines a lifecycle callback for **axisEvent**.
    pub axisCallback: Input_AxisEventCallback,
}
/// Defines a listener for device insertion and removal events.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Input_DeviceListener {
    /// Callback for device addition events
    pub deviceAddedCallback: Input_DeviceAddedCallback,
    /// Callback for device removal events
    pub deviceRemovedCallback: Input_DeviceRemovedCallback,
}
/// Defines event interceptor options.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct Input_InterceptorOptions {
    _unused: [u8; 0],
}
extern "C" {
    /// Queries the key state.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key state.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetKeyState function result code.
    /// [`INPUT_SUCCESS`] get KeyState success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] keyCode is invalid.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetKeyState(keyState: *mut Input_KeyState) -> Input_Result;
    /// Creates a key status enumeration object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns an [`Input_KeyState`] pointer object if the operation is successful.
    /// Otherwise, a null pointer is returned. The possible cause is memory allocation failure.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_CreateKeyState() -> *mut Input_KeyState;
    /// Destroys a key status enumeration object.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key status enumeration object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_DestroyKeyState(keyState: *mut *mut Input_KeyState);
    /// Sets the key value of a key status enumeration object.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key status enumeration object.
    ///
    /// * `keyCode` - Key value of the key status enumeration object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetKeyCode(keyState: *mut Input_KeyState, keyCode: i32);
    /// Obtains the key value of a key status enumeration object.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key status enumeration object.
    ///
    /// # Returns
    ///
    /// * Key value of the key status enumeration object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetKeyCode(keyState: *const Input_KeyState) -> i32;
    /// Sets whether the key specific to a key status enumeration object is pressed.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key status enumeration object.
    ///
    /// * `keyAction` - Whether the key is pressed.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetKeyPressed(keyState: *mut Input_KeyState, keyAction: i32);
    /// Checks whether the key specific to a key status enumeration object is pressed.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key status enumeration object.
    ///
    /// # Returns
    ///
    /// * Key pressing status of the key status enumeration object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetKeyPressed(keyState: *const Input_KeyState) -> i32;
    /// Sets the key switch of the key status enumeration object.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key status enumeration object.
    ///
    /// * `keySwitch` - Key switch of the key status enumeration object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetKeySwitch(keyState: *mut Input_KeyState, keySwitch: i32);
    /// Obtains the key switch of the key status enumeration object.
    ///
    /// # Arguments
    ///
    /// * `keyState` - Key status enumeration object.
    ///
    /// # Returns
    ///
    /// * Key switch of the key status enumeration object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetKeySwitch(keyState: *const Input_KeyState) -> i32;
    /// Inject system keys.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - - the key event to be injected.
    ///
    /// # Returns
    ///
    /// * OH_Input_InjectKeyEvent function result code.
    /// [`INPUT_SUCCESS`] inject keyEvent success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] keyCode is less 0, can not process.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_InjectKeyEvent(keyEvent: *const Input_KeyEvent) -> i32;
    /// Creates a key event object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns an [`Input_KeyEvent`] pointer object if the operation is successful.
    /// Otherwise, a null pointer is returned. The possible cause is memory allocation failure.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_CreateKeyEvent() -> *mut Input_KeyEvent;
    /// Destroys a key event object.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_DestroyKeyEvent(keyEvent: *mut *mut Input_KeyEvent);
    /// Sets the key event type.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// * `action` - Key event type.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetKeyEventAction(keyEvent: *mut Input_KeyEvent, action: i32);
    /// Obtains the key event type.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// # Returns
    ///
    /// * Key event type.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetKeyEventAction(keyEvent: *const Input_KeyEvent) -> i32;
    /// Sets the key value for a key event.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// * `keyCode` - keyCode Key code.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetKeyEventKeyCode(keyEvent: *mut Input_KeyEvent, keyCode: i32);
    /// Obtains the key value of a key event.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// # Returns
    ///
    /// * Key code.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetKeyEventKeyCode(keyEvent: *const Input_KeyEvent) -> i32;
    /// Sets the time when a key event occurs.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// * `actionTime` - Time when the key event occurs.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetKeyEventActionTime(keyEvent: *mut Input_KeyEvent, actionTime: i64);
    /// Obtains the time when a key event occurs.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// # Returns
    ///
    /// * Returns the time when the key event occurs.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetKeyEventActionTime(keyEvent: *const Input_KeyEvent) -> i64;
    /// Sets the windowId for a key event.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// * `windowId` - The windowId for a key event.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetKeyEventWindowId(keyEvent: *mut Input_KeyEvent, windowId: i32);
    /// Obtains the windowId of a key event.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// # Returns
    ///
    /// * windowId.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetKeyEventWindowId(keyEvent: *const Input_KeyEvent) -> i32;
    /// Sets the displayId for a key event.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// * `displayId` - The displayId for a key event.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetKeyEventDisplayId(keyEvent: *mut Input_KeyEvent, displayId: i32);
    /// Obtains the displayId of a key event.
    ///
    /// # Arguments
    ///
    /// * `keyEvent` - Key event object.
    ///
    /// # Returns
    ///
    /// * displayId.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetKeyEventDisplayId(keyEvent: *const Input_KeyEvent) -> i32;
    /// Inject mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - - the mouse event to be injected.
    ///
    /// # Returns
    ///
    /// * OH_Input_InjectMouseEvent function result code.
    /// [`INPUT_SUCCESS`] inject mouseEvent success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] Parameter check failed.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_InjectMouseEvent(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Creates a mouse event object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns an [`Input_MouseEvent`] pointer object if the operation is successful.
    /// Otherwise, a null pointer is returned. The possible cause is memory allocation failure.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_CreateMouseEvent() -> *mut Input_MouseEvent;
    /// Destroys a mouse event object.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_DestroyMouseEvent(mouseEvent: *mut *mut Input_MouseEvent);
    /// Sets the action for a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `action` - Mouse action.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetMouseEventAction(mouseEvent: *mut Input_MouseEvent, action: i32);
    /// Obtains the action of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * Mouse action.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetMouseEventAction(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Sets the X coordinate for a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `displayX` - X coordinate on the display.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetMouseEventDisplayX(mouseEvent: *mut Input_MouseEvent, displayX: i32);
    /// Obtains the X coordinate of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * X coordinate on the display.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetMouseEventDisplayX(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Sets the Y coordinate for a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `displayY` - Y coordinate on the display.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetMouseEventDisplayY(mouseEvent: *mut Input_MouseEvent, displayY: i32);
    /// Obtains the Y coordinate of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * Y coordinate on the display.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetMouseEventDisplayY(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Sets the button for a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `button` - Mouse button.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetMouseEventButton(mouseEvent: *mut Input_MouseEvent, button: i32);
    /// Obtains the button of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * Mouse button.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetMouseEventButton(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Sets the axis type for mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `axisType` - Axis type, for example, X axis or Y axis.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetMouseEventAxisType(mouseEvent: *mut Input_MouseEvent, axisType: i32);
    /// Obtains the axis type of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * Axis type.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetMouseEventAxisType(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Sets the axis value for a mouse axis event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `axisValue` - Axis value. A positive value means scrolling forward,
    /// and a negative number means scrolling backward.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetMouseEventAxisValue(mouseEvent: *mut Input_MouseEvent, axisValue: f32);
    /// Obtains the axis value of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * Axis value.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetMouseEventAxisValue(mouseEvent: *const Input_MouseEvent) -> f32;
    /// Sets the time when a mouse event occurs.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `actionTime` - Time when the mouse event occurs.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetMouseEventActionTime(mouseEvent: *mut Input_MouseEvent, actionTime: i64);
    /// Obtains the time when a mouse event occurs.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * Returns the time when the mouse event occurs.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetMouseEventActionTime(mouseEvent: *const Input_MouseEvent) -> i64;
    /// Sets the windowId for a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `windowId` - The windowId for a mouse event.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetMouseEventWindowId(mouseEvent: *mut Input_MouseEvent, windowId: i32);
    /// Obtains the windowId of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * windowId.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetMouseEventWindowId(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Sets the displayId for a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// * `displayId` - The displayId for a mouse event.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetMouseEventDisplayId(mouseEvent: *mut Input_MouseEvent, displayId: i32);
    /// Obtains the displayId of a mouse event.
    ///
    /// # Arguments
    ///
    /// * `mouseEvent` - Mouse event object.
    ///
    /// # Returns
    ///
    /// * displayId.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetMouseEventDisplayId(mouseEvent: *const Input_MouseEvent) -> i32;
    /// Inject touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - - the touch event to be injected.
    ///
    /// # Returns
    ///
    /// * OH_Input_InjectTouchEvent function result code.
    /// [`INPUT_SUCCESS`] inject touchEvent success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] Parameter check failed.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_InjectTouchEvent(touchEvent: *const Input_TouchEvent) -> i32;
    /// Creates a touch event object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns an [`Input_TouchEvent`] pointer object if the operation is successful.
    /// Otherwise, a null pointer is returned. The possible cause is memory allocation failure.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_CreateTouchEvent() -> *mut Input_TouchEvent;
    /// Destroys a touch event object.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_DestroyTouchEvent(touchEvent: *mut *mut Input_TouchEvent);
    /// Sets the action for a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// * `action` - Touch action.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetTouchEventAction(touchEvent: *mut Input_TouchEvent, action: i32);
    /// Obtains the action of a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// # Returns
    ///
    /// * Touch action.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetTouchEventAction(touchEvent: *const Input_TouchEvent) -> i32;
    /// Sets the finger ID for the touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// * `id` - Finger ID.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetTouchEventFingerId(touchEvent: *mut Input_TouchEvent, id: i32);
    /// Obtains the finger ID of a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// # Returns
    ///
    /// * Finger ID.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetTouchEventFingerId(touchEvent: *const Input_TouchEvent) -> i32;
    /// Sets the X coordinate for a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// * `displayX` - X coordinate.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetTouchEventDisplayX(touchEvent: *mut Input_TouchEvent, displayX: i32);
    /// Obtains the X coordinate of a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// # Returns
    ///
    /// * X coordinate.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetTouchEventDisplayX(touchEvent: *const Input_TouchEvent) -> i32;
    /// Sets the Y coordinate for a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// * `displayY` - Y coordinate.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetTouchEventDisplayY(touchEvent: *mut Input_TouchEvent, displayY: i32);
    /// Obtains the Y coordinate of a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// # Returns
    ///
    /// * Y coordinate.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetTouchEventDisplayY(touchEvent: *const Input_TouchEvent) -> i32;
    /// Sets the time when a touch event occurs.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// * `actionTime` - Time when the touch event occurs.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetTouchEventActionTime(touchEvent: *mut Input_TouchEvent, actionTime: i64);
    /// Obtains the time when a touch event occurs.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - touch event object.
    ///
    /// # Returns
    ///
    /// * Returns the time when the touch event occurs.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetTouchEventActionTime(touchEvent: *const Input_TouchEvent) -> i64;
    /// Sets the windowId for a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// * `windowId` - The windowId for a touch event.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetTouchEventWindowId(touchEvent: *mut Input_TouchEvent, windowId: i32);
    /// Obtains the windowId of a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// # Returns
    ///
    /// * windowId.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetTouchEventWindowId(touchEvent: *const Input_TouchEvent) -> i32;
    /// Sets the displayId for a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// * `displayId` - The displayId for a touch event.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetTouchEventDisplayId(touchEvent: *mut Input_TouchEvent, displayId: i32);
    /// Obtains the displayId of a touch event.
    ///
    /// # Arguments
    ///
    /// * `touchEvent` - Touch event object.
    ///
    /// # Returns
    ///
    /// * displayId.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetTouchEventDisplayId(touchEvent: *const Input_TouchEvent) -> i32;
    /// Cancels event injection and revokes authorization.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_CancelInjection();
    /// Creates an axis event object.
    ///
    ///
    /// # Returns
    ///
    /// * If the operation is successful, a [`Input_AxisEvent`] object is returned.
    /// If the operation fails, null is returned.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_CreateAxisEvent() -> *mut Input_AxisEvent;
    /// Destroys an axis event object.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Pointer to the axis event object.
    ///
    /// # Returns
    ///
    /// * OH_Input_DestroyAxisEvent function result code.
    /// [`INPUT_SUCCESS`] Destroys axisEvent success.
    ///
    /// [`INPUT_PARAMETER_ERROR`]The axisEvent is NULL or the *axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_DestroyAxisEvent(axisEvent: *mut *mut Input_AxisEvent) -> Input_Result;
    /// Sets the axis event action.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `action` - Axis event action. The values are defined in [`InputEvent_AxisAction`].
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventAction function result code.
    /// [`INPUT_SUCCESS`] Sets the axis event action success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetAxisEventAction(
        axisEvent: *mut Input_AxisEvent,
        action: InputEvent_AxisAction,
    ) -> Input_Result;
    /// Obtains the axis event action.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `action` - Axis event action. The values are defined in [`InputEvent_AxisAction`].
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventAction function result code.
    /// [`INPUT_SUCCESS`] Obtains the axis event action success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the action is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetAxisEventAction(
        axisEvent: *const Input_AxisEvent,
        action: *mut InputEvent_AxisAction,
    ) -> Input_Result;
    /// Sets the X coordinate of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `displayX` - X coordinate of the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventDisplayX function result code.
    /// [`INPUT_SUCCESS`] Sets the X coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetAxisEventDisplayX(
        axisEvent: *mut Input_AxisEvent,
        displayX: f32,
    ) -> Input_Result;
    /// Obtains the X coordinate of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `displayX` - X coordinate of the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventDisplayX function result code.
    /// [`INPUT_SUCCESS`] Obtains the X coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the displayX is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetAxisEventDisplayX(
        axisEvent: *const Input_AxisEvent,
        displayX: *mut f32,
    ) -> Input_Result;
    /// Sets the Y coordinate of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `displayY` - Y coordinate of the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventDisplayY function result code.
    /// [`INPUT_SUCCESS`] Sets the Y coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetAxisEventDisplayY(
        axisEvent: *mut Input_AxisEvent,
        displayY: f32,
    ) -> Input_Result;
    /// Obtains the Y coordinate of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `displayY` - Y coordinate of the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventDisplayY function result code.
    /// [`INPUT_SUCCESS`] Obtains the Y coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the displayY is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetAxisEventDisplayY(
        axisEvent: *const Input_AxisEvent,
        displayY: *mut f32,
    ) -> Input_Result;
    /// Sets the axis value of the axis type specified by the axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `axisType` - Axis type. The values are defined in [`InputEvent_AxisType`].
    ///
    /// * `axisValue` - Axis value.
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventAxisValue function result code.
    /// [`INPUT_SUCCESS`] Sets the axis value of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetAxisEventAxisValue(
        axisEvent: *mut Input_AxisEvent,
        axisType: InputEvent_AxisType,
        axisValue: f64,
    ) -> Input_Result;
    /// Obtains the axis value for the specified axis type of the axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `axisType` - Axis type. The values are defined in [`InputEvent_AxisType`].
    ///
    /// * `axisValue` - Axis value.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventAxisValue function result code.
    /// [`INPUT_SUCCESS`] Obtains the axis value of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the axisValue is NULL,
    /// or the axisType not found in the axisEvent.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetAxisEventAxisValue(
        axisEvent: *const Input_AxisEvent,
        axisType: InputEvent_AxisType,
        axisValue: *mut f64,
    ) -> Input_Result;
    /// Sets the time when an axis event occurs.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `actionTime` - Time when an axis event occurs.
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventActionTime function result code.
    /// [`INPUT_SUCCESS`] Sets the time when an axis event occurs success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetAxisEventActionTime(
        axisEvent: *mut Input_AxisEvent,
        actionTime: i64,
    ) -> Input_Result;
    /// Obtains the time when an axis event occurs.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `actionTime` - Time when an axis event occurs.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventActionTime function result code.
    /// [`INPUT_SUCCESS`] Obtains the time when an axis event occurs success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the actionTime is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetAxisEventActionTime(
        axisEvent: *const Input_AxisEvent,
        actionTime: *mut i64,
    ) -> Input_Result;
    /// Sets the axis event type.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `axisEventType` - Axis event type. The values are defined in [`InputEvent_AxisEventType`].
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventType function result code.
    /// [`INPUT_SUCCESS`] Sets the axis event type success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetAxisEventType(
        axisEvent: *mut Input_AxisEvent,
        axisEventType: InputEvent_AxisEventType,
    ) -> Input_Result;
    /// Obtains the axis event type.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object.
    ///
    /// * `axisEventType` - Axis event type. The values are defined in [`InputEvent_AxisEventType`].
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventType function result code.
    /// [`INPUT_SUCCESS`] Obtains the axis event type success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the axisEventType is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetAxisEventType(
        axisEvent: *const Input_AxisEvent,
        axisEventType: *mut InputEvent_AxisEventType,
    ) -> Input_Result;
    /// Sets the axis event source type.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object.
    ///
    /// * `sourceType` - Axis event source type. The values are defined in [`InputEvent_SourceType`].
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventSourceType function result code.
    /// [`INPUT_SUCCESS`] Sets the axis event source type success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_SetAxisEventSourceType(
        axisEvent: *mut Input_AxisEvent,
        sourceType: InputEvent_SourceType,
    ) -> Input_Result;
    /// Obtains the axis event source type.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object.
    ///
    /// * `sourceType` - Axis event source type. The values are defined in [`InputEvent_SourceType`].
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventSourceType function result code.
    /// [`INPUT_SUCCESS`] Obtains the axis event source type success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the sourceType is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_GetAxisEventSourceType(
        axisEvent: *const Input_AxisEvent,
        sourceType: *mut InputEvent_SourceType,
    ) -> Input_Result;
    /// Sets the windowId of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `windowId` - The windowId for the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventDisplayY function result code.
    /// [`INPUT_SUCCESS`] Sets the Y coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetAxisEventWindowId(
        axisEvent: *mut Input_AxisEvent,
        windowId: i32,
    ) -> Input_Result;
    /// Obtains the windowId of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `windowId` - The windowId for the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventDisplayY function result code.
    /// [`INPUT_SUCCESS`] Obtains the Y coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the displayY is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetAxisEventWindowId(
        axisEvent: *const Input_AxisEvent,
        windowId: *mut i32,
    ) -> Input_Result;
    /// Sets the displayId of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `displayId` - The displayId for the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_SetAxisEventDisplayY function result code.
    /// [`INPUT_SUCCESS`] Sets the Y coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_SetAxisEventDisplayId(
        axisEvent: *mut Input_AxisEvent,
        displayId: i32,
    ) -> Input_Result;
    /// Obtains the displayId of an axis event.
    ///
    /// # Arguments
    ///
    /// * `axisEvent` - Axis event object. For details, see [`Input_AxisEvent`].
    ///
    /// * `displayId` - The displayId for the axis event.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAxisEventDisplayY function result code.
    /// [`INPUT_SUCCESS`] Obtains the Y coordinate of the axis event success.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The axisEvent is NULL or the displayY is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetAxisEventDisplayId(
        axisEvent: *const Input_AxisEvent,
        displayId: *mut i32,
    ) -> Input_Result;
    /// Adds a listener of key events.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback used to receive key events.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddKeyEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Adds a listener of key events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to add the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_AddKeyEventMonitor(callback: Input_KeyEventCallback) -> Input_Result;
    /// Adds a listener for mouse events, including mouse click and movement events,
    /// but not scroll wheel events. Scroll wheel events are axis events.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback used to receive mouse events.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddMouseEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Adds a listener of mouse events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to add the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_AddMouseEventMonitor(callback: Input_MouseEventCallback) -> Input_Result;
    /// Add a listener for touch events.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback used to receive touch events.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddTouchEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Adds a listener of touch events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to add the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_AddTouchEventMonitor(callback: Input_TouchEventCallback) -> Input_Result;
    /// Adds a listener for all types of axis events.
    /// The axis event types are defined in [`InputEvent_AxisEventType`].
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback used to receive axis events.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddAxisEventMonitorForAll function result code.
    /// [`INPUT_SUCCESS`] Adds a listener for all types of axis events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to add the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_AddAxisEventMonitorForAll(callback: Input_AxisEventCallback) -> Input_Result;
    /// Adds a listener for the specified type of axis events.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `axisEventType` - - Axis event type. The values are defined in [`InputEvent_AxisEventType`].
    ///
    /// * `callback` - - Callback used to receive the specified type of axis events.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddAxisEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Adds a listener for the specified types of axis events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to add the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_AddAxisEventMonitor(
        axisEventType: InputEvent_AxisEventType,
        callback: Input_AxisEventCallback,
    ) -> Input_Result;
    /// Removes a key event listener.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback for the key event listener.
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveKeyEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Removes a key event listener success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL or has not been added.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Fail to remove the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_RemoveKeyEventMonitor(callback: Input_KeyEventCallback) -> Input_Result;
    /// Removes a mouse event listener.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback for the mouse event listener.
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveMouseEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Removes a mouse event listener success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL or has not been added.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Fail to remove the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_RemoveMouseEventMonitor(callback: Input_MouseEventCallback) -> Input_Result;
    /// Removes a touch event listener.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback for the touch event listener.
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveTouchEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Removes a touch event listener success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL or has not been added.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Fail to remove the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_RemoveTouchEventMonitor(callback: Input_TouchEventCallback) -> Input_Result;
    /// Removes the listener for all types of axis events.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `callback` - - Callback for the listener used to listen for all types of axis events.
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveAxisEventMonitorForAll function result code.
    /// [`INPUT_SUCCESS`] Removes the listener for all types of axis events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL or has not been added.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Fail to remove the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_RemoveAxisEventMonitorForAll(callback: Input_AxisEventCallback)
        -> Input_Result;
    /// Removes the listener for the specified type of axis events.
    ///
    /// ohos.permission.INPUT_MONITORING
    /// # Arguments
    ///
    /// * `axisEventType` - - Axis event type. The axis event type is defined in [`InputEvent_AxisEventType`].
    ///
    /// * `callback` - - Callback for the listener used to listen for the specified type of axis events.
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveAxisEventMonitor function result code.
    /// [`INPUT_SUCCESS`] Removes the listener for the specified type of axis events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL or has not been added.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Fail to remove the monitor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_RemoveAxisEventMonitor(
        axisEventType: InputEvent_AxisEventType,
        callback: Input_AxisEventCallback,
    ) -> Input_Result;
    /// Adds a key event interceptor. If multiple interceptors are added, only the first one takes effect.
    ///
    /// ohos.permission.INTERCEPT_INPUT_EVENT
    /// # Arguments
    ///
    /// * `callback` - - Callback used to receive key events.
    ///
    /// * `option` - - Options for event interception. If **null** is passed, the default value is used.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddKeyEventInterceptor function result code.
    /// [`INPUT_SUCCESS`] Adds a key event interceptor success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL.
    ///
    /// [`INPUT_REPEAT_INTERCEPTOR`] Interceptor repeatedly created for an application.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to add the interceptor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_AddKeyEventInterceptor(
        callback: Input_KeyEventCallback,
        option: *mut Input_InterceptorOptions,
    ) -> Input_Result;
    /// Adds an interceptor for input events, including mouse, touch, and axis events.
    /// If multiple interceptors are added, only the first one takes effect.
    ///
    /// ohos.permission.INTERCEPT_INPUT_EVENT
    /// # Arguments
    ///
    /// * `callback` - - Pointer to the structure of the callback for the input event interceptor.
    /// For details, see [`Input_InterceptorEventCallback`].
    ///
    /// * `option` - - Options for event interception. If **null** is passed, the default value is used.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddInputEventInterceptor function result code.
    /// [`INPUT_SUCCESS`] Adds an interceptor for input events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The callback is NULL.
    ///
    /// [`INPUT_REPEAT_INTERCEPTOR`] Interceptor repeatedly created for an application.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to add the interceptor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_AddInputEventInterceptor(
        callback: *mut Input_InterceptorEventCallback,
        option: *mut Input_InterceptorOptions,
    ) -> Input_Result;
    /// Removes a key event interceptor.
    ///
    /// ohos.permission.INTERCEPT_INPUT_EVENT
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveKeyEventInterceptor function result code.
    /// [`INPUT_SUCCESS`]Removes a key event interceptor success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to remove the interceptor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_RemoveKeyEventInterceptor() -> Input_Result;
    /// Removes an interceptor for input events, including mouse, touch, and axis events.
    ///
    /// ohos.permission.INTERCEPT_INPUT_EVENT
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveInputEventInterceptor function result code.
    /// [`INPUT_SUCCESS`] Removes an interceptor for input events success.
    ///
    /// [`INPUT_PERMISSION_DENIED`] Permission verification failed.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to remove the interceptor because the service is exception.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Input_RemoveInputEventInterceptor() -> Input_Result;
    /// Obtains the interval since the last system input event.
    ///
    /// # Arguments
    ///
    /// * `timeInterval` - Interval, in microseconds.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetIntervalSinceLastInput status code, specifically.
    /// [`INPUT_SUCCESS`] if the Operation is successful.
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] Failed to get the interval because the service is exception.
    ///
    /// [`INPUT_PARAMETER_ERROR`] The timeInterval is NULL.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_GetIntervalSinceLastInput(timeInterval: *mut i64) -> Input_Result;
    /// Creates a hot key object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns an [`Input_Hotkey`] pointer object if the operation is successful. Otherwise, a null pointer is
    /// returned. The possible cause is memory allocation failure.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_CreateHotkey() -> *mut Input_Hotkey;
    /// Destroys a hot key object.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Hot key object.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_DestroyHotkey(hotkey: *mut *mut Input_Hotkey);
    /// Sets a modifier key.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Hotkey key object.
    ///
    /// * `preKeys` - List of modifier keys.
    ///
    /// * `size` - Number of modifier keys. One or two modifier keys are supported.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_SetPreKeys(hotkey: *mut Input_Hotkey, preKeys: *mut i32, size: i32);
    /// Obtains a modifier key.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Hotkey key object.
    ///
    /// * `preKeys` - List of modifier keys.
    ///
    /// * `preKeyCount` - Number of modifier keys.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetPreKeys status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] The hotkey is NULL or the pressedKeys is NULL or the pressedKeyCount
    /// is NULL;
    ///
    /// [`INPUT_DEVICE_NOT_SUPPORTED`] Capability not supported.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_GetPreKeys(
        hotkey: *const Input_Hotkey,
        preKeys: *mut *mut i32,
        preKeyCount: *mut i32,
    ) -> Input_Result;
    /// Sets a modified key.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Hotkey key object.
    ///
    /// * `finalKey` - Modified key. Only one modified key is supported.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_SetFinalKey(hotkey: *mut Input_Hotkey, finalKey: i32);
    /// Obtains a modified key.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Hotkey key object.
    ///
    /// * `finalKeyCode` - Returns the key value of the decorated key.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetfinalKey status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] The hotkey is NULL or the finalKeyCode is NULL;
    ///
    /// [`INPUT_DEVICE_NOT_SUPPORTED`] Capability not supported.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_GetFinalKey(
        hotkey: *const Input_Hotkey,
        finalKeyCode: *mut i32,
    ) -> Input_Result;
    /// Creates an array of [`Input_Hotkey`] instances.
    ///
    /// # Arguments
    ///
    /// * `count` - Number of [`Input_Hotkey`] instances to be created. The count must be the same as the number of
    /// system shortcut keys.
    ///
    /// # Returns
    ///
    /// * Returns a pointer to an array of [`Input_Hotkey`] instances if the operation is successful. If the
    /// operation fails, a null pointer is returned. The possible cause is memory allocation failure or count is not equal
    /// to the number of system hotkeys.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_CreateAllSystemHotkeys(count: i32) -> *mut *mut Input_Hotkey;
    /// Destroys an array of [`Input_Hotkey`] instances and reclaims memory.
    ///
    /// # Arguments
    ///
    /// * `hotkeys` - Pointer to an array of [`Input_Hotkey`] instances created by the
    /// [`OH_Input_CreateAllSystemHotkeys`] method.
    ///
    /// * `count` - Count of the array to be destroyed, which must be the same as the number of system shortcut keys.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_DestroyAllSystemHotkeys(hotkeys: *mut *mut Input_Hotkey, count: i32);
    /// Obtains all hot keys supported by the system.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Array of [`Input_Hotkey`] instances.
    /// When calling this API for the first time, you can pass NULL to obtain the array length.
    ///
    /// * `count` - Number of hot keys supported by the system.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetAllSystemHotkeys status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] The hotkey or count is NULL, or the value of count does not match the number
    /// of system shortcut keys supported by the system;
    /// [`INPUT_DEVICE_NOT_SUPPORTED`] Capability not supported.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_GetAllSystemHotkeys(
        hotkey: *mut *mut Input_Hotkey,
        count: *mut i32,
    ) -> Input_Result;
    /// Specifies whether to report repeated key events.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Shortcut key object.
    ///
    /// * `isRepeat` - Whether to report repeated key events.
    /// The value <b>true</b> means to report repeated key events, and the value <b>false</b> means the opposite.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_SetRepeat(hotkey: *mut Input_Hotkey, isRepeat: bool);
    /// Checks whether to report repeated key events.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Shortcut key object.
    ///
    /// * `isRepeat` - Whether a key event is repeated.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetIsRepeat status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] otherwise;
    ///
    /// [`INPUT_DEVICE_NOT_SUPPORTED`] Capability not supported.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_GetRepeat(hotkey: *const Input_Hotkey, isRepeat: *mut bool) -> Input_Result;
    /// Subscribes to shortcut key events.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Shortcut key object.
    ///
    /// * `callback` - Callback used to return shortcut key events.
    ///
    /// # Returns
    ///
    /// * OH_Input_AddHotkeyMonitor status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] if hotkey or callback is NULL;
    ///
    /// [`INPUT_DEVICE_NOT_SUPPORTED`] Capability not supported;
    ///
    /// [`INPUT_OCCUPIED_BY_SYSTEM`] The hotkey has been used by the system. You can call the [`GetAllSystemHotkeys`] interface to query all system shortcut keys.
    ///
    /// [`INPUT_OCCUPIED_BY_OTHER`] The hotkey has been subscribed to by another.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_AddHotkeyMonitor(
        hotkey: *const Input_Hotkey,
        callback: Input_HotkeyCallback,
    ) -> Input_Result;
    /// Unsubscribes from shortcut key events.
    ///
    /// # Arguments
    ///
    /// * `hotkey` - Shortcut key object.
    ///
    /// * `callback` - Callback used to return shortcut key events.
    ///
    /// # Returns
    ///
    /// * OH_Input_RemoveHotkeyMonitor status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] if hotkey or callback is NULL;
    ///
    /// [`INPUT_DEVICE_NOT_SUPPORTED`] Capability not supported.
    ///
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Input_RemoveHotkeyMonitor(
        hotkey: *const Input_Hotkey,
        callback: Input_HotkeyCallback,
    ) -> Input_Result;
    /// Registers a listener for device hot swap events.
    ///
    /// # Arguments
    ///
    /// * `listener` - Pointer to an [`Input_DeviceListener`] object.
    ///
    ///
    /// # Returns
    ///
    /// * OH_Input_RegisterDeviceListener status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] if listener is NULL;
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_RegisterDeviceListener(listener: *mut Input_DeviceListener) -> Input_Result;
    /// Unregisters the listener for device hot swap events.
    ///
    /// # Arguments
    ///
    /// * `listener` - Pointer to the listener for device hot swap events. For details, see [`Input_DeviceListener`].
    ///
    ///
    /// # Returns
    ///
    /// * OH_Input_UnregisterDeviceListener status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_PARAMETER_ERROR`] if listener is NULL or no listener is registered;
    /// [`INPUT_SERVICE_EXCEPTION`] if the service is abnormal.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_UnregisterDeviceListener(listener: *mut Input_DeviceListener) -> Input_Result;
    /// Unregisters the listener for all device hot swap events.
    ///
    ///
    /// # Returns
    ///
    /// * OH_Input_UnregisterDeviceListener status code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    ///
    /// [`INPUT_SERVICE_EXCEPTION`] if the service is abnormal.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_UnregisterDeviceListeners() -> Input_Result;
    /// Obtains the IDs of all input devices.
    ///
    /// # Arguments
    ///
    /// * `deviceIds` - Array of input device IDs.
    ///
    /// * `inSize` - Size of the array of input device IDs.
    ///
    /// * `outSize` - Length of the list of input device IDs. The value cannot be greater than the value of inSize.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDeviceIds result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceIds or outSize is a null pointer or inSize is less than 0.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDeviceIds(
        deviceIds: *mut i32,
        inSize: i32,
        outSize: *mut i32,
    ) -> Input_Result;
    /// Obtains the information about an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceId` - Device ID.
    ///
    /// * `deviceInfo` - Pointer to an [`Input_DeviceInfo`] object.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDevice result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if the deviceInfo is a null pointer or the deviceId is invalid.
    /// You can use the [`OH_Input_GetDeviceIds`] interface to query the device IDs supported by the system.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDevice(
        deviceId: i32,
        deviceInfo: *mut *mut Input_DeviceInfo,
    ) -> Input_Result;
    /// Creates a deviceInfo object.
    ///
    ///
    /// # Returns
    ///
    /// * Pointer to an [`Input_DeviceInfo`] object if the operation is successful;
    /// a null pointer otherwise (possibly because of a memory allocation failure).
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_CreateDeviceInfo() -> *mut Input_DeviceInfo;
    /// Destroys a deviceInfo object.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_DestroyDeviceInfo(deviceInfo: *mut *mut Input_DeviceInfo);
    /// Obtains the keyboard type of an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceId` - Device ID.
    ///
    /// * `keyboardType` - Pointer to the keyboard type of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetKeyboardType result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if the device ID is invalid or keyboardType is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetKeyboardType(deviceId: i32, keyboardType: *mut i32) -> Input_Result;
    /// Obtains the ID of an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// * `id` - Pointer to the ID of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDeviceId result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceInfo or id is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDeviceId(deviceInfo: *mut Input_DeviceInfo, id: *mut i32) -> Input_Result;
    /// Obtains the name of an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// * `name` - Pointer to the name of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDeviceName result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceInfo or name is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDeviceName(
        deviceInfo: *mut Input_DeviceInfo,
        name: *mut *mut ::core::ffi::c_char,
    ) -> Input_Result;
    /// Obtains the capabilities of an input device, for example, a touchscreen, touchpad, or keyboard.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// * `capabilities` - Pointer to the capabilities of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetCapabilities result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceInfo or capabilities is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetCapabilities(
        deviceInfo: *mut Input_DeviceInfo,
        capabilities: *mut i32,
    ) -> Input_Result;
    /// Obtains the version information of an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// * `version` - Pointer to the version information of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDeviceVersion result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceInfo or version is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDeviceVersion(
        deviceInfo: *mut Input_DeviceInfo,
        version: *mut i32,
    ) -> Input_Result;
    /// Obtains the product information of an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// * `product` - Pointer to the product information of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDeviceProduct result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceInfo or product is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDeviceProduct(
        deviceInfo: *mut Input_DeviceInfo,
        product: *mut i32,
    ) -> Input_Result;
    /// Obtains the vendor information of an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// * `vendor` - Pointer to the vendor information of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDeviceVendor result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceInfo or vendor is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDeviceVendor(
        deviceInfo: *mut Input_DeviceInfo,
        vendor: *mut i32,
    ) -> Input_Result;
    /// Obtains the physical address of an input device.
    ///
    /// # Arguments
    ///
    /// * `deviceInfo` - information object. For details, see [`Input_DeviceInfo`].
    ///
    /// * `address` - Pointer to the physical address of the input device.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetDeviceAddress result code, specifically,
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if deviceInfo or address is a null pointer.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Input_GetDeviceAddress(
        deviceInfo: *mut Input_DeviceInfo,
        address: *mut *mut ::core::ffi::c_char,
    ) -> Input_Result;
    /// Obtains the function key status.
    ///
    /// # Arguments
    ///
    /// * `keyCode` - Function key value. Supported function keys include capsLock, NumLock, and ScrollLock.
    ///
    /// * `state` - Function key status. The value 0 indicates that the function key is disabled,
    /// and the value 1 indicates the opposite.
    ///
    /// # Returns
    ///
    /// * OH_Input_GetFunctionKeyState function api result code
    /// [`INPUT_SUCCESS`] if the operation is successful;
    /// [`INPUT_PARAMETER_ERROR`] if keyCode is invalid or state is a null pointer.
    /// [`INPUT_KEYBOARD_DEVICE_NOT_EXIST`] no keyboard device connected.
    ///
    /// Required System Capabilities: SystemCapability.MultimodalInput.Input.Core
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Input_GetFunctionKeyState(keyCode: i32, state: *mut i32) -> Input_Result;
}
