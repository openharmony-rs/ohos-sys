// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_type::*;

/// Defines the expected frame rate range of the animation.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_ExpectedFrameRateRange {
    /// Expected minimum frame rate.
    pub min: u32,
    /// Expected maximum frame rate.
    pub max: u32,
    /// Expected optimal frame rate.
    pub expected: u32,
}
/// Defines the callback type for when the animation playback is complete.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_AnimateCompleteCallback {
    /// Type of the <b>onFinish</b> callback.
    pub type_: ArkUI_FinishCallbackType,
    /// Callback invoked when the animation playback is complete.
    pub callback: ::core::option::Option<unsafe extern "C" fn(userData: *mut ::core::ffi::c_void)>,
    /// Custom type.
    pub userData: *mut ::core::ffi::c_void,
}
#[repr(C)]
pub struct ArkUI_AnimateOption {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ArkUI_Curve {
    _unused: [u8; 0],
}
/// Defines the pointer to an interpolation curve.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type ArkUI_CurveHandle = *mut ArkUI_Curve;
#[repr(C)]
pub struct ArkUI_KeyframeAnimateOption {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ArkUI_AnimatorOption {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ArkUI_Animator {
    _unused: [u8; 0],
}
/// Defines the pointer to an animator object.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type ArkUI_AnimatorHandle = *mut ArkUI_Animator;
#[repr(C)]
pub struct ArkUI_AnimatorEvent {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ArkUI_AnimatorOnFrameEvent {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ArkUI_TransitionEffect {
    _unused: [u8; 0],
}
/// Implements the native animation APIs provided by ArkUI.
///
///
/// Version: 1
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_NativeAnimateAPI_1 {
    /// Defines an explicit animation.
    ///
    ///
    /// **Note:** Make sure the component attributes to be set in the event closure have been set before.
    ///
    /// # Arguments
    ///
    /// * `context` - Indicates a <b>UIContext</b> instance.
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `update` - Indicates the animation closure. The system automatically inserts a transition animation for the
    /// state change caused by the closure.
    ///
    /// * `complete` - Indicates the callback to be invoked when the animation playback is complete.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    pub animateTo: ::core::option::Option<
        unsafe extern "C" fn(
            context: ArkUI_ContextHandle,
            option: *mut ArkUI_AnimateOption,
            update: *mut ArkUI_ContextCallback,
            complete: *mut ArkUI_AnimateCompleteCallback,
        ) -> i32,
    >,
    /// Sets the keyframe animation.
    ///
    ///
    /// # Arguments
    ///
    /// * `context` - Indicates a <b>UIContext</b> instance.
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    pub keyframeAnimateTo: ::core::option::Option<
        unsafe extern "C" fn(
            context: ArkUI_ContextHandle,
            option: *mut ArkUI_KeyframeAnimateOption,
        ) -> i32,
    >,
    /// Creates an animator object.
    ///
    /// # Arguments
    ///
    /// * `context` - Indicates a <b>UIContext</b> instance.
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the animator object; returns <b>NULL</b> if a function parameter error occurs.
    pub createAnimator: ::core::option::Option<
        unsafe extern "C" fn(
            context: ArkUI_ContextHandle,
            option: *mut ArkUI_AnimatorOption,
        ) -> ArkUI_AnimatorHandle,
    >,
    /// Disposes of an animator object.
    ///
    /// # Arguments
    ///
    /// * `animator` - Indicates the target animator object.
    pub disposeAnimator:
        ::core::option::Option<unsafe extern "C" fn(animatorHandle: ArkUI_AnimatorHandle)>,
}
extern "C" {
    /// Creates an animation configuration.
    ///
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the created animation configuration.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_Create() -> *mut ArkUI_AnimateOption;
    /// Disposes of an animation configuration.
    ///
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_Dispose(option: *mut ArkUI_AnimateOption);
    /// Obtains the animation duration, in milliseconds.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// # Returns
    ///
    /// * Returns the duration.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetDuration(option: *mut ArkUI_AnimateOption) -> u32;
    /// Obtains the animation playback speed.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// # Returns
    ///
    /// * Returns the animation playback speed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetTempo(option: *mut ArkUI_AnimateOption) -> f32;
    /// Obtains the animation curve.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// # Returns
    ///
    /// * Returns the animated curve.If Null is returned, it means option is an invalid value.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetCurve(
        option: *mut ArkUI_AnimateOption,
    ) -> ArkUI_AnimationCurve;
    /// Obtains the animation delay, in milliseconds.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// # Returns
    ///
    /// * Returns the animation delay.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetDelay(option: *mut ArkUI_AnimateOption) -> i32;
    /// Obtains the number of times that an animation is played.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// # Returns
    ///
    /// * Returns the number of times that the animation is played.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetIterations(option: *mut ArkUI_AnimateOption) -> i32;
    /// Obtains the animation playback mode.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// # Returns
    ///
    /// * Returns the animation playback mode.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetPlayMode(
        option: *mut ArkUI_AnimateOption,
    ) -> ArkUI_AnimationPlayMode;
    /// Obtains the expected frame rate range of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// # Returns
    ///
    /// * Returns the expected frame rate range.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetExpectedFrameRateRange(
        option: *mut ArkUI_AnimateOption,
    ) -> *mut ArkUI_ExpectedFrameRateRange;
    /// Sets the animation duration.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `value` - Indicates the duration, in milliseconds.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetDuration(option: *mut ArkUI_AnimateOption, value: i32);
    /// Sets the animation playback speed.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `value` - Indicates the animation playback speed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetTempo(option: *mut ArkUI_AnimateOption, value: f32);
    /// Sets the animation curve.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `value` - Indicates the animated curve. Default value：ARKUI_CURVE_LINEAR.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetCurve(
        option: *mut ArkUI_AnimateOption,
        value: ArkUI_AnimationCurve,
    );
    /// Sets the animation delay.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `value` - Indicates the animation delay.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetDelay(option: *mut ArkUI_AnimateOption, value: i32);
    /// Sets the number of times that an animation is played.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `value` - Indicates the number of times that the animation is played.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetIterations(option: *mut ArkUI_AnimateOption, value: i32);
    /// Sets the animation playback mode.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `value` - Indicates the animation playback mode.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetPlayMode(
        option: *mut ArkUI_AnimateOption,
        value: ArkUI_AnimationPlayMode,
    );
    /// Sets the expected frame rate range of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an animation configuration.
    ///
    /// * `value` - Indicates the expected frame rate range.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetExpectedFrameRateRange(
        option: *mut ArkUI_AnimateOption,
        value: *mut ArkUI_ExpectedFrameRateRange,
    );
    /// Sets the animation curve for the animation of an animator.
    ///
    ///
    /// **Note:** This method is better than the value set by OH_ArkUI_AnimateOption_SetCurve.
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// * `value` - Indicates the animation curve settings.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_SetICurve(
        option: *mut ArkUI_AnimateOption,
        value: ArkUI_CurveHandle,
    );
    /// Obtains the animation curve of the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the animation curve of the specified animation.
    /// If Null is returned, it means option is an invalid value.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimateOption_GetICurve(option: *mut ArkUI_AnimateOption) -> ArkUI_CurveHandle;
    /// Obtains the keyframe animation parameters.
    ///
    /// # Arguments
    ///
    /// * `size` - Indicates the number of keyframe animation states.
    ///
    /// # Returns
    ///
    /// * Returns the keyframe animation parameter object; returns <b>NULL</b> if the value of <b>size</b> is less than
    /// 0.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_Create(size: i32) -> *mut ArkUI_KeyframeAnimateOption;
    /// Disposes of the keyframe animation parameter object.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameter object.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_Dispose(option: *mut ArkUI_KeyframeAnimateOption);
    /// Sets the overall delay of a keyframe animation, in milliseconds. By default, the keyframe animation is played
    /// without delay.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `value` - Indicates the delay, in milliseconds.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_SetDelay(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: i32,
    ) -> i32;
    /// Sets the number of times that the keyframe animation is played. By default, the animation is played once.
    /// The value <b>-1</b> indicates that the animation is played for an unlimited number of times. The value <b>0</b>
    /// indicates that there is no animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `value` - Indicates the number of times that the animation is played.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_SetIterations(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: i32,
    ) -> i32;
    /// Sets the callback invoked when the keyframe animation playback is complete. This API is called after the
    /// keyframe animation has played for the specified number of times.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `userData` - Indicates the pointer to a custom object.
    ///
    /// * `onFinish` - Indicates the callback.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_RegisterOnFinishCallback(
        option: *mut ArkUI_KeyframeAnimateOption,
        userData: *mut ::core::ffi::c_void,
        onFinish: ::core::option::Option<unsafe extern "C" fn(userData: *mut ::core::ffi::c_void)>,
    ) -> i32;
    /// Sets the duration of a keyframe animation, in milliseconds.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `value` - Indicates the duration to set, in milliseconds.
    ///
    /// * `index` - Indicates a state index.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_SetDuration(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: i32,
        index: i32,
    ) -> i32;
    /// Sets the animation curve for a specific keyframe in a keyframe animation.
    ///
    ///
    /// **Note:** Because the <b>springMotion</b>, <b>responsiveSpringMotion</b>, and <b>interpolatingSpring</b> curves do not
    /// have effective duration settings, they are not supported.
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `value` - Indicates the animation curve to set. Default value：EASE_IN_OUT.
    ///
    /// * `index` - Indicates a state index.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_SetCurve(
        option: *mut ArkUI_KeyframeAnimateOption,
        value: ArkUI_CurveHandle,
        index: i32,
    ) -> i32;
    /// Sets the closure function of the state at the time of the keyframe, that is, the state to be reached at the
    /// time of the keyframe.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `event` - Indicates a closure function.
    ///
    /// * `userData` - Indicates the pointer to a custom object.
    ///
    /// * `index` - Indicates a state index.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_RegisterOnEventCallback(
        option: *mut ArkUI_KeyframeAnimateOption,
        userData: *mut ::core::ffi::c_void,
        event: ::core::option::Option<unsafe extern "C" fn(userData: *mut ::core::ffi::c_void)>,
        index: i32,
    ) -> i32;
    /// Obtains the overall delay of a keyframe animation
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// # Returns
    ///
    /// * Returns the overall delay.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_GetDelay(option: *mut ArkUI_KeyframeAnimateOption)
        -> i32;
    /// Obtains the number of times that a keyframe animation is played.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// # Returns
    ///
    /// * Returns the number of times that the animation is played.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_GetIterations(
        option: *mut ArkUI_KeyframeAnimateOption,
    ) -> i32;
    /// Obtains the duration of a specific state in a keyframe animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `index` - Indicates a state index.
    ///
    /// # Returns
    ///
    /// * Returns the duration. The unit is millisecond.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_GetDuration(
        option: *mut ArkUI_KeyframeAnimateOption,
        index: i32,
    ) -> i32;
    /// Obtains the animation curve of a specific state in a keyframe animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the keyframe animation parameters.
    ///
    /// * `index` - Indicates a state index.
    ///
    /// # Returns
    ///
    /// * Returns the animated curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_KeyframeAnimateOption_GetCurve(
        option: *mut ArkUI_KeyframeAnimateOption,
        index: i32,
    ) -> ArkUI_CurveHandle;
    /// Creates an animator parameter object.
    ///
    ///
    /// **Note:** When <b>keyframeSize</b> is greater than 0, the animation interpolation start point is 0, and the animation
    /// interpolation end point is 1; no setting is allowed.
    /// # Arguments
    ///
    /// * `keyframeSize` - Indicates the number of keyframes.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the animator parameter object.
    /// returns <b>NULL</b> if the value of <b>size</b> is less than 0.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_Create(keyframeSize: i32) -> *mut ArkUI_AnimatorOption;
    /// Disposes of an animator parameter object.
    ///
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_Dispose(option: *mut ArkUI_AnimatorOption);
    /// Sets the duration for thea nimation of an animator, in milliseconds.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the target animator parameter object.
    ///
    /// * `value` - Indicates the playback duration, in milliseconds.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetDuration(
        option: *mut ArkUI_AnimatorOption,
        value: i32,
    ) -> i32;
    /// Sets the delay for playing the animation of an animator, in milliseconds.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the delay to set, in milliseconds.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetDelay(option: *mut ArkUI_AnimatorOption, value: i32) -> i32;
    /// Sets the number of times that the animation of an animator is played. The value <b>0</b> means not to play the
    /// animation, and <b>-1</b> means to play the animation for an unlimited number of times.
    ///
    ///
    /// **Note:** If this parameter is set to a negative value other than <b>-1</b>, the value is invalid. In this case, the
    /// animation is played once.
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the number of times that the animation is played.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetIterations(
        option: *mut ArkUI_AnimatorOption,
        value: i32,
    ) -> i32;
    /// Sets whether the animation of an animator is restored to the initial state after being executed.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates whether to restore the animation to the initial state after the animation is executed.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetFill(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_AnimationFillMode,
    ) -> i32;
    /// Sets the playback direction for the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the animation playback direction.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetDirection(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_AnimationDirection,
    ) -> i32;
    /// Sets the interpolation curve for the animation of an animator.
    ///
    ///
    /// **Note:** <b>springCurve</b>, <b>springMotion</b>, <b>responsiveSpringMotion</b>, <b>interpolatingSpring</b>,
    /// and <b>customCurve</b> curves are not supported.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the target interpolation curve. Default value：ARKUI_CURVE_LINEAR.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetCurve(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_CurveHandle,
    ) -> i32;
    /// Sets the interpolation start point for the animation of an animator.
    ///
    /// **Note:** This API does not take effect when the animation is a keyframe animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the interpolation start point to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetBegin(option: *mut ArkUI_AnimatorOption, value: f32) -> i32;
    /// Sets the interpolation end point for the animation of an animator.
    ///
    /// **Note:** This API does not take effect when the animation is a keyframe animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the interpolation end point to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetEnd(option: *mut ArkUI_AnimatorOption, value: f32) -> i32;
    /// Sets the expected frame rate range for the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the expected frame rate range to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetExpectedFrameRateRange(
        option: *mut ArkUI_AnimatorOption,
        value: *mut ArkUI_ExpectedFrameRateRange,
    ) -> i32;
    /// Sets the keyframe parameters for the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `time` - Indicates the keyframe time. Value range: [0,1].
    ///
    /// * `value` - Indicates the keyframe value.
    ///
    /// * `index` - Indicates the keyframe index.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetKeyframe(
        option: *mut ArkUI_AnimatorOption,
        time: f32,
        value: f32,
        index: i32,
    ) -> i32;
    /// Sets the keyframe curve type for the animation of an animator.
    ///
    ///
    /// **Note:** <b>springCurve</b>, <b>springMotion</b>, <b>responsiveSpringMotion</b>, <b>interpolatingSpring</b>,
    /// and <b>customCurve</b> curves are not supported.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `value` - Indicates the target interpolation curve.
    ///
    /// * `index` - Indicates the keyframe index.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_SetKeyframeCurve(
        option: *mut ArkUI_AnimatorOption,
        value: ArkUI_CurveHandle,
        index: i32,
    ) -> i32;
    /// Obtains the duration for playing an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the duration for playing the animation, in milliseconds.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetDuration(option: *mut ArkUI_AnimatorOption) -> i32;
    /// Obtains the delay for playing the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the delay for playing the animation, in milliseconds.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetDelay(option: *mut ArkUI_AnimatorOption) -> i32;
    /// Obtains the number of times that an animation is played.
    ///
    /// # Arguments
    ///
    /// * `option` - Animator animation parameter.
    ///
    /// # Returns
    ///
    /// * Returns the number of times that the animation is played.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetIterations(option: *mut ArkUI_AnimatorOption) -> i32;
    /// Obtains whether the animator animation is restored to the initial state after being executed.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns whether the animator animation is restored to the initial state after being executed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetFill(
        option: *mut ArkUI_AnimatorOption,
    ) -> ArkUI_AnimationFillMode;
    /// Obtains the playback direction of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the animation playback direction.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetDirection(
        option: *mut ArkUI_AnimatorOption,
    ) -> ArkUI_AnimationDirection;
    /// Obtains the interpolation curve of the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the interpolation curve of the animation.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetCurve(option: *mut ArkUI_AnimatorOption)
        -> ArkUI_CurveHandle;
    /// Obtains the interpolation start point of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the interpolation start point of the animation.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetBegin(option: *mut ArkUI_AnimatorOption) -> f32;
    /// Obtains the interpolation end point of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the interpolation end point of the animation.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetEnd(option: *mut ArkUI_AnimatorOption) -> f32;
    /// Obtains the expected frame rate range of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the expected frame rate range object.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetExpectedFrameRateRange(
        option: *mut ArkUI_AnimatorOption,
    ) -> *mut ArkUI_ExpectedFrameRateRange;
    /// Obtains the keyframe time of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `index` - Indicates the keyframe index.
    ///
    /// # Returns
    ///
    /// * Returns the keyframe time.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetKeyframeTime(
        option: *mut ArkUI_AnimatorOption,
        index: i32,
    ) -> f32;
    /// Obtains the keyframe value of an animation.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `index` - Indicates the keyframe index.
    ///
    /// # Returns
    ///
    /// * Returns the keyframe value.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetKeyframeValue(
        option: *mut ArkUI_AnimatorOption,
        index: i32,
    ) -> f32;
    /// Obtains the interpolation curve for a keyframe in the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `index` - Indicates the keyframe index.
    ///
    /// # Returns
    ///
    /// * Returns the interpolation curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_GetKeyframeCurve(
        option: *mut ArkUI_AnimatorOption,
        index: i32,
    ) -> ArkUI_CurveHandle;
    /// Obtains the custom object in an animation event object.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates an animation event object.
    ///
    /// # Returns
    ///
    /// * Returns the custom object.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorEvent_GetUserData(
        event: *mut ArkUI_AnimatorEvent,
    ) -> *mut ::core::ffi::c_void;
    /// Obtains the custom object in an animation event object.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates an animation event object.
    ///
    /// # Returns
    ///
    /// * Returns the custom object.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOnFrameEvent_GetUserData(
        event: *mut ArkUI_AnimatorOnFrameEvent,
    ) -> *mut ::core::ffi::c_void;
    /// Obtains the current progress in an animation event object.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates an animation event object.
    ///
    /// # Returns
    ///
    /// * Returns the animation progress.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOnFrameEvent_GetValue(event: *mut ArkUI_AnimatorOnFrameEvent) -> f32;
    /// Sets the callback invoked when the animator receives a frame.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `userData` - Indicates the custom parameter.
    ///
    /// * `callback` - Indicates the callback to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_RegisterOnFrameCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::core::ffi::c_void,
        callback: ::core::option::Option<
            unsafe extern "C" fn(event: *mut ArkUI_AnimatorOnFrameEvent),
        >,
    ) -> i32;
    /// Sets the callback invoked when the animation playback is complete.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `userData` - Indicates the custom parameter.
    ///
    /// * `callback` - Indicates the callback to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_RegisterOnFinishCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::core::ffi::c_void,
        callback: ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_AnimatorEvent)>,
    ) -> i32;
    /// Sets the callback invoked when the animation playback is canceled.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `userData` - Indicates the custom parameter.
    ///
    /// * `callback` - Indicates the callback to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_RegisterOnCancelCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::core::ffi::c_void,
        callback: ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_AnimatorEvent)>,
    ) -> i32;
    /// Sets the callback invoked when the animation playback is repeated.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates an animator parameter object.
    ///
    /// * `userData` - Indicates the custom parameter.
    ///
    /// * `callback` - Indicates the callback to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AnimatorOption_RegisterOnRepeatCallback(
        option: *mut ArkUI_AnimatorOption,
        userData: *mut ::core::ffi::c_void,
        callback: ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_AnimatorEvent)>,
    ) -> i32;
    /// Resets the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `animatorHandle` - Indicates an animator object.
    ///
    /// * `option` - Indicates the animator parameters.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_Animator_ResetAnimatorOption(
        animatorHandle: ArkUI_AnimatorHandle,
        option: *mut ArkUI_AnimatorOption,
    ) -> i32;
    /// Starts the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `animatorHandle` - Indicates an animator object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_Animator_Play(animatorHandle: ArkUI_AnimatorHandle) -> i32;
    /// Ends the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `animatorHandle` - Indicates an animator object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_Animator_Finish(animatorHandle: ArkUI_AnimatorHandle) -> i32;
    /// Pauses the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `animatorHandle` - Indicates an animator object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_Animator_Pause(animatorHandle: ArkUI_AnimatorHandle) -> i32;
    /// Cancels the animation of an animator.
    ///
    /// # Arguments
    ///
    /// * `animatorHandle` - Indicates an animator object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_Animator_Cancel(animatorHandle: ArkUI_AnimatorHandle) -> i32;
    /// Plays the animation of an animator in reverse order.
    ///
    /// # Arguments
    ///
    /// * `animatorHandle` - Indicates an animator object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_Animator_Reverse(animatorHandle: ArkUI_AnimatorHandle) -> i32;
    /// Implements initialization for the interpolation curve, which is used to create an interpolation curve based on
    /// the input parameter.
    ///
    /// # Arguments
    ///
    /// * `curve` - Indicates the curve type.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateCurveByType(curve: ArkUI_AnimationCurve) -> ArkUI_CurveHandle;
    /// Creates a step curve.
    ///
    /// # Arguments
    ///
    /// * `count` - Indicates the number of steps. The value must be a positive integer. Value range: [1, +∞).
    ///
    /// * `end` - Indicates whether jumping occurs when the interpolation ends.
    /// <b>true</b>: Jumping occurs when the interpolation ends. <b>false</b>: Jumping occurs when the interpolation starts.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateStepsCurve(count: i32, end: bool) -> ArkUI_CurveHandle;
    /// Creates a cubic Bezier curve.
    ///
    ///
    /// # Arguments
    ///
    /// * `x1` - Indicates the X coordinate of the first point on the Bezier curve. Value range: [0, 1].
    /// A value less than 0 is handed as <b>0</b>. A value greater than 1 is handed as <b>1</b>.
    ///
    /// * `y1` - Indicates the Y coordinate of the first point on the Bezier curve.
    ///
    /// * `x2` - Indicates the X coordinate of the second point on the Bezier curve. Value range: [0, 1].
    /// A value less than 0 is handed as <b>0</b>. A value greater than 1 is handed as <b>1</b>.
    ///
    /// * `y2` - Indicates the Y coordinate of the second point on the Bezier curve.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateCubicBezierCurve(
        x1: f32,
        y1: f32,
        x2: f32,
        y2: f32,
    ) -> ArkUI_CurveHandle;
    /// Creates a spring curve. The curve shape is subject to the spring parameters, and the animation duration is
    /// subject to the <b>duration</b> parameter in <b>animation</b> and <b>animateTo</b>.
    ///
    /// # Arguments
    ///
    /// * `velocity` - Indicates the initial velocity of the spring. It is applied by external factors to the spring
    /// animation, designed to help ensure the smooth transition from the previous motion state. The velocity is the
    /// normalized velocity, and its value is equal to the actual velocity at the beginning of the animation divided by the
    /// animation attribute change value.
    ///
    /// * `mass` - Indicates the mass, which influences the inertia in the spring system. The greater the mass, the greater
    /// the amplitude of the oscillation, and the slower the speed of restoring to the equilibrium position.
    ///
    /// * `stiffness` - Indicates the stiffness. It is the degree to which an object deforms by resisting the force applied.
    /// In an elastic system, the greater the stiffness, the stronger the ability to resist deformation, and the faster the
    /// speed of restoring to the equilibrium position.
    ///
    /// * `damping` - Indicates the damping. It is used to describe the oscillation and attenuation of the system after
    /// being disturbed. The larger the damping, the smaller the number of oscillations of elastic motion, and the smaller
    /// the oscillation amplitude.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateSpringCurve(
        velocity: f32,
        mass: f32,
        stiffness: f32,
        damping: f32,
    ) -> ArkUI_CurveHandle;
    /// Creates a spring animation curve. If multiple spring animations are applied to the same attribute of an
    /// object, each animation replaces their predecessor and inherits the velocity.
    ///
    /// **Note:** The animation duration is subject to the curve parameters, rather than the <b>duration</b> parameter in
    /// <b>animation</b> or <b>animateTo</b>.
    ///
    /// # Arguments
    ///
    /// * `response` - Indicates the duration of one complete oscillation.
    ///
    /// * `dampingFraction` - Indicates the damping coefficient.
    /// > 0 and < 1: underdamped. In this case, the spring overshoots the equilibrium position.
    /// <b>1</b>: critically damped.
    /// > 1: overdamped. In this case, the spring approaches equilibrium gradually.
    ///
    /// * `overlapDuration` - Indicates the duration for animations to overlap. When animations overlap, the <b>response</b>
    /// values of these animations will
    /// transit smoothly over this duration if they are different.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateSpringMotion(
        response: f32,
        dampingFraction: f32,
        overlapDuration: f32,
    ) -> ArkUI_CurveHandle;
    /// Creates a responsive spring animation curve. It is a special case of <b>springMotion</b>, with the only
    /// difference in the default values. It can be used together with <b>springMotion</b>.
    ///
    /// **Note:** The animation duration is subject to the curve parameters, rather than the <b>duration</b> parameter in
    /// <b>animation</b> or <b>animateTo</b>.
    ///
    /// # Arguments
    ///
    /// * `response` - Indicates the duration of one complete oscillation.
    ///
    /// * `dampingFraction` - Indicates the damping coefficient.
    /// > 0 and < 1: underdamped. In this case, the spring overshoots the equilibrium position.
    /// <b>1</b>: critically damped.
    /// > 1: overdamped. In this case, the spring approaches equilibrium gradually.
    ///
    /// * `overlapDuration` - Indicates the duration for animations to overlap. When animations overlap, the
    /// <b>response</b> values of these animations will
    /// transit smoothly over this duration if they are different.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateResponsiveSpringMotion(
        response: f32,
        dampingFraction: f32,
        overlapDuration: f32,
    ) -> ArkUI_CurveHandle;
    /// Creates an interpolating spring curve animated from 0 to 1. The actual animation value is calculated based on
    /// the curve.
    ///
    /// **Note:** The animation duration is subject to the curve parameters, rather than the <b>duration</b> parameter in
    /// <b>animation</b> or <b>animateTo</b>.
    ///
    ///
    /// # Arguments
    ///
    /// * `velocity` - Indicates the initial velocity of the spring. It is applied by external factors to the spring
    /// animation, esigned to help ensure the smooth transition from the previous motion state. The velocity is the
    /// normalized velocity, and its value is equal to the actual velocity
    /// at the beginning of the animation divided by the animation attribute change value.
    ///
    /// * `mass` - Indicates the mass, which influences the inertia in the spring system.
    /// The greater the mass, the greater the amplitude of the oscillation, and the slower the speed of restoring to the
    /// equilibrium position.
    ///
    /// * `stiffness` - Indicates the stiffness. It is the degree to which an object deforms by resisting the force applied.
    /// In an elastic system, the greater the stiffness, the stronger the ability to resist deformation, and the faster the
    /// speed of restoring to the equilibrium position.
    ///
    /// * `damping` - Indicates the damping. It is used to describe the oscillation and attenuation of the system after
    /// being disturbed. The larger the damping, the smaller the number of oscillations of elastic motion, and the smaller
    /// the oscillation amplitude.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateInterpolatingSpring(
        velocity: f32,
        mass: f32,
        stiffness: f32,
        damping: f32,
    ) -> ArkUI_CurveHandle;
    /// Creates a custom curve.
    ///
    /// # Arguments
    ///
    /// * `userData` - Indicates the custom data.
    ///
    /// * `interpolate` - Indicates the custom interpolation callback. <b>fraction</b> indicates the input x value for
    /// interpolation when the animation starts; value range: [0,1].
    /// The return value is the y value of the curve; value range: [0,1].
    /// If <b>fraction</b> is <b>0</b>, the return value <b>0</b> corresponds to the animation start point; any other return
    /// value means that the animation jumps at the start point.
    /// If <b>fraction</b> is <b>1</b>, the return value <b>1</b> corresponds to the animation end point; any other return
    /// value means that the end value of the animation is not the value of the state variable,
    /// which will result in an effect of transition from that end value to the value of the state variable.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the interpolation object of the curve.
    /// Returns <b>NULL</b> if a parameter error occurs.
    pub fn OH_ArkUI_Curve_CreateCustomCurve(
        userData: *mut ::core::ffi::c_void,
        interpolate: ::core::option::Option<
            unsafe extern "C" fn(fraction: f32, userdata: *mut ::core::ffi::c_void) -> f32,
        >,
    ) -> ArkUI_CurveHandle;
    /// Disposes of a custom curve.
    ///
    /// # Arguments
    ///
    /// * `curve` - Indicates the pointer to the interpolation object of the curve.
    pub fn OH_ArkUI_Curve_DisposeCurve(curveHandle: ArkUI_CurveHandle);
    /// Creates an opacity object for component transition.
    ///
    ///
    /// **Note:** If the value specified is less than 0, the value <b>0</b> is used. If the value specified is greater than 1,
    /// the value <b>1</b> is used.
    /// # Arguments
    ///
    /// * `opacity` - Indicates the opacity. Value range: [0, 1].
    ///
    /// # Returns
    ///
    /// * Returns the created opacity object for component transition.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateOpacityTransitionEffect(opacity: f32) -> *mut ArkUI_TransitionEffect;
    /// Creates a translation object for component transition.
    ///
    /// # Arguments
    ///
    /// * `translate` - Indicates the translation settings for component transition.
    ///
    /// # Returns
    ///
    /// * Returns the translation object created for component transition.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateTranslationTransitionEffect(
        translate: *mut ArkUI_TranslationOptions,
    ) -> *mut ArkUI_TransitionEffect;
    /// Creates a scaling object for component transition.
    ///
    /// # Arguments
    ///
    /// * `scale` - Indicates the scaling settings for component transition.
    ///
    /// # Returns
    ///
    /// * Returns the scaling object created for component transition.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateScaleTransitionEffect(
        scale: *mut ArkUI_ScaleOptions,
    ) -> *mut ArkUI_TransitionEffect;
    /// Creates a rotation object for component transition.
    ///
    /// # Arguments
    ///
    /// * `rotate` - Indicates the rotation settings for component transition.
    ///
    /// # Returns
    ///
    /// * Returns the rotation object created for component transition.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateRotationTransitionEffect(
        rotate: *mut ArkUI_RotationOptions,
    ) -> *mut ArkUI_TransitionEffect;
    /// Creates a movement object for component transition.
    ///
    /// # Arguments
    ///
    /// * `edge` - Indicates the movement type.
    ///
    /// # Returns
    ///
    /// * Returns the movement object created for component transition.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateMovementTransitionEffect(
        edge: ArkUI_TransitionEdge,
    ) -> *mut ArkUI_TransitionEffect;
    /// Creates an asymmetric transition effect.
    ///
    ///
    /// **Note:** If the <b>asymmetric</b> function is not used for <b>TransitionEffect</b>, the transition effect takes effect
    /// for both appearance and disappearance of the component.
    /// # Arguments
    ///
    /// * `appear` - Indicates the transition effect for appearance.
    ///
    /// * `disappear` - Indicates the transition effect for disappearance.
    ///
    /// # Returns
    ///
    /// * Returns the asymmetric transition effect.
    /// Returns <b>NULL</b> if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateAsymmetricTransitionEffect(
        appear: *mut ArkUI_TransitionEffect,
        disappear: *mut ArkUI_TransitionEffect,
    ) -> *mut ArkUI_TransitionEffect;
    /// Disposes of a transition effect.
    ///
    /// # Arguments
    ///
    /// * `effect` - Indicates the transition effect to dispose of.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_TransitionEffect_Dispose(effect: *mut ArkUI_TransitionEffect);
    /// Sets a combination of transition effects.
    ///
    /// # Arguments
    ///
    /// * `firstEffect` - Indicates the transition effect options.
    ///
    /// * `secondEffect` - Indicates the combination of transition effects.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_TransitionEffect_Combine(
        firstEffect: *mut ArkUI_TransitionEffect,
        secondEffect: *mut ArkUI_TransitionEffect,
    ) -> i32;
    /// Sets transition effect animation settings.
    ///
    ///
    /// **Note:** If <b>combine</b> is used for combining transition effects, the animation settings of a transition effect are
    /// applicable to the one following it.
    /// # Arguments
    ///
    /// * `effect` - Indicates the transition effect options.
    ///
    /// * `animation` - Indicates the animation settings.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_TransitionEffect_SetAnimation(
        effect: *mut ArkUI_TransitionEffect,
        animation: *mut ArkUI_AnimateOption,
    ) -> i32;
}
