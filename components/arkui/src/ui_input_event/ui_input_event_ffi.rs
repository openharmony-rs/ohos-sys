// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_type::*;

/// Defines the UI input event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_UIInputEvent {
    _unused: [u8; 0],
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_UIInputEvent_Type {
    pub const ARKUI_UIINPUTEVENT_TYPE_UNKNOWN: ArkUI_UIInputEvent_Type = ArkUI_UIInputEvent_Type(0);
    pub const ARKUI_UIINPUTEVENT_TYPE_TOUCH: ArkUI_UIInputEvent_Type = ArkUI_UIInputEvent_Type(1);
    pub const ARKUI_UIINPUTEVENT_TYPE_AXIS: ArkUI_UIInputEvent_Type = ArkUI_UIInputEvent_Type(2);
    /// Mouse event.
    pub const ARKUI_UIINPUTEVENT_TYPE_MOUSE: ArkUI_UIInputEvent_Type = ArkUI_UIInputEvent_Type(3);
}
#[repr(transparent)]
/// Enumerates the UI input event types.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_UIInputEvent_Type(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl HitTestMode {
    /// Both the node and its child node respond to the hit test of a touch event, but its sibling node is blocked from
    /// the hit test.
    pub const HTM_DEFAULT: HitTestMode = HitTestMode(0);
    /// The node responds to the hit test of a touch event, but its child node and sibling node are blocked from the hit
    /// test.
    pub const HTM_BLOCK: HitTestMode = HitTestMode(1);
    /// Both the node and its child node respond to the hit test of a touch event, and its sibling node is also
    /// considered during the hit test.
    pub const HTM_TRANSPARENT: HitTestMode = HitTestMode(2);
    /// The node does not respond to the hit test of a touch event, but its child node and sibling node are considered
    /// during the hit test.
    pub const HTM_NONE: HitTestMode = HitTestMode(3);
}
#[repr(transparent)]
/// Enumerates the hit test modes.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct HitTestMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ::core::ops::BitOr<ArkUI_ModifierKeyName> for ArkUI_ModifierKeyName {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        ArkUI_ModifierKeyName(self.0 | other.0)
    }
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ::core::ops::BitOrAssign for ArkUI_ModifierKeyName {
    #[inline]
    fn bitor_assign(&mut self, rhs: ArkUI_ModifierKeyName) {
        self.0 |= rhs.0;
    }
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ::core::ops::BitAnd<ArkUI_ModifierKeyName> for ArkUI_ModifierKeyName {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        ArkUI_ModifierKeyName(self.0 & other.0)
    }
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ::core::ops::BitAndAssign for ArkUI_ModifierKeyName {
    #[inline]
    fn bitand_assign(&mut self, rhs: ArkUI_ModifierKeyName) {
        self.0 &= rhs.0;
    }
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_ModifierKeyName {
    /// Ctrl.
    pub const ARKUI_MODIFIER_KEY_CTRL: ArkUI_ModifierKeyName = ArkUI_ModifierKeyName(1);
    /// Shift.
    pub const ARKUI_MODIFIER_KEY_SHIFT: ArkUI_ModifierKeyName = ArkUI_ModifierKeyName(2);
    /// Alt.
    pub const ARKUI_MODIFIER_KEY_ALT: ArkUI_ModifierKeyName = ArkUI_ModifierKeyName(4);
    /// Fn.
    pub const ARKUI_MODIFIER_KEY_FN: ArkUI_ModifierKeyName = ArkUI_ModifierKeyName(8);
}
#[repr(transparent)]
/// Defines an enum for modifier keys.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_ModifierKeyName(pub ::core::ffi::c_uint);
/// ABS_X.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_X: _bindgen_ty_6 = _bindgen_ty_6(0);
/// ABS_Y.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_Y: _bindgen_ty_6 = _bindgen_ty_6(1);
/// ABS_Z.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_Z: _bindgen_ty_6 = _bindgen_ty_6(2);
/// ABS_RZ.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_RZ: _bindgen_ty_6 = _bindgen_ty_6(3);
/// ABS_GAS.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_GAS: _bindgen_ty_6 = _bindgen_ty_6(4);
/// ABS_BRAKE.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_BRAKE: _bindgen_ty_6 = _bindgen_ty_6(5);
/// ABS_HAT0X.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_HAT0X: _bindgen_ty_6 = _bindgen_ty_6(6);
/// ABS_HAT0Y.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_FOCUS_AXIS_EVENT_ABS_HAT0Y: _bindgen_ty_6 = _bindgen_ty_6(7);
#[repr(transparent)]
/// Defines an enum for the axis types for focus axis events.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _bindgen_ty_6(pub ::core::ffi::c_uint);
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
impl ArkUI_InteractionHand {
    /// Unknown.
    pub const ARKUI_EVENT_HAND_NONE: ArkUI_InteractionHand = ArkUI_InteractionHand(0);
    /// Left hand.
    pub const ARKUI_EVENT_HAND_LEFT: ArkUI_InteractionHand = ArkUI_InteractionHand(1);
    /// Right hand.
    pub const ARKUI_EVENT_HAND_RIGHT: ArkUI_InteractionHand = ArkUI_InteractionHand(2);
}
#[repr(transparent)]
/// Defines whether the touch event is from the left or right hand.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_InteractionHand(pub ::core::ffi::c_uint);
/// The axis event is abnormal.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_AXIS_EVENT_ACTION_NONE: _bindgen_ty_7 = _bindgen_ty_7(0);
/// The axis event begins.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_AXIS_EVENT_ACTION_BEGIN: _bindgen_ty_7 = _bindgen_ty_7(1);
/// The axis event is updated.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_AXIS_EVENT_ACTION_UPDATE: _bindgen_ty_7 = _bindgen_ty_7(2);
/// The axis event ends.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_AXIS_EVENT_ACTION_END: _bindgen_ty_7 = _bindgen_ty_7(3);
/// The axis event is canceled.
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub const UI_AXIS_EVENT_ACTION_CANCEL: _bindgen_ty_7 = _bindgen_ty_7(4);
#[repr(transparent)]
/// Enumerates the action types for axis events.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct _bindgen_ty_7(pub ::core::ffi::c_uint);
extern "C" {
    /// Obtains the type of this UI input event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the type of the current UI input event; returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_UIInputEvent_GetType(event: *const ArkUI_UIInputEvent) -> i32;
    /// Obtains the action type of this UI input event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the action type of the current UI input event; returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_UIInputEvent_GetAction(event: *const ArkUI_UIInputEvent) -> i32;
    /// Obtains the source type of this UI input event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the source type of the current UI input event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_UIInputEvent_GetSourceType(event: *const ArkUI_UIInputEvent) -> i32;
    /// Obtains the tool type of this UI input event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the tool type of the current UI input event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_UIInputEvent_GetToolType(event: *const ArkUI_UIInputEvent) -> i32;
    /// Obtains the time when this UI input event occurs.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the time when the UI input event occurs; returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_UIInputEvent_GetEventTime(event: *const ArkUI_UIInputEvent) -> i64;
    /// Obtains the number of touch points from a directional input event (such as a touch event, mouse event,
    /// or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the number of touch points for the directional input event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetPointerCount(event: *const ArkUI_UIInputEvent) -> u32;
    /// Obtains the ID of a touch point from a directional input event (such as a touch event, mouse event,
    /// or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the ID of the corresponding touch point.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> i32;
    /// Obtains the ID of the touch pointer that triggers the current touch event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_GetChangedPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: *mut u32,
    ) -> i32;
    /// Obtains the X coordinate relative to the upper left corner of the current component from a directional
    /// input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the directional input event.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current component;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetX(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the X coordinate of a specific touch point relative to the upper left corner of the current component
    /// from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current component;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the Y coordinate relative to the upper left corner of the current component from a directional
    /// input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current component;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetY(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the Y coordinate of a specific touch point relative to the upper left corner of the current component
    /// from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current component;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the X coordinate relative to the upper left corner of the current application window from a
    /// directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current application window;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetWindowX(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the X coordinate of a specific touch point relative to the upper left corner of the current
    /// application window from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current application window;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetWindowXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the Y coordinate relative to the upper left corner of the current application window from a
    /// directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current application window;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetWindowY(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the Y coordinate of a specific touch point relative to the upper left corner of the current
    /// application window from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current application window;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetWindowYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the X coordinate relative to the upper left corner of the current screen from a directional input
    /// event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current screen;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetDisplayX(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the X coordinate of a specific touch point relative to the upper left corner of the current screen
    /// from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current screen;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetDisplayXByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the Y coordinate relative to the upper left corner of the current screen from a directional input
    /// event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current screen;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetDisplayY(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the Y coordinate of a specific touch point relative to the upper left corner of the current screen
    /// from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current screen;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetDisplayYByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the pressure applied to the touchscreen from a directional input event (for example, a touch event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the pressure applied to the touchscreen; returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the angle relative to the YZ plane from a directional input event (for example, a touch event).
    /// The value range is [-90, 90]. A positive value indicates a rightward tilt.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the angle relative to the YZ plane.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the angle relative to the XZ plane from a directional input event (for example, a touch event).
    /// The value range is [-90, 90]. A positive value indicates a downward tilt.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the angle relative to the XZ plane.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the rotation angle of the stylus around the z-axis from a UI input event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to the UI input event.
    ///
    /// * `rollAngle` - Rotation angle of the stylus around the z-axis.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_PointerEvent_GetRollAngle(
        event: *const ArkUI_UIInputEvent,
        rollAngle: *mut f64,
    ) -> i32;
    /// Obtains the width of the touch area from a directional input event (for example, a touch event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the width of the touch area.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains the height of the touch area from a directional input event (for example, a touch event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the height of the touch area.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> f32;
    /// Obtains whether the current touch event is from the left or right hand.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to the current UI input event.
    ///
    /// * `hand` - Whether the touch point is from the left or right hand.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_GetInteractionHand(
        event: *const ArkUI_UIInputEvent,
        hand: *mut ArkUI_InteractionHand,
    ) -> i32;
    /// Obtains whether the current touch event is from the left or right hand.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Index of the target touch point in the multi-touch data list.
    ///
    /// * `hand` - Whether the touch point is from the left or right hand.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_GetInteractionHandByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: i32,
        hand: *mut ArkUI_InteractionHand,
    ) -> i32;
    /// Obtains the number of historical events from a directional input event (such as a touch event, mouse event,
    /// or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the number of historical events.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistorySize(event: *const ArkUI_UIInputEvent) -> u32;
    /// Obtains the occurrence time of a historical event from a directional input event (such as a touch event,
    /// mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the time when the UI input event occurs; returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryEventTime(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> i64;
    /// Obtains the number of touch points in a specific historical event from a directional input event (such as
    /// a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the number of touch points in the specified historical event
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerCount(
        event: *const ArkUI_UIInputEvent,
        historyIndex: u32,
    ) -> u32;
    /// Obtains the ID of a touch point in a specific historical event from a directional input event (such as
    /// a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the ID of the corresponding touch point in the specified historical event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryPointerId(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> i32;
    /// Obtains the X coordinate of a specific touch point in a historical event relative to the upper left corner
    /// of the current component from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current component;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the Y coordinate of a specific touch point in a historical event relative to the upper left corner
    /// of the current component from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current component;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the X coordinate of a specific touch point in a historical event relative to the upper left corner
    /// of the current application window from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current application window;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the Y coordinate of a specific touch point in a historical event relative to the upper left corner
    /// of the current application window from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current application window;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryWindowY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the X coordinate of a specific touch point in a historical event relative to the upper left corner
    /// of the current screen from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate relative to the upper left corner of the current screen;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the Y coordinate of a specific touch point in a historical event relative to the upper left corner
    /// of the current screen from a directional input event (such as a touch event, mouse event, or axis event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate relative to the upper left corner of the current screen;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryDisplayY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the pressure applied to the touchscreen in a specific historical event from a directional input event
    /// (for example, a touch event)..
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the pressure applied to the touchscreen; returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryPressure(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the angle relative to the YZ plane in a specific historical event from a directional input event
    /// (for example, a touch event). The value range is [-90, 90]. A positive value indicates a rightward tilt.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the angle relative to the YZ plane.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltX(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the angle relative to the XZ plane in a specific historical event from a directional input event
    /// (for example, a touch event). The value range is [-90, 90]. A positive value indicates a downward tilt.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the angle relative to the XZ plane.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTiltY(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the width of the touch area in a specific historical event from a directional input event
    /// (for example, a touch event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the width of the touch area.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaWidth(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the height of the touch area in a specific historical event from a directional input event
    /// (for example, a touch event).
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `pointerIndex` - Indicates the index of the target touch point in the multi-touch data list.
    ///
    /// * `historyIndex` - Indicates the index of the target historical event.
    ///
    /// # Returns
    ///
    /// * Returns the height of the touch area.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_GetHistoryTouchAreaHeight(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
        historyIndex: u32,
    ) -> f32;
    /// Obtains the value of the vertical scroll axis for this axis event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the value of the vertical scroll axis of the current axis event;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AxisEvent_GetVerticalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
    /// Obtains the value of the horizontal scroll axis for this axis event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the value of the horizontal scroll axis of the current axis event;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AxisEvent_GetHorizontalAxisValue(event: *const ArkUI_UIInputEvent) -> f64;
    /// Obtains the scale value of the pinch axis for this axis event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the scale value of the pinch axis of the current axis event;
    /// returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AxisEvent_GetPinchAxisScaleValue(event: *const ArkUI_UIInputEvent) -> f64;
    /// Obtains the action type of the current axis event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the action type of the current axis event.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_AxisEvent_GetAxisAction(event: *const ArkUI_UIInputEvent) -> i32;
    /// Sets how the component behaves during hit testing.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `mode` - Indicates how the component behaves during hit testing. The parameter type is [`HitTestMode`].
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_SetInterceptHitTestMode(
        event: *const ArkUI_UIInputEvent,
        mode: HitTestMode,
    ) -> i32;
    /// Get the value of the button type for mouse events.
    ///
    /// # Arguments
    ///
    /// * `event` - Represents a pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Return to the mouse button type, where <b>1</b> is the left button, <b>2</b> is the right button,
    /// <b>3</b> is the middle button, <b>4</b> is the back button, and <b>5</b> is the forward button.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_MouseEvent_GetMouseButton(event: *const ArkUI_UIInputEvent) -> i32;
    /// Get the value of the mouse action type for mouse events.
    ///
    /// # Arguments
    ///
    /// * `event` - Represents a pointer to the current UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the type of mouse action, where <b>1</b> represents button pressed,
    /// <b>2</b> represents button released, and <b>3</b> represents mouse movement.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_MouseEvent_GetMouseAction(event: *const ArkUI_UIInputEvent) -> i32;
    /// Sets whether to prevent event bubbling.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `stopPropagation` - Indicates whether the event is prevented from bubbling.
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. If 0 is returned, the setting is successful.
    /// If 401 is returned, the execution fails.
    /// The possible cause of the failure is that the event parameter is abnormal, such as a null pointer.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_PointerEvent_SetStopPropagation(
        event: *const ArkUI_UIInputEvent,
        stopPropagation: bool,
    ) -> i32;
    /// Obtains the ID of device that triggers UI input event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the device ID.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_UIInputEvent_GetDeviceId(event: *const ArkUI_UIInputEvent) -> i32;
    /// Obtains all keys that are pressed from UI input event. Only supports key events currently.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `pressedKeyCodes` - Array of all keys that are pressed. You need to allocate the memory space.
    ///
    /// * `length` - Length of the passed pressedKeyCodes array (when used as an input parameter);
    /// number of the keys pressed (when used as an output parameter).
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_BUFFER_SIZE_NOT_ENOUGH`] if the giving buffer is not enough.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_UIInputEvent_GetPressedKeys(
        event: *const ArkUI_UIInputEvent,
        pressedKeyCodes: *mut i32,
        length: *mut i32,
    ) -> i32;
    /// Obtains the axis value of a focus axis event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `axis` - Axis type of the focus axis event.
    ///
    /// # Returns
    ///
    /// * Returns the axis value of the focus axis event; returns <b>0.0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_FocusAxisEvent_GetAxisValue(event: *const ArkUI_UIInputEvent, axis: i32)
        -> f64;
    /// Sets whether to prevent a focus axis event from bubbling up.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the current UI input event.
    ///
    /// * `stopPropagation` - Indicates whether to stop event propagation.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_FocusAxisEvent_SetStopPropagation(
        event: *const ArkUI_UIInputEvent,
        stopPropagation: bool,
    ) -> i32;
    /// Obtains the width of the component hit by an event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the width of the component hit by the event; returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_UIInputEvent_GetEventTargetWidth(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the height of the component hit by an event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the height of the component hit by the event; returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_UIInputEvent_GetEventTargetHeight(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the X coordinate of the component hit by an event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate of the component hit by the event; returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_UIInputEvent_GetEventTargetPositionX(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the Y coordinate of the component hit by an event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate of the component hit by the event;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_UIInputEvent_GetEventTargetPositionY(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the global X coordinate of the component hit by an event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the global X coordinate of the component hit by the event;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_UIInputEvent_GetEventTargetGlobalPositionX(
        event: *const ArkUI_UIInputEvent,
    ) -> f32;
    /// Obtains the global Y coordinate of the component hit by an event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the global Y coordinate of the component hit by the event;
    /// returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_UIInputEvent_GetEventTargetGlobalPositionY(
        event: *const ArkUI_UIInputEvent,
    ) -> f32;
    /// Checks whether the cursor is hovering over this component.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the cursor is hovering over the current component.
    /// Returns <b>false</b> if the cursor is not hovering over the current component.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_HoverEvent_IsHovered(event: *const ArkUI_UIInputEvent) -> bool;
    /// Obtains the state of the modifier keys in a UI input event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `keys` - Pointer to a variable where the current combination of pressed modifier keys will be returned.
    /// The application can use bitwise operations to determine the state of each modifier key.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_UIInputEvent_GetModifierKeyStates(
        event: *const ArkUI_UIInputEvent,
        keys: *mut u64,
    ) -> i32;
    /// Obtains the press time of a specific touch point.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `pointerIndex` - Index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the press time of the specific touch point; returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_GetPressedTimeByIndex(
        event: *const ArkUI_UIInputEvent,
        pointerIndex: u32,
    ) -> i64;
    /// Obtains the x-axis offset of the mouse pointer position relative to the position in the previously reported
    /// mouse event. This value may be less than the difference between the two reported X coordinates when the mouse pointer
    /// is near the screen edge.
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the x-axis offset of the mouse pointer position relative to the position in the previously reported
    /// mouse event; returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_MouseEvent_GetRawDeltaX(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the y-axis offset of the mouse pointer position relative to the position in the previously reported
    /// mouse event. This value may be less than the difference between the two reported Y coordinates when the mouse pointer
    /// is near the screen edge.
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the y-axis offset of the mouse pointer position relative to the position in the previously reported
    /// mouse event; returns <b>0.0f</b> if any parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_MouseEvent_GetRawDeltaY(event: *const ArkUI_UIInputEvent) -> f32;
    /// Obtains the pressed buttons from a mouse event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `pressedButtons` - Array of the pressed buttons. An int array must be created beforehand to store the pressed
    /// buttons.
    ///
    /// * `length` - Length of the passed pressedButtons array (when used as an input parameter);
    /// number of the buttons pressed (when used as an output parameter).
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] if the given buffer size is insufficient.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_MouseEvent_GetPressedButtons(
        event: *const ArkUI_UIInputEvent,
        pressedButtons: *mut i32,
        length: *mut i32,
    ) -> i32;
    /// Obtains the ID of the screen where the UI input event occurs.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the screen ID; returns <b>0</b> if any parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_UIInputEvent_GetTargetDisplayId(event: *const ArkUI_UIInputEvent) -> i32;
    /// Sets whether to enable axis event propagation.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to the UI input event.
    ///
    /// * `propagation` - Whether to enable event propagation.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_AxisEvent_SetPropagation(
        event: *const ArkUI_UIInputEvent,
        propagation: bool,
    ) -> i32;
    /// Obtains the scroll step configuration of the mouse wheel axis event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to the UI input event.
    ///
    /// # Returns
    ///
    /// * Returns the scroll step configuration of the mouse wheel axis event.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_ArkUI_AxisEvent_GetScrollStep(event: *const ArkUI_UIInputEvent) -> i32;
    /// Creates a cloned event pointer based on an event pointer.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `clonedEvent` - Pointer to the cloned <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_CreateClonedEvent(
        event: *const ArkUI_UIInputEvent,
        clonedEvent: *mut *mut ArkUI_UIInputEvent,
    ) -> i32;
    /// Destroys a cloned event pointer.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT`] if the input event pointer is not a
    /// cloned event pointer.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_DestroyClonedEvent(event: *const ArkUI_UIInputEvent) -> i32;
    /// Sets the X and Y coordinates of a cloned event relative to the upper left corner of the current component.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `x` - X coordinate of the event relative to the upper left corner of the current component.
    ///
    /// * `y` - Y coordinate of the event relative to the upper left corner of the current component.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT`] if the input event pointer is not a
    /// cloned event pointer.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventLocalPosition(
        event: *const ArkUI_UIInputEvent,
        x: f32,
        y: f32,
    ) -> i32;
    /// Sets the X and Y coordinates of a specific contact point of a cloned event relative to the upper left corner
    /// of the current component.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `x` - X coordinate of the event relative to the upper left corner of the current component.
    ///
    /// * `y` - Y coordinate of the event relative to the upper left corner of the current component.
    ///
    /// * `pointerIndex` - Index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT`] if the input event pointer is not a
    /// cloned event pointer.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventLocalPositionByIndex(
        event: *const ArkUI_UIInputEvent,
        x: f32,
        y: f32,
        pointerIndex: i32,
    ) -> i32;
    /// Sets the action type of a cloned event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `actionType` - Action type of the cloned event.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT`] if the input event pointer is not a
    /// cloned event pointer.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventActionType(
        event: *const ArkUI_UIInputEvent,
        actionType: i32,
    ) -> i32;
    /// Sets the touch point ID of a cloned pointer event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `fingerId` - ID of the touch point that triggers the event.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT`] if the input event pointer is not a
    /// cloned event pointer.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventChangedFingerId(
        event: *const ArkUI_UIInputEvent,
        fingerId: i32,
    ) -> i32;
    /// Sets the touch point ID of a specific contact point of a cloned event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// * `fingerId` - Touch point ID of the specific contact point.
    ///
    /// * `pointerIndex` - Index of the target touch point in the multi-touch data list.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT`] if the input event pointer is not a
    /// cloned event pointer.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_SetClonedEventFingerIdByIndex(
        event: *const ArkUI_UIInputEvent,
        fingerId: i32,
        pointerIndex: i32,
    ) -> i32;
    /// Posts a cloned event to a specific node.
    ///
    /// # Arguments
    ///
    /// * `node` - Target node.
    ///
    /// * `event` - Pointer to an <b>ArkUI_UIInputEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NON_CLONED_POINTER_EVENT`] if the input event pointer is not a
    /// cloned event pointer.
    /// Returns [`ARKUI_ERROR_CODE_POST_CLONED_COMPONENT_STATUS_ABNORMAL`]
    /// if the component status abnormal.
    /// Returns [`ARKUI_ERROR_CODE_POST_CLONED_NO_COMPONENT_HIT_TO_RESPOND_TO_THE_EVENT`]
    /// if no component hit to response to the event.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_PointerEvent_PostClonedEvent(
        node: ArkUI_NodeHandle,
        event: *const ArkUI_UIInputEvent,
    ) -> i32;
}
