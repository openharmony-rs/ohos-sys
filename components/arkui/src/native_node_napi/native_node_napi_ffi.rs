// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::drawable_descriptor::ArkUI_DrawableDescriptor;
use crate::native_type::*;
use ohos_sys_opaque_types::{napi_env, napi_value};

extern "C" {
    /// Obtains a <b>FrameNode</b> object on the ArkTS side and maps it to an <b>ArkUI_NodeHandle</b> object on the
    /// native side.
    ///
    /// # Arguments
    ///
    /// * `env` - Indicates the NAPI environment pointer.
    ///
    /// * `frameNode` - Indicates the <b>FrameNode</b> object created on the ArkTS side.
    ///
    /// * `handle` - Indicates the pointer to the <b>ArkUI_NodeHandle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNodeHandleFromNapiValue(
        env: napi_env,
        frameNode: napi_value,
        handle: *mut ArkUI_NodeHandle,
    ) -> i32;
    /// Obtains a <b>UIContext</b> object on the ArkTS side and maps it to an <b>ArkUI_ContextHandle</b> object on the
    /// native side.
    ///
    /// # Arguments
    ///
    /// * `env` - ndicates the NAPI environment pointer.
    ///
    /// * `value` - Indicates the <b>UIContext</b> object created on the ArkTS side.
    ///
    /// * `context` - Indicates the pointer to the <b>ArkUI_ContextHandle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetContextFromNapiValue(
        env: napi_env,
        value: napi_value,
        context: *mut ArkUI_ContextHandle,
    ) -> i32;
    /// Obtains a <b>NodeContent</b> object on the ArkTS side and maps it to an <b>ArkUI_NodeContentHandle</b>
    /// object on the native side.
    ///
    /// # Arguments
    ///
    /// * `env` - ndicates the NAPI environment pointer.
    ///
    /// * `value` - Indicates the <b>NodeContent</b> object created on the ArkTS side.
    ///
    /// * `content` - Indicates the pointer to the <b>ArkUI_NodeContentHandle</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNodeContentFromNapiValue(
        env: napi_env,
        value: napi_value,
        content: *mut ArkUI_NodeContentHandle,
    ) -> i32;
    /// Obtains a <b>DrawableDescriptor</b> object on the ArkTS side and maps it to an
    /// <b>ArkUI_DrawableDescriptro</b> object on the native side.
    ///
    /// # Arguments
    ///
    /// * `env` - Indicates the NAPI environment pointer.
    ///
    /// * `value` - Indicates the <b>DrawableDescriptor</b> object created on the ArkTS side.
    ///
    /// * `drawableDescriptor` - Indicates the pointer to the <b>ArkUI_DrawableDescriptro</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetDrawableDescriptorFromNapiValue(
        env: napi_env,
        value: napi_value,
        drawableDescriptor: *mut *mut ArkUI_DrawableDescriptor,
    ) -> i32;
    /// Obtains a <b>Resource</b> object on the ArkTS side and maps it to an
    /// <b>ArkUI_DrawableDescriptro</b> object on the native side.
    ///
    /// # Arguments
    ///
    /// * `env` - Indicates the NAPI environment pointer.
    ///
    /// * `value` - Indicates the <b>Resource</b> object created on the ArkTS side.
    ///
    /// * `drawableDescriptor` - Indicates the pointer to the <b>ArkUI_DrawableDescriptro</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetDrawableDescriptorFromResourceNapiValue(
        env: napi_env,
        value: napi_value,
        drawableDescriptor: *mut *mut ArkUI_DrawableDescriptor,
    ) -> i32;
    /// Obtain the ID of the Navigation component where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `buffer` - The buffer to which NavigationID writes to the memory,
    /// memory space needs to be allocated by the developer.
    ///
    /// * `bufferSize` - The buffer size
    ///
    /// * `writeLength` - Indicates the string length actually written to the buffer
    /// when returning [`ARKUI_ERROR_CODE_NO_ERROR`].
    /// Indicates the minimum buffer size that can accommodate the target
    /// when [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] is returned.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node, buffer or writeLength is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in Navigation.
    /// [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] If the buffer size is less than the minimum buffer size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavigationId(
        node: ArkUI_NodeHandle,
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUiResult;
    /// Obtain the name of the NavDestination component where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `buffer` - The buffer to which NavDestination name writes to the memory,
    /// memory space needs to be allocated by the developer.
    ///
    /// * `bufferSize` - The buffer size
    ///
    /// * `writeLength` - Indicates the string length actually written to the buffer
    /// when returning [`ARKUI_ERROR_CODE_NO_ERROR`].
    /// Indicates the minimum buffer size that can accommodate the target
    /// when [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] is returned.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node, buffer or writeLength is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in Navigation.
    /// [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] If the buffer size is less than the minimum buffer size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavDestinationName(
        node: ArkUI_NodeHandle,
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUiResult;
    /// Based on the given index value, obtain the length of the Navigation stack where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `length` - The length of the stack. After the operation succeeds, the result is written back to this parameter.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node or length is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in Navigation.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavStackLength(node: ArkUI_NodeHandle, length: *mut i32) -> ArkUiResult;
    /// Based on the given index value, obtain the page name of the corresponding position
    /// in the navigation stack where the node is located.
    /// Index values are counted from 0, with 0 being the bottom of the stack.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `index` - The index of the NavDestination in the stack is queried.
    ///
    /// * `buffer` - The buffer to which NavDestination index writes to the memory,
    /// memory space needs to be allocated by the developer.
    ///
    /// * `bufferSize` - The buffer size
    ///
    /// * `writeLength` - Indicates the string length actually written to the buffer
    /// when returning [`ARKUI_ERROR_CODE_NO_ERROR`].
    /// Indicates the minimum buffer size that can accommodate the target
    /// when [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] is returned.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node, buffer or writeLength is null.
    /// [`ARKUI_ERROR_CODE_NODE_INDEX_INVALID`] if index is an invalid value.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in Navigation.
    /// [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] If the buffer size is less than the minimum buffer size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavDestinationNameByIndex(
        node: ArkUI_NodeHandle,
        index: i32,
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUiResult;
    /// Obtain the ID of the NavDestination component where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `buffer` - The buffer to which NavDestination ID writes to the memory,
    /// memory space needs to be allocated by the developer.
    ///
    /// * `bufferSize` - The buffer size
    ///
    /// * `writeLength` - Indicates the string length actually written to the buffer
    /// when returning [`ARKUI_ERROR_CODE_NO_ERROR`].
    /// Indicates the minimum buffer size that can accommodate the target
    /// when [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] is returned.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node, buffer or writeLength is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in Navigation.
    /// [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] If the buffer size is less than the minimum buffer size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavDestinationId(
        node: ArkUI_NodeHandle,
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUiResult;
    /// Obtain the state of the NavDestination component where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `state` - The state value of NavDestination is written back into this parameter.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node or state is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in Navigation.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavDestinationState(
        node: ArkUI_NodeHandle,
        state: *mut ArkUI_NavDestinationState,
    ) -> ArkUiResult;
    /// Obtain the index of the NavDestination component on the Navigation stack where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `index` - Index value, counted from 0.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node or index is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in Navigation.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavDestinationIndex(node: ArkUI_NodeHandle, index: *mut i32) -> ArkUiResult;
    /// Obtain the parameters of the NavDestination component where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// # Returns
    ///
    /// * The parameters.
    /// If a null pointer is returned, it may be because the node is empty or the parameters does not exist.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetNavDestinationParam(node: ArkUI_NodeHandle) -> napi_value;
    /// Obtain the index of the page where the node resides in the Router page stack.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `index` - Index value, counted from 1.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node or index is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in RouterPage.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetRouterPageIndex(node: ArkUI_NodeHandle, index: *mut i32) -> ArkUiResult;
    /// Obtain the name of the page where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `buffer` - The buffer to which page name writes to the memory,
    /// memory space needs to be allocated by the developer.
    ///
    /// * `bufferSize` - The buffer size
    ///
    /// * `writeLength` - Indicates the string length actually written to the buffer
    /// when returning [`ARKUI_ERROR_CODE_NO_ERROR`].
    /// Indicates the minimum buffer size that can accommodate the target
    /// when [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] is returned.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node, buffer or writeLength is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in RouterPage.
    /// [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] If the buffer size is less than the minimum buffer size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetRouterPageName(
        node: ArkUI_NodeHandle,
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUiResult;
    /// Obtain the path of the page where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `buffer` - The buffer to which page path writes to the memory,
    /// memory space needs to be allocated by the developer.
    ///
    /// * `bufferSize` - The buffer size
    ///
    /// * `writeLength` - Indicates the string length actually written to the buffer
    /// when returning [`ARKUI_ERROR_CODE_NO_ERROR`].
    /// Indicates the minimum buffer size that can accommodate the target
    /// when [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] is returned.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node, buffer or writeLength is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in RouterPage.
    /// [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] If the buffer size is less than the minimum buffer size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetRouterPagePath(
        node: ArkUI_NodeHandle,
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUiResult;
    /// Obtain the state of the page where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `state` - The state value of the page is written back to this parameter.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node or state is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in RouterPage.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetRouterPageState(
        node: ArkUI_NodeHandle,
        state: *mut ArkUI_RouterPageState,
    ) -> ArkUiResult;
    /// Obtain the ID of the page where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// * `buffer` - The buffer to which page ID writes to the memory,
    /// memory space needs to be allocated by the developer.
    ///
    /// * `bufferSize` - The buffer size
    ///
    /// * `writeLength` - Indicates the string length actually written to the buffer
    /// when returning [`ARKUI_ERROR_CODE_NO_ERROR`].
    /// Indicates the minimum buffer size that can accommodate the target
    /// when [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] is returned.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] if the node, buffer or writeLength is null.
    /// [`ARKUI_ERROR_CODE_GET_INFO_FAILED`] if query information failed,
    /// this may be because the node is not in RouterPage.
    /// [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] If the buffer size is less than the minimum buffer size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetRouterPageId(
        node: ArkUI_NodeHandle,
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> ArkUiResult;
}
