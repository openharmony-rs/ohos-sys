// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_type::*;
use crate::ui_input_event::ArkUI_UIInputEvent;
#[cfg(feature = "api-15")]
use ohos_sys_opaque_types::OH_PixelmapNative;

#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_NodeType {
    /// Custom node.
    pub const ARKUI_NODE_CUSTOM: ArkUI_NodeType = ArkUI_NodeType(0);
    /// Text.
    pub const ARKUI_NODE_TEXT: ArkUI_NodeType = ArkUI_NodeType(1);
    /// Text span.
    pub const ARKUI_NODE_SPAN: ArkUI_NodeType = ArkUI_NodeType(2);
    /// Image span.
    pub const ARKUI_NODE_IMAGE_SPAN: ArkUI_NodeType = ArkUI_NodeType(3);
    /// Image.
    pub const ARKUI_NODE_IMAGE: ArkUI_NodeType = ArkUI_NodeType(4);
    /// Toggle.
    pub const ARKUI_NODE_TOGGLE: ArkUI_NodeType = ArkUI_NodeType(5);
    /// Loading icon.
    pub const ARKUI_NODE_LOADING_PROGRESS: ArkUI_NodeType = ArkUI_NodeType(6);
    /// Single-line text input.
    pub const ARKUI_NODE_TEXT_INPUT: ArkUI_NodeType = ArkUI_NodeType(7);
    /// Multi-line text input.
    pub const ARKUI_NODE_TEXT_AREA: ArkUI_NodeType = ArkUI_NodeType(8);
    /// Button.
    pub const ARKUI_NODE_BUTTON: ArkUI_NodeType = ArkUI_NodeType(9);
    /// Progress indicator.
    pub const ARKUI_NODE_PROGRESS: ArkUI_NodeType = ArkUI_NodeType(10);
    /// Check box.
    pub const ARKUI_NODE_CHECKBOX: ArkUI_NodeType = ArkUI_NodeType(11);
    /// XComponent.
    pub const ARKUI_NODE_XCOMPONENT: ArkUI_NodeType = ArkUI_NodeType(12);
    /// Date picker.
    pub const ARKUI_NODE_DATE_PICKER: ArkUI_NodeType = ArkUI_NodeType(13);
    /// Time picker.
    pub const ARKUI_NODE_TIME_PICKER: ArkUI_NodeType = ArkUI_NodeType(14);
    /// Text picker.
    pub const ARKUI_NODE_TEXT_PICKER: ArkUI_NodeType = ArkUI_NodeType(15);
    /// Calendar picker.
    pub const ARKUI_NODE_CALENDAR_PICKER: ArkUI_NodeType = ArkUI_NodeType(16);
    /// Slider.
    pub const ARKUI_NODE_SLIDER: ArkUI_NodeType = ArkUI_NodeType(17);
    /// Radio
    pub const ARKUI_NODE_RADIO: ArkUI_NodeType = ArkUI_NodeType(18);
    /// Image animator.
    pub const ARKUI_NODE_IMAGE_ANIMATOR: ArkUI_NodeType = ArkUI_NodeType(19);
    /// XComponent of type TEXTURE.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const ARKUI_NODE_XCOMPONENT_TEXTURE: ArkUI_NodeType = ArkUI_NodeType(20);
    /// Check box group.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const ARKUI_NODE_CHECKBOX_GROUP: ArkUI_NodeType = ArkUI_NodeType(21);
    /// Stack container.
    pub const ARKUI_NODE_STACK: ArkUI_NodeType = ArkUI_NodeType(1000);
    /// Swiper.
    pub const ARKUI_NODE_SWIPER: ArkUI_NodeType = ArkUI_NodeType(1001);
    /// Scrolling container.
    pub const ARKUI_NODE_SCROLL: ArkUI_NodeType = ArkUI_NodeType(1002);
    /// List.
    pub const ARKUI_NODE_LIST: ArkUI_NodeType = ArkUI_NodeType(1003);
    /// List item.
    pub const ARKUI_NODE_LIST_ITEM: ArkUI_NodeType = ArkUI_NodeType(1004);
    /// List item group.
    pub const ARKUI_NODE_LIST_ITEM_GROUP: ArkUI_NodeType = ArkUI_NodeType(1005);
    /// Column container.
    pub const ARKUI_NODE_COLUMN: ArkUI_NodeType = ArkUI_NodeType(1006);
    /// Row container.
    pub const ARKUI_NODE_ROW: ArkUI_NodeType = ArkUI_NodeType(1007);
    /// Flex container.
    pub const ARKUI_NODE_FLEX: ArkUI_NodeType = ArkUI_NodeType(1008);
    /// Refresh component.
    pub const ARKUI_NODE_REFRESH: ArkUI_NodeType = ArkUI_NodeType(1009);
    /// Water flow container.
    pub const ARKUI_NODE_WATER_FLOW: ArkUI_NodeType = ArkUI_NodeType(1010);
    /// Water flow item.
    pub const ARKUI_NODE_FLOW_ITEM: ArkUI_NodeType = ArkUI_NodeType(1011);
    /// Relative layout component.
    pub const ARKUI_NODE_RELATIVE_CONTAINER: ArkUI_NodeType = ArkUI_NodeType(1012);
    /// Grid.
    pub const ARKUI_NODE_GRID: ArkUI_NodeType = ArkUI_NodeType(1013);
    /// Grid item.
    pub const ARKUI_NODE_GRID_ITEM: ArkUI_NodeType = ArkUI_NodeType(1014);
    /// Custom span.
    pub const ARKUI_NODE_CUSTOM_SPAN: ArkUI_NodeType = ArkUI_NodeType(1015);
}
#[repr(transparent)]
/// Enumerates ArkUI component types that can be created on the native side.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_NodeType(pub ::core::ffi::c_uint);
/// Defines the general input parameter structure of the [`setAttribute`] function.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AttributeItem {
    /// Numeric array.
    pub value: *const ArkUI_NumberValue,
    /// Size of the numeric array.
    pub size: i32,
    /// String type.
    pub string: *const ::core::ffi::c_char,
    /// Object type.
    pub object: *mut ::core::ffi::c_void,
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_NodeAttributeType {
    /// Defines the width attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: width, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: width, in vp.
    pub const NODE_WIDTH: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(0);
    /// Defines the height attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: height, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: height, in vp.
    pub const NODE_HEIGHT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1);
    /// Defines the background color attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: background color. The value is in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: background color. The value is in 0xARGB format. For example, 0xFFFF0000 indicates red.
    pub const NODE_BACKGROUND_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(2);
    /// Defines the background image attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: image address;
    ///
    /// .value[0]?.i32: whether to repeat the image. Optional. The parameter type is [`ArkUI_ImageRepeat`].
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`]. Either .string or .object must be set.
    ///
    /// The default value is <b>ARKUI_IMAGE_REPEAT_NONE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: image address;
    ///
    /// .value[0].i32: whether to repeat the image. The parameter type is [`ArkUI_ImageRepeat`].
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`].
    pub const NODE_BACKGROUND_IMAGE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(3);
    /// Defines the padding attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// There are two formats of [`ArkUI_AttributeItem`] for setting the attribute value:
    ///
    /// 1: Specify the same padding for the four directions.
    ///
    /// .value[0].f32: padding, in vp.
    ///
    /// 2: Specify different paddings for different directions.
    ///
    /// .value[0].f32: top padding, in vp.
    ///
    /// .value[1].f32: right padding, in vp.
    ///
    /// .value[2].f32: bottom padding, in vp.
    ///
    /// .value[3].f32: left padding, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: top padding, in vp.
    ///
    /// .value[1].f32: right padding, in vp.
    ///
    /// .value[2].f32: bottom padding, in vp.
    ///
    /// .value[3].f32: left padding, in vp.
    pub const NODE_PADDING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4);
    /// Defines the component ID attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: component ID.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: component ID.
    pub const NODE_ID: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(5);
    /// Defines the interactivity attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The value <b>true</b> means that the component can interact with users, and <b>false</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means that the component can interact with users, and <b>0</b> means the opposite.
    pub const NODE_ENABLED: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(6);
    /// Defines the margin attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// There are two formats of [`ArkUI_AttributeItem`] for setting the attribute value:
    ///
    /// 1: Specify the same margin for the four directions.
    ///
    /// .value[0].f32: margin, in vp.
    ///
    /// 2: Specify different margins for different directions.
    ///
    /// .value[0].f32: top margin, in vp.
    ///
    /// .value[1].f32: right margin, in vp.
    ///
    /// .value[2].f32: bottom margin, in vp.
    ///
    /// .value[3].f32: left margin, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: top margin, in vp.
    ///
    /// .value[1].f32: right margin, in vp.
    ///
    /// .value[2].f32: bottom margin, in vp.
    ///
    /// .value[3].f32: left margin, in vp.
    pub const NODE_MARGIN: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7);
    /// Defines the translate attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: distance to translate along the x-axis, in vp. The default value is <b>0</b>.
    ///
    /// .value[1].f32: distance to translate along the y-axis, in vp. The default value is <b>0</b>.
    ///
    /// .value[2].f32: distance to translate along the z-axis, in vp. The default value is <b>0</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: distance to translate along the x-axis, in vp.
    ///
    /// .value[1].f32: distance to translate along the y-axis, in vp.
    ///
    /// .value[2].f32: distance to translate along the z-axis, in vp.
    pub const NODE_TRANSLATE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8);
    /// Defines the scale attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: scale factor along the x-axis. The default value is <b>1</b>.
    ///
    /// .value[1].f32: scale factor along the y-axis. The default value is <b>1</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: scale factor along the x-axis.
    ///
    /// .value[1].f32: scale factor along the y-axis.
    pub const NODE_SCALE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(9);
    /// Defines the rotate attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: X coordinate of the rotation axis vector. The default value is <b>0</b>.
    ///
    /// .value[1].f32: Y coordinate of the rotation axis vector. The default value is <b>0</b>.
    ///
    /// .value[2].f32: Z coordinate of the rotation axis vector. The default value is <b>0</b>.
    ///
    /// .value[3].f32: rotation angle. The default value is <b>0</b>.
    ///
    /// .value[4].f32: line of sight, that is, the distance from the viewpoint to the z=0 plane, in vp.
    /// The default value is <b>0</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: X coordinate of the rotation axis vector.
    ///
    /// .value[1].f32: Y coordinate of the rotation axis vector.
    ///
    /// .value[2].f32: Z coordinate of the rotation axis vector.
    ///
    /// .value[3].f32: rotation angle.
    ///
    /// .value[4].f32: line of sight, that is, the distance from the viewpoint to the z=0 plane, in vp.
    pub const NODE_ROTATE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(10);
    /// Sets the brightness attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: brightness value. The default value is <b>1.0</b>, and the recommended value range is [0, 2].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: brightness value.
    pub const NODE_BRIGHTNESS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(11);
    /// Sets the saturation attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: saturation value. The default value is <b>1.0</b>, and the recommended value range is [0, 50).
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: saturation value.
    pub const NODE_SATURATION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(12);
    /// Sets the blur attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: blur radius. A larger value indicates a higher blur degree. If the value is <b>0</b>,
    /// the component is not blurred. The unit is vp. The default value is <b>0.0</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: blur radius. The larger the fuzzy radius, the more blurred the image. If the value is <b>0</b>,
    /// the image is not blurred. The unit is vp.
    pub const NODE_BLUR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(13);
    /// Sets the gradient attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: start angle of the linear gradient. This attribute takes effect only when
    /// [`ArkUI_LinearGradientDirection`] is set to <b>ARKUI_LINEAR_GRADIENT_DIRECTION_CUSTOM</b>.
    /// A positive value indicates a clockwise rotation from the origin, (0, 0). The default value is <b>180</b>.
    ///
    /// .value[1].i32: direction of the linear gradient. When it is set, the <b>angle</b> attribute does not take effect.
    /// The parameter type is [`ArkUI_LinearGradientDirection`]:
    ///
    /// .value[2].i32: whether the colors are repeated. The default value is <b>false</b>.
    ///
    /// .object: array of color stops, each of which consists of a color and its stop position.
    /// Invalid colors are automatically skipped.
    ///
    /// colors: colors of the color stops.
    ///
    /// stops: stop positions of the color stops.
    ///
    /// size: number of colors.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: start angle of the linear gradient.
    ///
    /// .value[1].i32: direction of the linear gradient. It does not take effect when <b>angle</b> is set.
    ///
    /// .value[2].i32: whether the colors are repeated.
    ///
    /// .object: array of color stops, each of which consists of a color and its stop position.
    /// Invalid colors are automatically skipped.
    ///
    /// colors: colors of the color stops.
    ///
    /// stops: stop positions of the color stops.
    ///
    /// size: number of colors.
    pub const NODE_LINEAR_GRADIENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(14);
    /// Sets the alignment attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode. The data type is [`ArkUI_Alignment`].
    /// The default value is <b>ARKUI_ALIGNMENT_CENTER</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode. The data type is [`ArkUI_Alignment`].
    pub const NODE_ALIGNMENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(15);
    /// Defines the opacity attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: opacity value. The value ranges from 0 to 1.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: opacity value. The value ranges from 0 to 1.
    pub const NODE_OPACITY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(16);
    /// Defines the border width attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// 1: .value[0].f32: width of the four borders.
    ///
    /// 2: .value[0].f32: width of the top border.
    ///
    /// .value[1].f32: width of the right border.
    ///
    /// .value[2].f32: width of the bottom border.
    ///
    /// .value[3].f32: width of the left border.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: width of the top border.
    ///
    /// .value[1].f32: width of the right border.
    ///
    /// .value[2].f32: width of the bottom border.
    ///
    /// .value[3].f32: width of the left border.
    pub const NODE_BORDER_WIDTH: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17);
    /// Defines the border corner radius attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// 1: .value[0].f32: radius of the four corners.
    ///
    /// 2: .value[0].f32: radius of the upper left corner.
    ///
    /// .value[1].f32: radius of the upper right corner.
    ///
    /// .value[2].f32: radius of the lower left corner.
    ///
    /// .value[3].f32: radius of the lower right corner.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: radius of the upper left corner.
    ///
    /// .value[1].f32: radius of the upper right corner.
    ///
    /// .value[2].f32: radius of the lower left corner.
    ///
    /// .value[3].f32: radius of the lower right corner.
    pub const NODE_BORDER_RADIUS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(18);
    /// Defines the border color attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// 1: .value[0].u32: color of the four borders, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    /// 2: .value[0].u32: color of the top border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    /// .value[1].u32: color of the right border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    /// .value[2].u32: color of the lower border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    /// .value[3].u32: color of the left border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the top border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    /// .value[1].u32: color of the right border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    /// .value[2].u32: color of the lower border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    ///
    /// .value[3].u32: color of the left border, in 0xARGB format, for example, <b>0xFFFF11FF</b>.
    pub const NODE_BORDER_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(19);
    /// Defines the border line style attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// 1: .value[0].i32: line style of the four borders. The parameter type is [`ArkUI_BorderStyle`].
    /// The default value is <b>ARKUI_BORDER_STYLE_SOLID</b>.
    ///
    /// 2: .value[0].i32: line style of the top border. The parameter type is [`ArkUI_BorderStyle`].
    /// The default value is <b>ARKUI_BORDER_STYLE_SOLID</b>.
    ///
    /// .value[1].i32: line style of the right border. The parameter type is [`ArkUI_BorderStyle`].
    /// The default value is <b>ARKUI_BORDER_STYLE_SOLID</b>.
    ///
    /// .value[2].i32: line style of the bottom border. The parameter type is [`ArkUI_BorderStyle`].
    /// The default value is <b>ARKUI_BORDER_STYLE_SOLID</b>.
    ///
    /// .value[3].i32: line style of the left border. The parameter type is [`ArkUI_BorderStyle`].
    /// The default value is <b>ARKUI_BORDER_STYLE_SOLID</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: line style of the top border.
    ///
    /// .value[1].i32: line style of the right border.
    ///
    /// .value[2].i32: line style of the bottom border.
    ///
    /// .value[3].i32: line style of the left border.
    pub const NODE_BORDER_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(20);
    /// Defines the z-index attribute for the stack sequence.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: z-index value.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: z-index value.
    pub const NODE_Z_INDEX: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(21);
    /// Defines the visibility attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to show or hide the component. The parameter type is [`ArkUI_Visibility`].
    /// The default value is <b>ARKUI_VISIBILITY_VISIBLE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to show or hide the component. The parameter type is [`ArkUI_Visibility`].
    /// The default value is <b>ARKUI_VISIBILITY_VISIBLE</b>.
    pub const NODE_VISIBILITY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(22);
    /// Defines the clipping and masking attribute, which can be set, reset, and obtained as required through
    /// APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to clip the component based on the parent container bounds.
    /// The value <b>1</b> means to clip the component, and <b>0</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to clip the component based on the parent container bounds.
    /// The value <b>1</b> means to clip the component, and <b>0</b> means the opposite.
    pub const NODE_CLIP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(23);
    /// Defines the clipping region on the component.
    /// This attribute can be set and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute,
    /// which supports five types of shapes:
    ///
    /// 1. Rectangle:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_RECTANGLE</b> for the rectangle shape.
    ///
    /// .value[1].f32: width of the rectangle.
    ///
    /// .value[2].f32: height of rectangle.
    ///
    /// .value[3].f32: width of the rounded corner of the rectangle.
    ///
    /// .value[4].f32: height of the rounded corner of the rectangle.
    ///
    /// .value[5]?.f32: radius of the top left corner of the rectangular shape.
    ///
    /// .value[6]?.f32: radius of the bottom left corner of the rectangular shape.
    ///
    /// .value[7]?.f32: radius of the top right corner of the rectangular shape.
    ///
    /// .value[8]?.f32: radius of the bottom right corner of the rectangular shape.
    ///
    /// 2. Circle:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_CIRCLE</b> for the circle shape.
    ///
    /// .value[1].f32: width of the circle.
    ///
    /// .value[2].f32: height of the circle.
    ///
    /// 3.Ellipse:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_ELLIPSE</b> for the ellipse shape.
    ///
    /// .value[1].f32: width of the ellipse.
    ///
    /// .value[2].f32: height of the ellipse.
    ///
    /// 4. Path:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_PATH</b> for the path shape.
    ///
    /// .value[1].f32: width of the path.
    ///
    /// .value[2].f32: height of the path.
    ///
    /// .string: command for drawing the path.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`], which supports five types of shapes:
    ///
    /// 1. Rectangle:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_RECTANGLE</b> for the rectangle shape.
    ///
    /// .value[1].f32: width of the rectangle.
    ///
    /// .value[2].f32: height of rectangle.
    ///
    /// .value[3].f32: width of the rounded corner of the rectangle.
    ///
    /// .value[4].f32: height of the rounded corner of the rectangle.
    ///
    /// .value[5].f32: radius of the top left corner of the rectangular shape;
    ///
    /// .value[6].f32: radius of the bottom left corner of the rectangular shape;
    ///
    /// .value[7].f32: radius of the top right corner of the rectangular shape;
    ///
    /// .value[8].f32: radius of the bottom right corner of the rectangular shape;
    ///
    /// 2. Circle:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_CIRCLE</b> for the circle shape.
    ///
    /// .value[1].f32: width of the circle.
    ///
    /// .value[2].f32: height of the circle.
    ///
    /// 3.Ellipse:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_ELLIPSE</b> for the ellipse shape.
    ///
    /// .value[1].f32: width of the ellipse.
    ///
    /// .value[2].f32: height of the ellipse.
    ///
    /// 4. Path:
    ///
    /// .value[0].i32: type of shape. The parameter type is [`ArkUI_ClipType`].
    /// The value is <b>ARKUI_CLIP_TYPE_PATH</b> for the path shape.
    ///
    /// .value[1].f32: width of the path.
    ///
    /// .value[2].f32: height of the path.
    ///
    /// .string: command for drawing the path.
    pub const NODE_CLIP_SHAPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(24);
    /// Defines the transform attribute, which can be used to translate, rotate, and scale images.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0...15].f32: 16 floating-point numbers.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0...15].f32: 16 floating-point numbers.
    pub const NODE_TRANSFORM: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(25);
    /// Defines the hit test behavior attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: hit test mode. The parameter type is [`ArkUI_HitTestMode`].
    /// The default value is <b>ARKUI_HIT_TEST_MODE_DEFAULT</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: hit test mode. The parameter type is [`ArkUI_HitTestMode`].
    /// The default value is <b>ARKUI_HIT_TEST_MODE_DEFAULT</b>.
    pub const NODE_HIT_TEST_BEHAVIOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(26);
    /// Defines the offset attribute, which specifies the offset of the component's upper left corner relative
    /// to the parent container's. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: X coordinate.
    ///
    /// .value[1].f32: Y coordinate.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: X coordinate.
    ///
    /// .value[1].f32: Y coordinate.
    pub const NODE_POSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(27);
    /// Defines the shadow attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: shadow effect. The parameter type is [`ArkUI_ShadowStyle`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: shadow effect. The parameter type is [`ArkUI_ShadowStyle`].
    pub const NODE_SHADOW: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(28);
    /// Defines the custom shadow effect. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.f32: blur radius of the shadow, in vp.
    ///
    /// .value[1]?.i32: whether to enable the coloring strategy. The value <b>1</b> means to enable the coloring
    /// strategy, and <b>0</b> (default value) means the opposite.
    ///
    /// .value[2]?.f32: offset of the shadow along the x-axis, in px.
    ///
    /// .value[3]?.f32: offset of the shadow along the y-axis, in px.
    ///
    /// .value[4]?.i32: shadow type [`ArkUI_ShadowType`]. The default value is <b>ARKUI_SHADOW_TYPE_COLOR</b>.
    ///
    /// .value[5]?.u32: shadow color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    /// .value[6]?.u32: whether to fill the shadow. The value <b>1</b> means to fill the shadow, and <b>0</b>
    /// means the opposite.
    ///
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: blur radius of the shadow, in vp.
    ///
    /// .value[1].i32: whether to enable the coloring strategy.
    ///
    /// .value[2].f32: offset of the shadow along the x-axis, in px.
    ///
    /// .value[3].f32: offset of the shadow along the y-axis, in px.
    ///
    /// .value[4].i32: shadow type [`ArkUI_ShadowType`]. The default value is <b>ARKUI_SHADOW_TYPE_COLOR</b>.
    ///
    /// .value[5].u32: shadow color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    /// .value[6].u32: whether to fill the shadow. The value <b>1</b> means to fill the shadow, and <b>0</b>
    /// means the opposite.
    pub const NODE_CUSTOM_SHADOW: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(29);
    /// Defines the background image width and height.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: width of the image. The value range is [0, +∞), and the unit is vp.
    ///
    /// .value[1].f32: height of the image. The value range is [0, +∞), and the unit is vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: width of the image, in vp.
    ///
    /// .value[1].f32: height of the image, in vp.
    pub const NODE_BACKGROUND_IMAGE_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(30);
    /// Defines the background image size.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: size of the background image. The value is an enum of [`ArkUI_ImageSize`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: size of the background image. The value is an enum of [`ArkUI_ImageSize`].
    pub const NODE_BACKGROUND_IMAGE_SIZE_WITH_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(31);
    /// Defines the background blur attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: blue type. The value is an enum of [`ArkUI_BlurStyle`].
    ///
    /// .value[1]?.i32: color mode. The value is an enum of [`ArkUI_ColorMode`].
    ///
    /// .value[2]?.i32: adaptive color mode. The value is an enum of [`ArkUI_AdaptiveColor`].
    ///
    /// .value[3]?.f32: blur degree. The value range is [0.0, 1.0].
    ///
    /// .value[4]?.f32: start boundary of grayscale blur.
    ///
    /// .value[5]?.f32: end boundary of grayscale blur.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: blue type. The value is an enum of [`ArkUI_BlurStyle`].
    ///
    /// .value[1].i32: color mode. The value is an enum of [`ArkUI_ColorMode`].
    ///
    /// .value[2].i32: adaptive color mode. The value is an enum of [`ArkUI_AdaptiveColor`].
    ///
    /// .value[3].f32: blur degree. The value range is [0.0, 1.0].
    ///
    /// .value[4].f32: start boundary of grayscale blur.
    ///
    /// .value[5].f32: end boundary of grayscale blur.
    pub const NODE_BACKGROUND_BLUR_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(32);
    /// Defines the transform center attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.f32: X coordinate of the center point, in vp.
    ///
    /// .value[1]?.f32: Y coordinate of the center point, in vp.
    ///
    /// .value[2]?.f32: Z coordinate of the center point, in vp.
    ///
    /// .value[3]?.f32 : X coordinate of the center point, expressed in a number that represents a percentage.
    /// For example, 0.2 indicates 20%. This attribute overwrites value[0].f32. The default value is <b>0.5f</b>.
    ///
    /// .value[4]?.f32 : Y coordinate of the center point, expressed in a number that represents a percentage.
    /// For example, 0.2 indicates 20%. This attribute overwrites value[1].f32. The default value is <b>0.5f</b>.
    ///
    /// .value[5]?.f32 : Z coordinate of the center point, expressed in a number that represents a percentage.
    /// For example, 0.2 indicates 20%. This attribute overwrites value[2].f32. The default value is <b>0.0f</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: X coordinate of the center point, in vp.
    ///
    /// .value[1].f32: Y coordinate of the center point, in vp.
    ///
    /// .value[2].f32: Z coordinate of the center point, in vp.
    ///
    /// Note: If the coordinate is expressed in a number that represents a percentage, the attribute obtaining API
    /// returns the calculated value in vp.
    pub const NODE_TRANSFORM_CENTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(33);
    /// Defines the transition opacity attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: opacity values of the start and end points.
    ///
    /// .value[1].i32: animation duration, in milliseconds.
    ///
    /// .value[2].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    /// .value[3]?.i32: animation delay duration, in milliseconds.
    ///
    /// .value[4]?.i32: number of times that the animation is played.
    ///
    /// .value[5]?.i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[6]?.f32: animation playback speed.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: opacity values of the start and end points.
    ///
    /// .value[1].i32: animation duration, in milliseconds.
    ///
    /// .value[2].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    /// .value[3].i32: animation delay duration, in milliseconds.
    ///
    /// .value[4].i32: number of times that the animation is played.
    ///
    /// .value[5].i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[6].f32: animation playback speed.
    pub const NODE_OPACITY_TRANSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(34);
    /// Defines the transition rotation attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: X-component of the rotation vector.
    ///
    /// .value[1].f32: Y-component of the rotation vector.
    ///
    /// .value[2].f32: Z-component of the rotation vector
    ///
    /// .value[3].f32: angle.
    ///
    /// .value[4].f32: line of sight. The default value is <b>0.0f</b>.
    ///
    /// .value[5].i32: animation duration, in milliseconds.
    ///
    /// .value[6].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    ///
    /// .value[7]?.i32: animation delay duration, in milliseconds.
    ///
    /// .value[8]?.i32: number of times that the animation is played.
    ///
    /// .value[9]?.i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[10]?.f32: animation playback speed.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: X-component of the rotation vector.
    ///
    /// .value[1].f32: Y-component of the rotation vector.
    ///
    /// .value[2].f32: Z-component of the rotation vector
    ///
    /// .value[3].f32: angle.
    ///
    /// .value[4].f32: line of sight.
    ///
    /// .value[5].i32: animation duration, in milliseconds.
    ///
    /// .value[6].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    ///
    /// .value[7].i32: animation delay duration, in milliseconds.
    ///
    /// .value[8].i32: number of times that the animation is played.
    ///
    /// .value[9].i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[10].f32: animation playback speed.
    pub const NODE_ROTATE_TRANSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(35);
    /// Defines the transition scaling attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: scale factor along the x-axis.
    ///
    /// .value[1].f32: scale factor along the y-axis.
    ///
    /// .value[2].f32: scale factor along the z-axis.
    ///
    /// .value[3].i32: animation duration, in milliseconds.
    ///
    /// .value[4].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    ///
    /// .value[5]?.i32: animation delay duration, in milliseconds.
    ///
    /// .value[6]?.i32: number of times that the animation is played.
    ///
    /// .value[7]?.i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[8]?.f32: animation playback speed.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: scale factor along the x-axis.
    ///
    /// .value[1].f32: scale factor along the y-axis.
    ///
    /// .value[2].f32: scale factor along the z-axis.
    ///
    /// .value[3].i32: animation duration, in milliseconds.
    ///
    /// .value[4].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    ///
    /// .value[5].i32: animation delay duration, in milliseconds.
    ///
    /// .value[6].i32: number of times that the animation is played.
    ///
    /// .value[7].i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[8].f32: animation playback speed.
    pub const NODE_SCALE_TRANSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(36);
    /// Defines the transition translation attribute.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// value[0].f32: translation distance along the x-axis, in vp.
    ///
    /// value[1].f32: translation distance along the y-axis, in vp.
    ///
    /// value[2].f32: translation distance along the z-axis, in vp.
    ///
    /// value[3].i32: animation duration, in milliseconds.
    ///
    /// value[4].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    ///
    /// value[5]?.i32: animation delay duration, in milliseconds.
    ///
    /// value[6]?.i32: number of times that the animation is played.
    ///
    /// value[7]?.i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// value[8]?.f32: animation playback speed.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].f32: translation distance along the x-axis, in vp.
    ///
    /// value[1].f32: translation distance along the y-axis, in vp.
    ///
    /// value[2].f32: translation distance along the z-axis, in vp.
    ///
    /// value[3].i32: animation duration, in milliseconds.
    ///
    /// value[4].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    ///
    /// value[5].i32: animation delay duration, in milliseconds.
    ///
    /// value[6].i32: number of times that the animation is played.
    ///
    /// value[7].i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// value[8].f32: animation playback speed.
    pub const NODE_TRANSLATE_TRANSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(37);
    /// Defines the slide-in and slide-out of the component from the screen edge during transition.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_TransitionEdge`].
    ///
    /// .value[1].i32: animation duration, in milliseconds.
    ///
    /// .value[2].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    /// .value[3]?.i32: animation delay duration, in milliseconds.
    ///
    /// .value[4]?.i32: number of times that the animation is played.
    ///
    /// .value[5]?.i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[6]?.f32: animation playback speed.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_TransitionEdge`].
    ///
    /// .value[1].i32: animation duration, in milliseconds.
    ///
    /// .value[2].i32: animation curve type. The value is an enum of [`ArkUI_AnimationCurve`].
    ///
    /// .value[3].i32: animation delay duration, in milliseconds.
    ///
    /// .value[4].i32: number of times that the animation is played.
    ///
    /// .value[5].i32: animation playback mode. The value is an enum of [`ArkUI_AnimationPlayMode`].
    ///
    /// .value[6].f32: animation playback speed.
    pub const NODE_MOVE_TRANSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(38);
    /// Defines the focus attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    pub const NODE_FOCUSABLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(39);
    /// Defines the default focus attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// value[0].i32: The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].i32: The parameter type is 1 or 0.
    pub const NODE_DEFAULT_FOCUS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(40);
    /// Defines the touch target attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .data[0].f32: X coordinate of the touch point relative to the upper left corner of the component, in vp.
    ///
    /// .data[1].f32: Y coordinate of the touch point relative to the upper left corner of the component, in vp.
    ///
    /// .data[2].f32: width of the touch target, in %.
    ///
    /// .data[3].f32: height of the touch target, in %.
    ///
    /// .data[4...].f32: Multiple touch targets can be set. The sequence of the parameters is the same as the preceding.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .data[0].f32: X coordinate of the touch point relative to the upper left corner of the component, in vp.
    ///
    /// .data[1].f32: Y coordinate of the touch point relative to the upper left corner of the component, in vp.
    ///
    /// .data[2].f32: width of the touch target, in %.
    ///
    /// .data[3].f32: height of the touch target, in %.
    ///
    /// .data[4...].f32: Multiple touch targets can be set. The sequence of the parameters is the same as the preceding.
    pub const NODE_RESPONSE_REGION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(41);
    /// Defines the overlay attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: mask text.
    ///
    /// .value[0]?.i32: position of the overlay relative to the component. Optional.
    /// The parameter type is [`ArkUI_Alignment`].
    /// The default value is <b>ARKUI_ALIGNMENT_TOP_START.</b>
    ///
    /// .value[1]?.f32: offset of the overlay relative to the upper left corner of itself on the x-axis, in vp. Optional.
    ///
    /// .value[2]?.f32: offset of the overlay relative to the upper left corner of itself on the y-axis, in vp. Optional.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: mask text.
    ///
    /// .value[0].i32: position of the overlay relative to the component.
    /// The parameter type is [`ArkUI_Alignment`].
    /// The default value is <b>ARKUI_ALIGNMENT_TOP_START.</b>
    ///
    /// .value[1].f32: offset of the overlay relative to the upper left corner of itself on the x-axis, in vp.
    ///
    /// .value[2].f32: offset of the overlay relative to the upper left corner of itself on the y-axis, in vp.
    pub const NODE_OVERLAY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(42);
    /// Defines the sweep gradient effect.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.f32: X coordinate of the sweep gradient center relative to the upper left corner of the component.
    ///
    /// .value[1]?.f32: Y coordinate of the sweep gradient center relative to the upper left corner of the component.
    ///
    /// .value[2]?.f32: start point of the sweep gradient. The default value is <b>0</b>.
    ///
    /// .value[3]?.f32: end point of the sweep gradient. The default value is <b>0</b>.
    ///
    /// .value[4]?.f32: rotation angle of the sweep gradient. The default value is <b>0</b>.
    ///
    /// .value[5]?.i32: whether the colors are repeated. The value <b>1</b> means that the colors are repeated,
    /// and <b>0</b> means the opposite.
    ///
    /// .object: array of color stops, each of which consists of a color and its stop position. Invalid colors are
    /// automatically skipped.
    ///
    /// colors: colors of the color stops.
    ///
    /// stops: stop positions of the color stops.
    ///
    /// size: number of colors.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: X coordinate of the sweep gradient center relative to the upper left corner of the component.
    ///
    /// .value[1].f32: Y coordinate of the sweep gradient center relative to the upper left corner of the component.
    ///
    /// .value[2].f32: start point of the sweep gradient. The default value is <b>0</b>.
    ///
    /// .value[3].f32: end point of the sweep gradient. The default value is <b>0</b>.
    ///
    /// .value[4].f32: rotation angle of the sweep gradient. The default value is <b>0</b>.
    ///
    /// .value[5].i32: whether the colors are repeated. The value <b>1</b> means that the colors are repeated,
    /// and <b>0</b> means the opposite.
    ///
    /// .object: array of color stops, each of which consists of a color and its stop position. Invalid colors are
    /// automatically skipped.
    ///
    /// colors: colors of the color stops.
    ///
    /// stops: stop positions of the color stops.
    ///
    /// size: number of colors.
    pub const NODE_SWEEP_GRADIENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(43);
    /// Defines the radial gradient effect.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.f32: X coordinate of the radial gradient center relative to the upper left corner of the component.
    ///
    /// .value[1]?.f32: Y coordinate of the radial gradient center relative to the upper left corner of the component.
    ///
    /// .value[2]?.f32: radius of the radial gradient. The default value is <b>0</b>.
    ///
    /// .value[3]?.i32: whether the colors are repeated. The value <b>1</b> means that the colors are repeated,
    /// and <b>0</b> means the opposite.
    ///
    /// .object: array of color stops, each of which consists of a color and its stop position. Invalid colors are
    /// automatically skipped.
    ///
    /// colors: colors of the color stops.
    ///
    /// stops: stop positions of the color stops.
    ///
    /// size: number of colors.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: X coordinate of the radial gradient center relative to the upper left corner of the component.
    ///
    /// .value[1].f32: Y coordinate of the radial gradient center relative to the upper left corner of the component.
    ///
    /// .value[2].f32: radius of the radial gradient. The default value is <b>0</b>.
    ///
    /// .value[3].i32: whether the colors are repeated. The value <b>1</b> means that the colors are repeated,
    /// and <b>0</b> means the opposite.
    ///
    /// .object: array of color stops, each of which consists of a color and its stop position. Invalid colors are
    /// automatically skipped.
    ///
    /// colors: colors of the color stops.
    ///
    /// stops: stop positions of the color stops.
    ///
    /// size: number of colors.
    pub const NODE_RADIAL_GRADIENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(44);
    /// Adds a mask of the specified shape to the component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute, which supports five types of
    /// shapes:
    ///
    /// 1. Rectangle:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type. The parameter type is [`ArkUI_MaskType`].
    /// The value is <b>ARKUI_MASK_TYPE_RECTANGLE</b> for the rectangle shape.
    ///
    /// .value[4].f32: width of the rectangle.
    ///
    /// .value[5].f32: height of the rectangle.
    ///
    /// .value[6].f32: width of the rounded corner of the rectangle.
    ///
    /// .value[7].f32: height of the rounded corner of the rectangle.
    ///
    /// .value[8]?.f32: radius of the top left corner of the rectangular shape.
    ///
    /// .value[9]?.f32: radius of the bottom left corner of the rectangular shape.
    ///
    /// .value[10]?.f32: radius of the top right corner of the rectangular shape.
    ///
    /// .value[11]?.f32: radius of the bottom right corner of the rectangular shape.
    ///
    /// 2. Circle:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type. The parameter type is [`ArkUI_MaskType`].
    /// The value is <b>ARKUI_MASK_TYPE_CIRCLE</b> for the circle shape.
    ///
    /// .value[4].f32: width of the circle.
    ///
    /// .value[5].f32: height of the circle.
    ///
    /// 3. Ellipse:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type. The parameter type is [`ArkUI_MaskType`].
    /// The value is <b>ARKUI_MASK_TYPE_ELLIPSE</b> for the ellipse shape.
    ///
    /// .value[4].f32: width of the ellipse.
    ///
    /// .value[5].f32: height of the ellipse.
    ///
    /// 4. Path:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type. The parameter type is [`ArkUI_MaskType`].
    /// The value is <b>ARKUI_MASK_TYPE_PATH</b> for the path shape.
    ///
    /// .value[4].f32: width of the path.
    ///
    /// .value[5].f32: height of the path.
    ///
    /// .string: command for drawing the path.
    ///
    /// 5. Progress:
    ///
    /// .value[0].i32: mask type. The parameter type is [`ArkUI_MaskType`].
    /// The value is <b>ARKUI_MASK_TYPE_PROGRESS</b> for the progress shape.
    ///
    /// .value[1].f32: current value of the progress indicator.
    ///
    /// .value[2].f32: maximum value of the progress indicator.
    ///
    /// .value[3].u32: color of the progress indicator, in 0xARGB format.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`], which supports five types of shapes:
    ///
    /// 1. Rectangle:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type.
    ///
    /// .value[4].f32: width of the rectangle.
    ///
    /// .value[5].f32: height of the rectangle.
    ///
    /// .value[6].f32: width of the rounded corner of the rectangle.
    ///
    /// .value[7].f32: height of the rounded corner of the rectangle.
    ///
    /// .value[8].f32: radius of the top left corner of the rectangular shape.
    ///
    /// .value[9].f32: radius of the bottom left corner of the rectangular shape.
    ///
    /// .value[10].f32: radius of the top right corner of the rectangular shape.
    ///
    /// .value[11].f32: radius of the bottom right corner of the rectangular shape.
    ///
    /// 2. Circle:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type.
    ///
    /// .value[4].f32: width of the circle.
    ///
    /// .value[5].f32: height of the circle.
    ///
    /// 3. Ellipse:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type.
    ///
    /// .value[4].f32: width of the ellipse.
    ///
    /// .value[5].f32: height of the ellipse.
    ///
    /// 4. Path:
    ///
    /// .value[0].u32 fill color, in 0xARGB format.
    ///
    /// .value[1].u32: stroke color, in 0xARGB format.
    ///
    /// .value[2].f32: stroke width, in vp.
    ///
    /// .value[3].i32: mask type.
    ///
    /// .value[4].f32: width of the path.
    ///
    /// .value[5].f32: height of the path.
    ///
    /// .string: command for drawing the path.
    ///
    /// 5. Progress:
    ///
    /// .value[0].i32: mask type.
    ///
    /// .value[1].f32: current value of the progress indicator.
    ///
    /// .value[2].f32: maximum value of the progress indicator.
    ///
    /// .value[3].u32: color of the progress indicator.
    pub const NODE_MASK: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(45);
    /// Blends the component's background with the content of the component's child node.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: blend mode. The parameter type is [`ArkUI_BlendMode`]. The default value is
    /// <b>ARKUI_BLEND_MODE_NONE</b>.
    ///
    /// .value[1].?i32: how the specified blend mode is applied. The parameter type is [`ArkUI_BlendApplyType`].
    /// The default value is <b>ARKUI_BLEND_APPLY_TYPE_FAST</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: blend mode. The parameter type is [`ArkUI_BlendMode`]. The default value is
    /// <b>ARKUI_BLEND_MODE_NONE</b>.
    ///
    /// .value[1].i32: how the specified blend mode is applied. The parameter type is [`ArkUI_BlendApplyType`].
    /// The default value is <b>ARKUI_BLEND_APPLY_TYPE_FAST</b>.
    pub const NODE_BLEND_MODE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(46);
    /// Sets the direction of the main axis.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: direction of the main axis.
    ///
    /// The parameter type is [`ArkUI_Direction`]. The default value is <b>ARKUI_DIRECTION_AUTO</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: direction of the main axis.
    ///
    /// The parameter type is [`ArkUI_Direction`]. The default value is <b>ARKUI_DIRECTION_AUTO</b>.
    pub const NODE_DIRECTION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(47);
    /// Defines the size constraints.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: minimum width, in vp.
    ///
    /// .value[1].f32: maximum width, in vp.
    ///
    /// .value[2].f32: minimum height, in vp.
    ///
    /// .value[3].f32: maximum height, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: minimum width, in vp.
    ///
    /// .value[1].f32: maximum width, in vp.
    ///
    /// .value[2].f32: minimum height, in vp.
    ///
    /// .value[3].f32: maximum height, in vp.
    pub const NODE_CONSTRAINT_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(48);
    /// Defines the grayscale effect.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: grayscale conversion ratio. The value ranges from 0 to 1.
    /// For example, 0.5 indicates a 50% grayscale conversion ratio.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: grayscale conversion ratio. The value ranges from 0 to 1.
    pub const NODE_GRAY_SCALE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(49);
    /// Inverts the image.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: image inversion ratio. The value ranges from 0 to 1.
    /// For example, 0.5 indicates a 50% image inversion ratio.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: image inversion ratio. The value ranges from 0 to 1.
    pub const NODE_INVERT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(50);
    /// Defines the sepia conversion ratio.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: sepia conversion ratio. The value ranges from 0 to 1.
    /// For example, 0.5 indicates that a 50% sepia conversion ratio.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: sepia conversion ratio. The value ranges from 0 to 1.
    pub const NODE_SEPIA: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(51);
    /// Defines the contrast attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: contrast. If the value is <b>1</b>, the source image is displayed.
    /// A larger value indicates a higher contrast. Value range: [0, 10).
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: contrast. Value range: [0, 10).
    pub const NODE_CONTRAST: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(52);
    /// Defines the foreground color attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// There are two formats of [`ArkUI_AttributeItem`] for setting the attribute value:
    ///
    /// 1: .value[0].u32: color value, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    /// 2: .value[0].i32: color enum [`ArkUI_ColoringStrategy`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color value, in 0xARGB format.
    pub const NODE_FOREGROUND_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(53);
    /// Defines the offset of the component's child relative to the component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32 : offset along the x-axis, in vp.
    ///
    /// .value[1].f32 : offset along the y-axis, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32 : offset along the x-axis, in vp.
    ///
    /// .value[1].f32 : offset along the y-axis, in vp.
    pub const NODE_OFFSET: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(54);
    /// Sets the anchor for locating the component's child.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: X coordinate of the anchor, in vp.
    ///
    /// .value[1].f32: Y coordinate of the anchor, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: X coordinate of the anchor, in vp.
    ///
    /// .value[1].f32: Y coordinate of the anchor, in vp.
    pub const NODE_MARK_ANCHOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(55);
    /// Defines the position of the background image in the component, that is, the coordinates relative to
    /// the upper left corner of the component. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: position along the x-axis, in px.
    ///
    /// .value[1].f32: position along the y-axis, in px.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: position along the x-axis, in px.
    ///
    /// .value[1].f32: position along the y-axis, in px.
    pub const NODE_BACKGROUND_IMAGE_POSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(56);
    /// Sets the alignment rules in the relative container.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: Use the [`ArkUI_AlignmentRuleOption`] object as the component’s alignment rule.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: Use the [`ArkUI_AlignmentRuleOption`] object as the component’s alignment rule.
    pub const NODE_ALIGN_RULES: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(57);
    /// Sets the alignment mode of the child components along the cross axis of the parent container.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode of the child components along the cross axis of the parent container.
    ///
    /// The parameter type is [`ArkUI_ItemAlignment`]. The default value is <b>ARKUI_ITEM_ALIGNMENT_AUTO</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode of the child components along the cross axis of the parent container.
    ///
    /// The parameter type is [`ArkUI_ItemAlignment`]. The default value is <b>ARKUI_ITEM_ALIGNMENT_AUTO</b>.
    pub const NODE_ALIGN_SELF: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(58);
    /// Sets the percentage of the parent container's remaining space that is allocated to the component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: percentage of the parent container's remaining space that is allocated to the component.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: percentage of the parent container's remaining space that is allocated to the component.
    pub const NODE_FLEX_GROW: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(59);
    /// Sets the percentage of the parent container's shrink size that is allocated to the component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: percentage of the parent container's shrink size that is allocated to the component.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: percentage of the parent container's shrink size that is allocated to the component.
    pub const NODE_FLEX_SHRINK: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(60);
    /// Sets the base size of the component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: percentage of the parent container's remaining space that is allocated to the component.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: percentage of the parent container's remaining space that is allocated to the component.
    pub const NODE_FLEX_BASIS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(61);
    /// Sets the accessibility group. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: Accessibility group. The value <b>1</b> means that the component and all its child components
    /// form an entire selectable component.
    /// In this case, the accessibility service will no longer be available for the content of its child components.
    /// The value is <b>1</b> or <b>0</b>.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: Accessibility group. The value <b>1</b> means that the component and all its child components
    /// form an entire selectable component.
    /// In this case, the accessibility service will no longer be available for the content of its child components.
    /// The value is <b>1</b> or <b>0</b>.
    pub const NODE_ACCESSIBILITY_GROUP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(62);
    /// Sets the accessibility text. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: accessibility text.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: accessibility text.
    pub const NODE_ACCESSIBILITY_TEXT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(63);
    /// Sets the accessibility service model. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: accessibility service model. The parameter type is [`ArkUI_AccessibilityMode`].
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: accessibility service model. The parameter type is [`ArkUI_AccessibilityMode`].
    pub const NODE_ACCESSIBILITY_MODE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(64);
    /// Sets the accessibility description.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: accessibility description.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: accessibility description.
    pub const NODE_ACCESSIBILITY_DESCRIPTION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(65);
    /// Defines the focused state. This attribute can be set and obtained as required through APIs.
    ///
    /// **Note:** Setting the parameter to <b>0</b> shifts focus from the currently focused component on the current level
    /// of the page to the root container.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    pub const NODE_FOCUS_STATUS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(66);
    /// Defines the aspect ratio attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: aspect ratio of the component, in width/height format.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: aspect ratio of the component, in width/height format.
    pub const NODE_ASPECT_RATIO: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(67);
    /// Defines the weight of the component within its row, column, or flex container for proportional
    /// distribution of available space within the container.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: weight of the component along the main axis.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: weight of the component along the main axis.
    pub const NODE_LAYOUT_WEIGHT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(68);
    /// Sets the display priority for the component in the row, column, or flex (single-line) container.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: display priority of the component in the container.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: display priority of the component in the container.
    pub const NODE_DISPLAY_PRIORITY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(69);
    /// Sets the thickness of an element's outline.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: thickness of the left outline.
    ///
    /// .value[1].f32: thickness of the top outline.
    ///
    /// .value[2].f32: thickness of the right outline.
    ///
    /// .value[3].f32: thickness of the bottom outline.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: thickness of the left outline.
    ///
    /// .value[1].f32: thickness of the top outline.
    ///
    /// .value[2].f32: thickness of the right outline.
    ///
    /// .value[3].f32: thickness of the bottom outline.
    pub const NODE_OUTLINE_WIDTH: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(70);
    /// Defines the width attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: width, in percentage.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: width, in percentage.
    pub const NODE_WIDTH_PERCENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(71);
    /// Defines the height attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: height, in percentage.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: height, in percentage.
    pub const NODE_HEIGHT_PERCENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(72);
    /// Defines the padding attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// There are two formats of [`ArkUI_AttributeItem`] for setting the attribute value:
    ///
    /// 1: Specify the same padding for the four directions.
    ///
    /// .value[0].f32: padding, in percentage.
    ///
    /// 2: Specify different paddings for different directions.
    ///
    /// .value[0].f32: top padding, in percentage.
    ///
    /// .value[1].f32: right padding, in percentage.
    ///
    /// .value[2].f32: bottom padding, in percentage.
    ///
    /// .value[3].f32: left padding, in percentage.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: top padding, in percentage.
    ///
    /// .value[1].f32: right padding, in percentage.
    ///
    /// .value[2].f32: bottom padding, in percentage.
    ///
    /// .value[3].f32: left padding, in percentage.
    pub const NODE_PADDING_PERCENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(73);
    /// Defines the margin attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// There are two formats of [`ArkUI_AttributeItem`] for setting the attribute value:
    ///
    /// 1: Specify the same margin for the four directions.
    ///
    /// .value[0].f32: margin, in percentage.
    ///
    /// 2: Specify different margins for different directions.
    ///
    /// .value[0].f32: top margin, in percentage.
    ///
    /// .value[1].f32: right margin, in percentage.
    ///
    /// .value[2].f32: bottom margin, in percentage.
    ///
    /// .value[3].f32: left margin, in percentage.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: top margin, in percentage.
    ///
    /// .value[1].f32: right margin, in percentage.
    ///
    /// .value[2].f32: bottom margin, in percentage.
    ///
    /// .value[3].f32: left margin, in percentage.
    pub const NODE_MARGIN_PERCENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(74);
    /// The implicit shared element transition within the component supports attribute setting,
    /// attribute reset, and attribute acquisition interfaces.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0]?.i32: The parameter type is 1 or 0. 2 components that share element bindings,
    /// Whether to continue to participate in the shared element animation when the appearance element is not deleted,
    /// the default is false, and the original position will remain unchanged if not involved.
    ///
    /// .string is used to set the binding relationship. Set the id to "" to
    /// clear the binding relationship to avoid participating in sharing behavior.
    ///
    /// The id can be changed and the binding relationship re-established.
    /// The same ID can only be bound to two components and they are in/out roles of different types.
    /// Multiple components cannot be bound to the same id.
    ///
    ///
    ///
    /// Attribute acquisition method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: The parameter type is 1 or 0. 2 components that share element bindings,
    /// Whether to continue to participate in the shared element animation when the appearance element is not deleted,
    /// the default is not false, if not involved, the original position will remain unchanged.
    ///
    /// .string is used to set the binding relationship. Set the id to "" to
    /// clear the binding relationship to avoid participating in sharing behavior.
    ///
    /// The id can be changed and the binding relationship re-established.
    /// The same ID can only be bound to two components and they are in/out roles of different types.
    /// Multiple components cannot be bound to the same id.
    pub const NODE_GEOMETRY_TRANSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(75);
    /// specifies the parameters of the chain formed by this component as the chain head,
    /// and supports attribute setting, attribute reset and attribute acquisition interfaces.
    ///
    /// Only takes effect when the parent container is RelativeContainer
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: The direction of the chain. Enum [`ArkUI_Axis`].
    ///
    /// .value[1].i32: Chain style. Enum [`ArkUI_RelativeLayoutChainStyle`].
    ///
    ///
    ///
    /// .value[0].i32: The direction of the chain. Enum [`ArkUI_Axis`].
    ///
    /// .value[1].i32: Chain style. Enum [`ArkUI_RelativeLayoutChainStyle`].
    pub const NODE_RELATIVE_LAYOUT_CHAIN_MODE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(76);
    /// Set the component content filling method in the process of width and height animation,
    /// support property setting, property reset, property acquisition interface.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32 Content filling mode [`ArkUI_RenderFit`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32 Content filling mode [`ArkUI_RenderFit`].
    pub const NODE_RENDER_FIT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(77);
    /// External stroke color properties, support property setting,
    /// property reset and property acquisition interface.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// 1: .value[0].u32: Set the border color of the four sides uniformly, using 0xargb, such as 0xFFFF11FF.
    ///
    /// 2: .value[0].u32: Set the top border color, represented by 0xargb, such as 0xFFFF11FF.
    ///
    /// .value[1].u32: Set the right border color, represented by 0xargb, such as 0xFFFF11FF.
    ///
    /// .value[2].u32: Set the lower side box color, denoted by 0xargb, such as 0xFFFF11FF.
    ///
    /// .value[3].u32: Set the left border color, denoted by 0xargb, such as 0xFFFF11FF.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: Set the top border color, represented by 0xargb, such as 0xFFFF11FF.
    ///
    /// .value[1].u32: Set the right border color, represented by 0xargb, such as 0xFFFF11FF.
    ///
    /// .value[2].u32: Set the lower side box color, denoted by 0xargb, such as 0xFFFF11FF.
    ///
    /// .value[3].u32: Set the left border color, denoted by 0xargb, such as 0xFFFF11FF.
    pub const NODE_OUTLINE_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(78);
    /// Set the height and width dimensions, support property setting,
    /// property reset and property acquisition interface.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: Width value, unit is vp;
    ///
    /// .value[1].f32: Height value, unit is vp;
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: Width value, unit is vp;
    ///
    /// .value[1].f32: Height value, unit is vp;
    pub const NODE_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(79);
    /// Set whether the current component and child component are
    /// rendered off the screen first and then fused with the parent control,
    /// supporting property setting, property reset and property acquisition.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    pub const NODE_RENDER_GROUP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(80);
    /// Add color overlay effect to components, support property setting,
    /// property reset and property acquisition interface.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: The color of the overlay is represented by 0xargb, such as 0xFFFF11FF.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: The color of the overlay is represented by 0xargb, such as 0xFFFF11FF.
    pub const NODE_COLOR_BLEND: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(81);
    /// Provide content ambiguity capability for the current component,
    /// support property setting, property reset, property acquisition interface.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32 Represents the content blurring style, and uses the [`ArkUI_BlurStyle`] enumeration value.
    ///
    /// .value[1]?.i32 Represents the dark and light mode used by the content blur effect,
    ///
    /// with the [`ArkUI_ThemeColorMode`] enumeration value.
    ///
    /// .value[2]?.i32 The color extraction mode used to represent the content blur effect takes
    ///
    /// the [`ArkUI_AdaptiveColor`] enumeration value.
    ///
    /// .value[3]?.f32: blur degree. The value range is [0.0, 1.0].
    ///
    /// .value[4]?.f32 It is a gray-level fuzzy parameter. The value range is [0,127].
    ///
    /// .value[5]?.f32 It is a gray-level fuzzy parameter. The value range is [0,127].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32 Represents the content blurring style, and uses the [`ArkUI_BlurStyle`] enumeration value.
    ///
    /// .value[1].i32 Represents the dark and light mode used by the content blur effect,
    ///
    /// with the [`ArkUI_ThemeColorMode`] enumeration value.
    ///
    /// .value[2].i32 The color extraction mode used to represent the content blur effect takes
    ///
    /// the [`ArkUI_AdaptiveColor`] enumeration value.
    ///
    /// .value[3].f32: blur degree. The value range is [0.0, 1.0].
    ///
    /// .value[4].f32 It is a gray-level fuzzy parameter. The value range is [0,127].
    ///
    /// .value[5].f32 It is a gray-level fuzzy parameter. The value range is [0,127].
    pub const NODE_FOREGROUND_BLUR_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(82);
    /// Defines the component size and position for layout.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: X coordinate of the component, in px.
    ///
    /// .value[1].i32: Y coordinate of the component, in px.
    ///
    /// .value[2].i32: width of the component, in px.
    ///
    /// .value[3].i32: height of the component, in px.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: X coordinate of the component, in px.
    ///
    /// .value[1].i32: Y coordinate of the component, in px.
    ///
    /// .value[2].i32: width of the component, in px.
    ///
    /// .value[3].i32: height of the component, in px.
    pub const NODE_LAYOUT_RECT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(83);
    /// Whether the current component supports click-to-focus capability,
    /// which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    pub const NODE_FOCUS_ON_TOUCH: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(84);
    /// Defines the border width attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// 1: .value[0].f32: width of the four borders, in percentage.
    ///
    /// 2: .value[0].f32: width of the top border, in percentage.
    ///
    /// .value[1].f32: width of the right border, in percentage.
    ///
    /// .value[2].f32: width of the bottom border, in percentage.
    ///
    /// .value[3].f32: width of the left border, in percentage.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: width of the top border, in percentage.
    ///
    /// .value[1].f32: width of the right border, in percentage.
    ///
    /// .value[2].f32: width of the bottom border, in percentage.
    ///
    /// .value[3].f32: width of the left border, in percentage.
    pub const NODE_BORDER_WIDTH_PERCENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(85);
    /// Defines the border corner radius attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// 1: .value[0].f32: radius of the four corners, in percentage.
    ///
    /// 2: .value[0].f32: radius of the upper left corner, in percentage.
    ///
    /// .value[1].f32: radius of the upper right corner, in percentage.
    ///
    /// .value[2].f32: radius of the lower left corner, in percentage.
    ///
    /// .value[3].f32: radius of the lower right corner, in percentage.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: radius of the upper left corner, in percentage.
    ///
    /// .value[1].f32: radius of the upper right corner, in percentage.
    ///
    /// .value[2].f32: radius of the lower left corner, in percentage.
    ///
    /// .value[3].f32: radius of the lower right corner, in percentage.
    pub const NODE_BORDER_RADIUS_PERCENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(86);
    /// Accessible ID, which can be obtained as required through APIs.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32：Accessible ID。
    pub const NODE_ACCESSIBILITY_ID: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(87);
    /// Define accessible actions, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32：accessible action types，and uses the [`ArkUI_AccessibilityActionType`] enumeration value.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32：accessible action types，and uses the [`ArkUI_AccessibilityActionType`] enumeration value.
    pub const NODE_ACCESSIBILITY_ACTIONS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(88);
    /// Define accessible role, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32：accessible role type，and uses the [`ArkUI_NodeType`] enumeration value.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32：accessible role type，and uses the [`ArkUI_NodeType`] enumeration value.
    pub const NODE_ACCESSIBILITY_ROLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(89);
    /// Define accessible state, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object：the parameter type is [`ArkUI_AccessibilityState`].
    ///
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object：the parameter type is [`ArkUI_AccessibilityState`].
    pub const NODE_ACCESSIBILITY_STATE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(90);
    /// Define accessible value, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object：the parameter type is [`ArkUI_AccessibilityValue`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object：the parameter type is [`ArkUI_AccessibilityValue`].
    pub const NODE_ACCESSIBILITY_VALUE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(91);
    /// defines control components to extend their security zones,
    /// supporting property setting, property reset, and property fetching.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0]? .u32: Set of extended security zone enumerated values [`ArkUI_SafeAreaType`],
    /// For example, ARKUI_SAFE_AREA_TYPE_SYSTEM | ARKUI_SAFE_AREA_TYPE_CUTOUT;
    ///
    /// .value[1]? .u32: set of directional enum values for extended security zones [`ArkUI_SafeAreaEdge`];
    ///
    /// For example: ARKUI_SAFE_AREA_EDGE_TOP | ARKUI_SAFE_AREA_EDGE_BOTTOM;
    ///
    ///
    ///
    /// Attribute fetch method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].u32: extends the security zone.
    /// .
    ///
    /// .value[1].u32: indicates the direction to extend the security zone.
    /// .
    pub const NODE_EXPAND_SAFE_AREA: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(92);
    /// Defines the visible area ratio (visible area/total area of the component) threshold for invoking the
    /// visible area change event of the component.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[...].f32: threshold array. The value range is 0 to 1.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[...].f32: threshold array.
    pub const NODE_VISIBLE_AREA_CHANGE_RATIO: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(93);
    /// Sets the transition effect when the component is inserted or deleted.
    /// This attribute can be set, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: transition effect. The parameter type is [`ArkUI_TransitionEffect`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: transition effect. The parameter type is [`ArkUI_TransitionEffect`].
    pub const NODE_TRANSITION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(94);
    /// Defines the component ID.
    /// This attribute can be obtained through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for obtaining the attribute:
    ///
    /// .value[0].i32: component ID.
    pub const NODE_UNIQUE_ID: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(95);
    /// Set the current component system focus box style.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: The distance between the focus box and the edge of the component.
    ///
    /// Positive numbers represent the outer side, negative numbers represent the inner side.
    ///
    /// Percentage is not supported.
    ///
    /// .value[1].f32: Focus box width. Negative numbers and percentages are not supported.
    ///
    /// .value[2].u32: Focus box color.
    ///
    ///
    pub const NODE_FOCUS_BOX: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(96);
    /// Defines the moving distance limit for the component-bound tap gesture.
    /// This attribute can be set as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: allowed moving distance of a finger, in vp.
    pub const NODE_CLICK_DISTANCE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(97);
    /// Sets whether the focus can be placed on this component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the focus can be placed on the current component. The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the focus can be placed on the current component. The parameter type is 1 or 0.
    ///
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const NODE_TAB_STOP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(98);
    /// Defines the backdrop blur attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32：backdrop blur radius, in px. The value range is [0, +∞).
    ///
    /// .value[1]?.f32：grayscale blur settings that control the brightness of the black color.
    ///
    /// The value range is [0, 127].
    ///
    /// .value[2]?.f32：grayscale blur settings that control the darkness of the white color.
    ///
    /// The value range is [0, 127].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32：backdrop blur radius, in px. The value range is [0, +∞).
    ///
    /// .value[1].f32：grayscale blur settings that control the brightness of the black color.
    ///
    /// The value range is [0, 127].
    ///
    /// .value[2].f32：grayscale blur settings that control the darkness of the white color.
    ///
    /// The value range is [0, 127].
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_BACKDROP_BLUR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(99);
    /// Sets the next focus node.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: focus movement direction, as defined in [`ArkUI_FocusMove`].
    /// .object: next focus node. The parameter type is [`ArkUI_NodeHandle`].
    ///
    ///
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_NEXT_FOCUS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(101);
    /// Sets the parameters for visible area change events.
    ///
    ///
    /// **Note:** The visible area change callback is not a real-time callback. The actual callback interval may differ from
    /// the expected interval due to system load and other factors.
    /// The interval between two visible area change callbacks will not be less than the expected update interval. If the
    /// provided expected interval is too short, the actual callback interval will be determined by the system load.
    /// By default, the interval threshold of the visible area change callback includes 0. This means that,
    /// if the provided threshold is [0.5], the effective threshold will be [0.0, 0.5].
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: parameters for visible area change events.
    /// The parameter type is [`ArkUI_VisibleAreaEventOptions`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: parameters for visible area change events.
    /// The parameter type is [`ArkUI_VisibleAreaEventOptions`].
    ///
    ///
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub const NODE_VISIBLE_AREA_APPROXIMATE_CHANGE_RATIO: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(102);
    /// Defines the text content attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: text content.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: text content.
    pub const NODE_TEXT_CONTENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1000);
    /// Defines the font color attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: font color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: font color value, in 0xARGB format.
    pub const NODE_FONT_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001);
    /// Defines the font size attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: font size, in fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: font size, in fp.
    pub const NODE_FONT_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002);
    /// Defines the font style attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: font style [`ArkUI_FontStyle`]. The default value is <b>ARKUI_FONT_STYLE_NORMAL</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: font style [`ArkUI_FontStyle`].
    pub const NODE_FONT_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003);
    /// Defines the font weight attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: font weight [`ArkUI_FontWeight`]. The default value is <b>ARKUI_FONT_WEIGHT_NORMAL</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: font weight [`ArkUI_FontWeight`].
    pub const NODE_FONT_WEIGHT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1004);
    /// Defines the text line height attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: line height, in fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: line height, in fp.
    pub const NODE_TEXT_LINE_HEIGHT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1005);
    /// Defines the text decoration style and color.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: text decoration type [`ArkUI_TextDecorationType`].
    /// The default value is <b>ARKUI_TEXT_DECORATION_TYPE_NONE</b>.
    ///
    /// .value[1]?.u32: text decoration color, in 0xARGB format. For example, 0xFFFF0000 indicates red. Optional.
    ///
    /// .value[2]?.i32: text decoration style [`ArkUI_TextDecorationStyle`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: text decoration type [`ArkUI_TextDecorationType`].
    ///
    /// .value[1].u32: text decoration color, in 0xARGB format.
    ///
    /// .value[2].i32: text decoration style [`ArkUI_TextDecorationStyle`].
    pub const NODE_TEXT_DECORATION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1006);
    /// Defines the text case attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: text case.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: text case.
    pub const NODE_TEXT_CASE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1007);
    /// Defines the letter spacing attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: letter spacing, in fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: letter spacing, in fp.
    pub const NODE_TEXT_LETTER_SPACING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1008);
    /// Sets the maximum number of lines in the text.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: maximum number of lines in the text.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: maximum number of lines in the text.
    pub const NODE_TEXT_MAX_LINES: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1009);
    /// Horizontal alignment mode of the text.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: horizontal alignment mode of the text. The value is an enum of [`ArkUI_TextAlignment`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: horizontal alignment mode of the text. The value is an enum of [`ArkUI_TextAlignment`].
    pub const NODE_TEXT_ALIGN: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1010);
    /// Defines the text overflow attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: display mode when the text is too long. [`ArkUI_TextOverflow`]
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: display mode when the text is too long. [`ArkUI_TextOverflow`]
    pub const NODE_TEXT_OVERFLOW: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1011);
    /// Defines the font family attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: fonts, separated by commas (,).
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: fonts, separated by commas (,).
    pub const NODE_FONT_FAMILY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1012);
    /// Defines the copy option attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: copy option [`ArkUI_CopyOptions`]. The default value is <b>ARKUI_COPY_OPTIONS_NONE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: copy option [`ArkUI_CopyOptions.`]
    pub const NODE_TEXT_COPY_OPTION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1013);
    /// Defines the text baseline offset attribute
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: baseline offset, in fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: baseline offset, in fp.
    pub const NODE_TEXT_BASELINE_OFFSET: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1014);
    /// Defines the text shadow attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: blur radius of the shadow, in vp.
    ///
    /// .value[1].i32: shadow type [`ArkUI_ShadowType`]. The default value is <b>ARKUI_SHADOW_TYPE_COLOR</b>.
    ///
    /// .value[2].u32: shadow color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    /// .value[3].f32: offset of the shadow along the x-axis, in vp.
    ///
    /// .value[4].f32: offset of the shadow along the y-axis, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: blur radius of the shadow, in vp.
    ///
    /// .value[1].i32: shadow type [`ArkUI_ShadowType`].
    ///
    /// .value[2].u32: shadow color, in 0xARGB format.
    ///
    /// .value[3].f32: offset of the shadow along the x-axis, in vp.
    ///
    /// .value[4].f32: offset of the shadow along the y-axis, in vp.
    pub const NODE_TEXT_TEXT_SHADOW: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1015);
    /// Defines the minimum font size attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: minimum font size, in fp.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: minimum font size, in fp.
    pub const NODE_TEXT_MIN_FONT_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1016);
    /// Defines the maximum font size attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: maximum font size, in fp.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: maximum font size, in fp.
    pub const NODE_TEXT_MAX_FONT_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1017);
    /// Defines the text style attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string?: font family. Optional. Use commas (,) to separate multiple fonts.
    ///
    /// .value[0].f32: font size, in fp.
    ///
    /// .value[1]?.i32: font weight. Optional. The parameter type is [`ArkUI_FontWeight`].
    /// The default value is <b>ARKUI_FONT_WEIGHT_NORMAL</b>.
    ///
    /// .value[2]?.i32: font style. Optional. The parameter type is [`ArkUI_FontStyle`].
    /// The default value is <b>ARKUI_FONT_STYLE_NORMAL</b>.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: font family. Use commas (,) to separate multiple fonts.
    ///
    /// .value[0].f32: font size, in fp.
    ///
    /// .value[1].i32: font weight. The parameter type is [`ArkUI_FontWeight`].
    /// The default value is <b>ARKUI_FONT_WEIGHT_NORMAL</b>.
    ///
    /// .value[2].i32: font style. The parameter type is [`ArkUI_FontStyle`].
    /// The default value is <b>ARKUI_FONT_STYLE_NORMAL</b>.
    pub const NODE_TEXT_FONT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1018);
    /// Defines how the adaptive height is determined for the text.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: how the adaptive height is determined for the text.
    /// The parameter type is [`ArkUI_TextHeightAdaptivePolicy`].
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: how the adaptive height is determined for the text.
    /// The parameter type is [`ArkUI_TextHeightAdaptivePolicy`]
    pub const NODE_TEXT_HEIGHT_ADAPTIVE_POLICY: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1019);
    /// Defines the indentation of the first line.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: indentation of the first line.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: indentation of the first line.
    pub const NODE_TEXT_INDENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1020);
    /// Defines the line break rule. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_WordBreak`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_WordBreak`].
    pub const NODE_TEXT_WORD_BREAK: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1021);
    /// Defines the ellipsis position. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_EllipsisMode`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_EllipsisMode`].
    pub const NODE_TEXT_ELLIPSIS_MODE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1022);
    /// Defines the text line spacing attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: line spacing, in fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: line spacing, in fp.
    pub const NODE_TEXT_LINE_SPACING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1023);
    ///  Set the text feature effect and the NODE_FONT_FEATURE attribute,
    /// NODE_FONT_FEATURE is the advanced typesetting capability of OpenType
    /// Features such as ligatures and equal-width digits are generally used in customized fonts.
    ///
    /// The capabilities need to be supported by the fonts,
    ///
    /// Interfaces for setting, resetting, and obtaining attributes are supported.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .string: complies with the text feature format. The format is normal |
    ///
    /// is in the format of [ | on | off],
    /// .
    /// There can be multiple values separated by commas (,).
    ///
    /// For example, the input format of a number with the same width is ss01 on.
    ///
    ///
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .string indicates the content of the text feature. Multiple text features are separated by commas (,).
    pub const NODE_FONT_FEATURE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1024);
    /// Setting Enable Text Recognition.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32:Enable text recognition, default value false.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32：Enable Text Recognition
    pub const NODE_TEXT_ENABLE_DATA_DETECTOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1025);
    /// Set the text recognition configuration.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0...].i32: Array of entity types, parameter types[`ArkUI_TextDataDetectorType`]。
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0...].i32：Array of entity types, parameter types[`ArkUI_TextDataDetectorType`]。
    pub const NODE_TEXT_ENABLE_DATA_DETECTOR_CONFIG: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1026);
    /// Defines the background color of the selected text.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color value, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color value, in 0xARGB format.
    pub const NODE_TEXT_SELECTED_BACKGROUND_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1027);
    /// The text component uses a formatted string object to set text content properties,
    /// and supports property setting, property reset, and property acquisition interfaces.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object indicates ArkUI_StyledString formatted string data. The parameter type is [`ArkUI_StyledString`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object indicates ArkUI_StyledString formatted string data. The parameter type is [`ArkUI_StyledString`].
    pub const NODE_TEXT_CONTENT_WITH_STYLED_STRING: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1028);
    /// Sets whether to center text vertically in the text component.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to center text vertically. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to center text vertically.
    pub const NODE_TEXT_HALF_LEADING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1029);
    /// Defines the font weight attribute, which can be set, reset, and obtained as required through APIs.
    /// The font weight specified by this API is not affected by any changes in the system font weight settings.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: font weight [`ArkUI_FontWeight`]. The default value is <b>ARKUI_FONT_WEIGHT_NORMAL</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: font weight [`ArkUI_FontWeight`].
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_IMMUTABLE_FONT_WEIGHT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1030);
    /// Defines the text content attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: content of the text span.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: content of the text span.
    pub const NODE_SPAN_CONTENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(2000);
    /// Defines the text background style.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the text background, in 0xARGB format, for example, <b>0xFFFF0000</b> indicating red.
    ///
    /// The second parameter indicates the rounded corners of the text background. Two setting modes are available:
    ///
    /// 1: .value[1].f32: radius of the four corners, in vp.
    ///
    /// 2: .value[1].f32: radius of the upper left corner, in vp.
    ///
    /// .value[2].f32: radius of the upper right corner, in vp.
    ///
    /// .value[3].f32: radius of the lower left corner, in vp.
    ///
    /// .value[4].f32: radius of the lower right corner, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the text background, in 0xARGB format.
    ///
    /// .value[1].f32: radius of the upper left corner, in vp.
    ///
    /// .value[2].f32: radius of the upper right corner, in vp.
    ///
    /// .value[3].f32: radius of the lower left corner, in vp.
    ///
    /// .value[4].f32: radius of the lower right corner, in vp.
    pub const NODE_SPAN_TEXT_BACKGROUND_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(2001);
    /// Defines the text baseline offset attribute
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: baseline offset, in fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: baseline offset, in fp.
    pub const NODE_SPAN_BASELINE_OFFSET: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(2002);
    /// Defines the image source of the image span.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: image address of the image span.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`]. Either .string or .object must be set.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: image address of the image span.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`].
    pub const NODE_IMAGE_SPAN_SRC: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(3000);
    /// Defines the alignment mode of the image with the text.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode of the image with the text.
    /// The value is an enum of [`ArkUI_ImageSpanAlignment`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode of the image with the text.
    /// The value is an enum of [`ArkUI_ImageSpanAlignment`].
    pub const NODE_IMAGE_SPAN_VERTICAL_ALIGNMENT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(3001);
    /// Defines the placeholder image source.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: placeholder image source.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`]. Either .string or .object must be set.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: placeholder image source.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`].
    pub const NODE_IMAGE_SPAN_ALT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(3002);
    /// Defines the baseline offset attribute of the <b>ImageSpan</b> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    /// A positive value means an upward offset, while a negative value means a downward offset.
    /// The default value is <b>0</b>, and the unit is fp.
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: baseline offset, in fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: baseline offset, in fp.
    ///
    ///
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub const NODE_IMAGE_SPAN_BASELINE_OFFSET: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(3003);
    /// Defines the image source of the <Image> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: image source.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`]. Either .string or .object must be set.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: image source.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`].
    pub const NODE_IMAGE_SRC: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4000);
    /// Defines how the image is resized to fit its container.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: how the image is resized to fit its container. The value is an enum of [`ArkUI_ObjectFit`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: how the image is resized to fit its container. The value is an enum of [`ArkUI_ObjectFit`].
    pub const NODE_IMAGE_OBJECT_FIT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4001);
    /// Defines the interpolation effect of the image.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: interpolation effect of the image. The value is an enum of [`ArkUI_ImageInterpolation`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: interpolation effect of the image. The value is an enum of [`ArkUI_ImageInterpolation`].
    pub const NODE_IMAGE_INTERPOLATION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4002);
    /// Defines how the image is repeated.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: how the image is repeated. The value is an enum of [`ArkUI_ImageRepeat`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: how the image is repeated. The value is an enum of [`ArkUI_ImageRepeat`].
    pub const NODE_IMAGE_OBJECT_REPEAT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4003);
    /// Defines the color filter of the image.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32 to .value[19].f32: filter matrix array.
    ///
    /// .size: 5 x 4 filter array size.
    ///
    /// .object: the pointer to OH_Drawing_ColorFilter. Either .value or .object is set.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32 to .value[19].f32: filter matrix array.
    ///
    /// .size: 5 x 4 filter array size.
    ///
    /// .object: the pointer to OH_Drawing_ColorFilter.
    pub const NODE_IMAGE_COLOR_FILTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4004);
    /// Defines the auto resize attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32 : whether to resize the image source.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32 : whether to resize the image source.
    pub const NODE_IMAGE_AUTO_RESIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4005);
    /// Defines the placeholder image source.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: placeholder image source.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`]. Either .string or .object must be set.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: placeholder image source.
    ///
    /// .object: The parameter type is [`ArkUI_DrawableDescriptor`].
    pub const NODE_IMAGE_ALT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4006);
    /// Defines whether the image is draggable.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the image is draggable. The value <b>true</b> means that the image is draggable.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the image is draggable.
    pub const NODE_IMAGE_DRAGGABLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4007);
    /// Defines the image rendering mode. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_ImageRenderMode`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_ImageRenderMode`].
    pub const NODE_IMAGE_RENDER_MODE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4008);
    /// Defines whether the image display size follows the image source size.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: wheter to follow, true means to follow.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: wheter to follow, true means to follow.
    pub const NODE_IMAGE_FIT_ORIGINAL_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4009);
    /// Defines the fill color of the swiper.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: fill color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: fill color, in 0xARGB format.
    pub const NODE_IMAGE_FILL_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4010);
    /// Sets the resizable image options.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: width of the left edge. The unit is vp.
    ///
    /// .value[1].f32: width of the top edge. The unit is vp.
    ///
    /// .value[2].f32: width of the right edge. The unit is vp.
    ///
    /// .value[3].f32: width of the bottom edge. The unit is vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: width of the left edge. The unit is vp.
    ///
    /// .value[1].f32: width of the top edge. The unit is vp.
    ///
    /// .value[2].f32: width of the right edge. The unit is vp.
    ///
    /// .value[3].f32: width of the bottom edge. The unit is vp.
    pub const NODE_IMAGE_RESIZABLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(4011);
    /// Defines the color of the component when it is selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: background color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: background color, in 0xARGB format.
    pub const NODE_TOGGLE_SELECTED_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(5000);
    /// Defines the color of the circular slider for the component of the switch type.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the circular slider, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the circular slider, in 0xARGB format.
    pub const NODE_TOGGLE_SWITCH_POINT_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(5001);
    /// Defines the toggle switch value. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable the toggle. The value <b>true</b> means to enable the toggle.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable the toggle.
    pub const NODE_TOGGLE_VALUE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(5002);
    /// Defines the color of the component when it is deselected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: background color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: background color, in 0xARGB format.
    pub const NODE_TOGGLE_UNSELECTED_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(5003);
    /// Defines the foreground color of the loading progress bar.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: foreground color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: foreground color, in 0xARGB format.
    pub const NODE_LOADING_PROGRESS_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(6000);
    /// Defines whether to show the loading animation for the <LoadingProgress> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to show the loading animation.
    /// The value <b>true</b> means to show the loading animation, and <b>false</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means to show the loading animation, and <b>0</b> means the opposite.
    pub const NODE_LOADING_PROGRESS_ENABLE_LOADING: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(6001);
    /// Defines the default placeholder text of the single-line text box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: default placeholder text.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: default placeholder text.
    pub const NODE_TEXT_INPUT_PLACEHOLDER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7000);
    /// Defines the default text content of the single-line text box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: default text content.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: default text content.
    pub const NODE_TEXT_INPUT_TEXT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7001);
    /// Defines the caret color attribute.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: caret color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: caret color, in 0xARGB format.
    pub const NODE_TEXT_INPUT_CARET_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7002);
    /// Defines the caret style attribute.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: caret width, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: caret width, in vp.
    pub const NODE_TEXT_INPUT_CARET_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7003);
    /// Defines the underline attribute of the single-line text box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to show an underline.
    /// The value <b>true</b> means to show an underline, and <b>false</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means to show an underline, and <b>0</b> means the opposite.
    pub const NODE_TEXT_INPUT_SHOW_UNDERLINE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7004);
    /// Defines the maximum number of characters in the text input.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: maximum number of characters in the text input, without a unit.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: maximum number of characters in the text input.
    pub const NODE_TEXT_INPUT_MAX_LENGTH: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7005);
    /// Defines the type of the Enter key.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: type of the Enter key[`ArkUI_EnterKeyType`]. The default value is <b>ARKUI_ENTER_KEY_TYPE_DONE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: type of the Enter key[`ArkUI_EnterKeyType`].
    pub const NODE_TEXT_INPUT_ENTER_KEY_TYPE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7006);
    /// Defines the placeholder text color.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color value, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color value, in 0xARGB format.
    pub const NODE_TEXT_INPUT_PLACEHOLDER_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7007);
    /// Defines the placeholder text font.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.f32: font size, in fp. Optional. The default value is <b>16.0</b>.
    ///
    /// .value[1]?.i32: font style [`ArkUI_FontStyle`]. Optional.
    /// The default value is <b>ARKUI_FONT_STYLE_NORMAL</b>.
    ///
    /// .value[2]?.i32: font weight [`ArkUI_FontWeight`]. Optional.
    /// The default value is <b>ARKUI_FONT_WEIGHT_NORMAL</b>.
    ///
    /// ?.string: font family. Multiple font families are separated by commas (,).
    /// Example: "font weight; font family 1, font family 2".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: font size, in fp.
    ///
    /// .value[1].i32: font style [`ArkUI_FontStyle`].
    ///
    /// .value[2].i32: font weight [`ArkUI_FontWeight`].
    ///
    /// .string: font family. Multiple font families are separated by commas (,).
    pub const NODE_TEXT_INPUT_PLACEHOLDER_FONT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7008);
    /// Defines whether to enable the input method when the component obtains focus.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable the input method when the component obtains focus.
    /// The value <b>true</b> means to enable the input method, and <b>false</b> means the opposite.
    ///
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means to enable the input method when the component obtains focus,
    /// and <b>0</b> means the opposite.
    pub const NODE_TEXT_INPUT_ENABLE_KEYBOARD_ON_FOCUS: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7009);
    /// Defines the text box type. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: text box type [`ArkUI_TextInputType`].
    /// The default value is <b>ARKUI_TEXTINPUT_TYPE_NORMAL</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: text box type [`ArkUI_TextInputType`].
    pub const NODE_TEXT_INPUT_TYPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7010);
    /// Defines the background color of the selected text.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color value, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color value, in 0xARGB format.
    pub const NODE_TEXT_INPUT_SELECTED_BACKGROUND_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7011);
    /// Defines whether to display the password icon at the end of the password text box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to display the password icon at the end of the password text box.
    /// The value <b>true</b> means to display the password icon, and <b>false</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means to display the password icon at the end of the password text box,
    /// and <b>0</b> means the opposite.
    pub const NODE_TEXT_INPUT_SHOW_PASSWORD_ICON: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7012);
    /// Defines the editable state for the single-line text box.
    /// This attribute can be set as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to remain in the editable state. The value
    /// <b>true</b> means to remain in the editable state, and <b>false</b> means to exit the editable state.
    ///
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for obtaining the attribute:
    /// .value[0].i32: whether to remain in the editable state. The value <b>true</b> means to remain in the editable
    /// state, and <b>false</b> means to exit the editable state.
    pub const NODE_TEXT_INPUT_EDITING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7013);
    /// Defines the style of the cancel button on the right of the single-line text box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: button style [`ArkUI_CancelButtonStyle`].
    /// The default value is <b>ARKUI_CANCELBUTTON_STYLE_INPUT</b>.
    ///
    /// .value[1]?.f32: button icon size, in vp.
    ///
    /// .value[2]?.u32: button icon color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    /// ?.string: button icon image source. The value is the local address of the image, for example, /pages/icon.png.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: button style [`ArkUI_CancelButtonStyle`].
    ///
    /// .value[1].f32: icon size, in vp.
    ///
    /// .value[2].u32: button icon color, in 0xARGB format.
    ///
    /// .string: button icon image source.
    pub const NODE_TEXT_INPUT_CANCEL_BUTTON: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7014);
    /// Sets the text selection area, which will be highlighted.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: start position of the text selection.
    ///
    /// .value[1].i32: end position of the text selection.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: start position of the text selection.
    ///
    /// .value[1].i32: end position of the text selection.
    pub const NODE_TEXT_INPUT_TEXT_SELECTION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7015);
    /// Sets the color of the text underline when it is enabled.
    ///
    /// The default underline color configured for the theme is <b>'0x33182431'</b>.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the underline applied to the text being typed in.
    /// The value is in 0xARGB format.
    ///
    /// .value[1].u32: color of the underline applied to the text in the normal state.
    /// The value is in 0xARGB format.
    ///
    /// .value[2].u32: color of the underline applied to the text when an error is detected.
    /// The value is in 0xARGB format.
    ///
    /// .value[3].u32: color of the underline applied to the text when it is disabled.
    /// The value is in 0xARGB format.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the underline applied to the text being typed in. The value is in 0xARGB format.
    ///
    /// .value[1].u32: color of the underline applied to the text in the normal state. The value is in 0xARGB format.
    ///
    /// .value[2].u32: color of the underline applied to the text when an error is detected.
    /// The value is in 0xARGB format.
    ///
    /// .value[3].u32: color of the underline applied to the text when it is disabled. The value is in 0xARGB format.
    pub const NODE_TEXT_INPUT_UNDERLINE_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7016);
    /// Sets whether to enable autofill.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable autofill. The default value is <b>true</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable autofill.
    pub const NODE_TEXT_INPUT_ENABLE_AUTO_FILL: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7017);
    /// Sets the autofill type.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: autofill type. The parameter type is [`ArkUI_TextInputContentType`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: autofill type. The parameter type is [`ArkUI_TextInputContentType`].
    pub const NODE_TEXT_INPUT_CONTENT_TYPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7018);
    /// Defines the rules for generating passwords. When autofill is used, these rules are transparently
    /// transmitted to Password Vault for generating a new password.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: rules for generating passwords.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: rules for generating passwords.
    pub const NODE_TEXT_INPUT_PASSWORD_RULES: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7019);
    /// Sets whether to select all text in the initial state. The inline mode is not supported.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to select all text in the initial state. The default value is b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to select all text in the initial state.
    pub const NODE_TEXT_INPUT_SELECT_ALL: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7020);
    /// Sets the regular expression for input filtering.
    /// Only inputs that comply with the regular expression can be displayed.
    /// Other inputs are filtered out. The specified regular expression can match single characters,
    /// but not strings.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: regular expression.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: regular expression.
    pub const NODE_TEXT_INPUT_INPUT_FILTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7021);
    /// Sets the text box to the default style or inline input style.
    ///
    /// For the inline input style, only <b>InputType.Normal</b> is supported.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: text input style. The parameter type is [`ArkUI_TextInputStyle`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: text input style. The parameter type is [`ArkUI_TextInputStyle`].
    pub const NODE_TEXT_INPUT_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7022);
    /// Sets or obtains the caret position.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// In the case of setting the caret position:
    /// .value[0].i32: character count from the beginning of a string to the caret position.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// In the case of obtaining the caret position: If this API is called when the caret position is updated in the
    /// current frame, it will not take effect.
    /// .value[0].i32: index of the caret position.
    ///
    /// .value[1].f32: X coordinate of the caret relative to the text box.
    ///
    /// .value[2].f32: Y coordinate of the caret relative to the text box.
    pub const NODE_TEXT_INPUT_CARET_OFFSET: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7023);
    /// Obtains the position of the edited text area relative to the component and its size.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: horizontal coordinate.
    ///
    /// .value[1].f32: vertical coordinate.
    ///
    /// .value[2].f32: content width.
    ///
    /// .value[3].f32: content height.
    pub const NODE_TEXT_INPUT_CONTENT_RECT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7024);
    /// Obtains the number of lines of the edited text.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: number of lines of the edited text.
    pub const NODE_TEXT_INPUT_CONTENT_LINE_COUNT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7025);
    /// Sets whether to hide the text selection menu when the text box is long-pressed, double-click, or
    /// right-clicked. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to hide the text selection menu when the text box is long-pressed, double-click, or
    /// right-clicked. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to hide the text selection menu when the text box is long-pressed, double-click, or
    /// right-clicked.
    pub const NODE_TEXT_INPUT_SELECTION_MENU_HIDDEN: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7026);
    /// Sets whether the text box loses focus after the Enter key is pressed to submit information.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the text box loses focus.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the text box loses focus.
    pub const NODE_TEXT_INPUT_BLUR_ON_SUBMIT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7027);
    /// Set up a custom keyboard.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object：custom keyboard,The parameter type is[`ArkUI_NodeHandle`]。
    ///
    /// .value[0]?.i32：Sets whether the custom keyboard supports the avoidance feature, default value false.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object:custom keyboard,The parameter type is[`ArkUI_NodeHandle`]。
    ///
    /// .value[0].i32：Set whether the custom keyboard supports the avoidance function.
    pub const NODE_TEXT_INPUT_CUSTOM_KEYBOARD: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7028);
    /// Defines the line break rule. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_WordBreak`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is [`ArkUI_WordBreak`].
    pub const NODE_TEXT_INPUT_WORD_BREAK: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7029);
    /// Sets whether the keyboard pops up when the input box gains focus.
    /// It supports property setting, property reset and property acquisition interfaces.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: Whether to pop up the keyboard.
    ///
    ///
    ///
    /// Attribute acquisition method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: Whether to pop up the keyboard.
    pub const NODE_TEXT_INPUT_SHOW_KEYBOARD_ON_FOCUS: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7030);
    /// When this property is set, the height of the textInput component is calculated using this property.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: set the value of numberOfLines.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: the value of numberOfLines.
    pub const NODE_TEXT_INPUT_NUMBER_OF_LINES: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7031);
    /// Sets the letter spacing of the <b>TextInput</b> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: letter spacing. The default unit is fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: letter spacing. The default unit is fp.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_INPUT_LETTER_SPACING: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7032);
    /// Sets whether to enable preview text for the <b>TextInput</b> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable preview tex.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable preview tex.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_INPUT_ENABLE_PREVIEW_TEXT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7033);
    /// Sets whether to center text vertically in the textInput component.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to center text vertically. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to center text vertically.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_TEXT_INPUT_HALF_LEADING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(7034);
    /// Set the keyboard style of textInput
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32：keyboard style，the parameter type is [`ArkUI_KeyboardAppearanceType`]。
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]：
    ///
    /// .value[0].i32：keyboard style，the parameter type is [`ArkUI_KeyboardAppearanceType`]。
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_INPUT_KEYBOARD_APPEARANCE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(7035);
    /// Defines the default placeholder text for the multi-line text box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: default placeholder text.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: default placeholder text.
    pub const NODE_TEXT_AREA_PLACEHOLDER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8000);
    /// Defines the default text content for the multi-line text box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: default text content.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: default text content.
    pub const NODE_TEXT_AREA_TEXT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8001);
    /// Defines the maximum number of characters in the text input.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: maximum number of characters in the text input.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: maximum number of characters in the text input.
    pub const NODE_TEXT_AREA_MAX_LENGTH: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8002);
    /// Defines the placeholder text color.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color value, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color value, in 0xARGB format.
    pub const NODE_TEXT_AREA_PLACEHOLDER_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8003);
    /// Defines the placeholder text font.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.f32: font size, in fp. Optional. The default value is <b>16.0</b>.
    ///
    /// .value[1]?.i32: font style [`ArkUI_FontStyle`]. Optional. The default value is <b>ARKUI_FONT_STYLE_NORMAL</b>.
    ///
    /// .value[2]?.i32: font weight [`ArkUI_FontWeight`]. Optional. The default value is <b>ARKUI_FONT_WEIGHT_NORMAL</b>.
    ///
    /// ?.string: font family. Multiple font families are separated by commas (,). For example, "font weight; font family 1, font family 2".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: font size, in fp.
    ///
    /// .value[1].i32: font style [`ArkUI_FontStyle`].
    ///
    /// .value[2].i32: font weight [`ArkUI_FontWeight`].
    ///
    /// .string: font family. Multiple font families are separated by commas (,).
    pub const NODE_TEXT_AREA_PLACEHOLDER_FONT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8004);
    /// Defines the caret color attribute.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: background color, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: background color, in 0xARGB format.
    pub const NODE_TEXT_AREA_CARET_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8005);
    /// Defines the editable state for the multi-line text box.
    /// This attribute can be set as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to remain in the editable state. The value <b>true</b> means to remain in the
    /// editable state, and <b>false</b> means to exit the editable state.
    ///
    ///
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for obtaining the attribute:
    /// .value[0].i32: whether to remain in the editable state. The value <b>true</b> means to remain in the editable
    /// state, and <b>false</b> means to exit the editable state.
    ///
    pub const NODE_TEXT_AREA_EDITING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8006);
    /// Defines the text box type. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: text box type [`ArkUI_TextAreaType`].
    /// The default value is <b>ARKUI_TEXTAREA_TYPE_NORMAL</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: text box type [`ArkUI_TextAreaType`].
    pub const NODE_TEXT_AREA_TYPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8007);
    /// Defines the counter settings. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to show a character counter. The value <b>true</b> means to show a character counter.
    ///
    /// .value[1]?.f32: threshold percentage for displaying the character counter. The character counter is displayed
    /// when the number of characters that have been entered is greater than the maximum number of characters multiplied
    /// by the threshold percentage value. The value range is 1 to 100. If the value is a decimal, it is rounded down.
    ///
    /// .value[2]?.i32: whether to highlight the border when the number of entered characters reaches the maximum.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to show a character counter.
    ///
    /// .value[1].f32: threshold percentage for displaying the character counter. The character counter is displayed
    /// when the number of characters that have been entered is greater than the maximum number of characters multiplied
    /// by the threshold percentage value. The value range is 1 to 100.
    ///
    /// .value[2].i32: whether to highlight the border when the number of entered characters reaches the maximum.
    /// The default value is <b>true</b>.
    pub const NODE_TEXT_AREA_SHOW_COUNTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8008);
    /// Sets whether to hide the text selection menu when the text box is long-pressed, double-click,
    /// or right-clicked. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to hide the text selection menu when the text box is long-pressed, double-click,
    /// or right-clicked. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to hide the text selection menu when the text box is long-pressed, double-click,
    /// or right-clicked.
    pub const NODE_TEXT_AREA_SELECTION_MENU_HIDDEN: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8009);
    /// Sets whether the multi-line text box loses focus after the Enter key is pressed to submit information.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the text box loses focus.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the text box loses focus.
    pub const NODE_TEXT_AREA_BLUR_ON_SUBMIT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8010);
    /// Sets the regular expression for input filtering.
    /// Only inputs that comply with the regular expression can be displayed.
    /// Other inputs are filtered out. The specified regular expression can match single characters,
    /// but not strings.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: regular expression.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: regular expression.
    pub const NODE_TEXT_AREA_INPUT_FILTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8011);
    /// Defines the background color of the selected text.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color value, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color value, in 0xARGB format.
    pub const NODE_TEXT_AREA_SELECTED_BACKGROUND_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8012);
    /// Defines the type of the Enter key.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: type of the Enter key[`ArkUI_EnterKeyType`]. The default value is <b>ARKUI_ENTER_KEY_TYPE_DONE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: type of the Enter key[`ArkUI_EnterKeyType`].
    pub const NODE_TEXT_AREA_ENTER_KEY_TYPE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8013);
    /// Defines whether to enable the input method when the component obtains focus.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable the input method when the component obtains focus.
    /// The value <b>true</b> means to enable the input method, and <b>false</b> means the opposite.
    ///
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means to enable the input method when the component obtains focus,
    /// and <b>0</b> means the opposite.
    pub const NODE_TEXT_AREA_ENABLE_KEYBOARD_ON_FOCUS: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8014);
    /// Defines whether to enable the input method when the component obtains focus.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable the input method when the component obtains focus.
    /// The value <b>true</b> means to enable the input method, and <b>false</b> means the opposite.
    ///
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means to enable the input method when the component obtains focus,
    /// and <b>0</b> means the opposite.
    pub const NODE_TEXT_AREA_CARET_OFFSET: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8015);
    /// Obtains the position of the edited text area relative to the component and its size.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: horizontal coordinate.
    ///
    /// .value[1].f32: vertical coordinate.
    ///
    /// .value[2].f32: content width.
    ///
    /// .value[3].f32: content height.
    pub const NODE_TEXT_AREA_CONTENT_RECT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8016);
    /// Obtains the number of lines of the edited text.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: number of lines of the edited text.
    pub const NODE_TEXT_AREA_CONTENT_LINE_COUNT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8017);
    /// Sets the text selection area, which will be highlighted.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: start position of the text selection.
    ///
    /// .value[1].i32: end position of the text selection.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: start position of the text selection.
    ///
    /// .value[1].i32: end position of the text selection.
    pub const NODE_TEXT_AREA_TEXT_SELECTION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8018);
    /// Sets whether to enable autofill.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable autofill. The default value is <b>true</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable autofill.
    pub const NODE_TEXT_AREA_ENABLE_AUTO_FILL: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8019);
    /// Sets the autofill type.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: autofill type. The parameter type is [`ArkUI_TextInputContentType`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: autofill type. The parameter type is [`ArkUI_TextInputContentType`].
    pub const NODE_TEXT_AREA_CONTENT_TYPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8020);
    /// Sets whether the keyboard pops up when the input box gains focus.
    /// It supports property setting, property reset and property acquisition interfaces.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: Whether to pop up the keyboard.
    ///
    ///
    ///
    /// Attribute acquisition method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: Whether to pop up the keyboard.
    pub const NODE_TEXT_AREA_SHOW_KEYBOARD_ON_FOCUS: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8021);
    /// When this property is set, the height of the textArea component is calculated using this property.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: set the value of numberOfLines.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: Set the value of numberOfLines
    pub const NODE_TEXT_AREA_NUMBER_OF_LINES: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8022);
    /// Sets the letter spacing of the <b>TextArea</b> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: letter spacing. The default unit is fp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: letter spacing. The default unit is fp.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_AREA_LETTER_SPACING: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8023);
    /// Sets whether to enable preview text for the <b>TextArea</b> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable preview tex.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable preview tex.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_AREA_ENABLE_PREVIEW_TEXT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8024);
    /// Sets whether to center text vertically in the textArea component.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to center text vertically. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to center text vertically.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_TEXT_AREA_HALF_LEADING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(8025);
    /// Set the keyboard style of textArea
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32：keyboard style，the parameter type is [`ArkUI_KeyboardAppearanceType`]。
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]：
    ///
    /// .value[0].i32：keyboard style，the parameter type is [`ArkUI_KeyboardAppearanceType`]。
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_AREA_KEYBOARD_APPEARANCE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(8026);
    /// Defines the button text content. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: default text content.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: default text content.
    pub const NODE_BUTTON_LABEL: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(9000);
    /// Sets the button type. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: button type. The parameter type is [`ArkUI_ButtonType`].
    /// The default value is <b>ARKUI_BUTTON_TYPE_CAPSULE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: button type. The parameter type is [`ArkUI_ButtonType`].
    /// The default value is <b>ARKUI_BUTTON_TYPE_CAPSULE</b>.
    pub const NODE_BUTTON_TYPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(9001);
    /// Defines the minimum font scale attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: minimum font scale, in fp.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: minimum font scale, in fp.
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_BUTTON_MIN_FONT_SCALE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(9002);
    /// Defines the maximum font scale attribute, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: maximum font scale, in fp.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: maximum font scale, in fp.
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_BUTTON_MAX_FONT_SCALE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(9003);
    /// Defines the current value of the progress indicator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: current value of the progress indicator.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: current value of the progress indicator.
    pub const NODE_PROGRESS_VALUE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(10000);
    /// Defines the total value of the progress indicator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: total value of the progress indicator.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: total value of the progress indicator.
    pub const NODE_PROGRESS_TOTAL: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(10001);
    /// Defines the color for the progress value on the progress indicator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color value, in 0xARGB format. For example, 0xFFFF0000 indicates red.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color value, in 0xARGB format.
    pub const NODE_PROGRESS_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(10002);
    /// Defines the type of the progress indicator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: type of the progress indicator [`ArkUI_ProgressType`].
    /// The default value is <b>ARKUI_PROGRESS_TYPE_LINEAR</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: type of the progress indicator [`ArkUI_ProgressType`].
    pub const NODE_PROGRESS_TYPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(10003);
    /// Sets the style of the linear progress indicator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    /// If the progress indicator type is not linear, it will not take effect.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: Use the [`ArkUI_ProgressLinearStyleOption`] object to set the style.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: Use the [`ArkUI_ProgressLinearStyleOption`] object to get the style.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_PROGRESS_LINEAR_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(10004);
    /// Defines whether the check box is selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the check box is selected.
    /// The value <b>1</b> means that the check box is selected, and <b>0</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means that the check box is selected, and <b>0</b> means the opposite.
    pub const NODE_CHECKBOX_SELECT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(11000);
    /// Defines the color of the check box when it is selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the check box when it is selected, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the check box when it is selected, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    pub const NODE_CHECKBOX_SELECT_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(11001);
    /// Defines the border color of the check box when it is not selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    pub const NODE_CHECKBOX_UNSELECT_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(11002);
    /// Defines the internal icon style of the check box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    /// .value[1]?.f32: size of the internal mark, in vp. Optional.
    ///
    /// .value[2]?.f32: stroke width of the internal mark, in vp. Optional. The default value is <b>2</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    /// .value[1].f32: size of the internal mark, in vp.
    ///
    /// .value[2].f32: stroke width of the internal mark, in vp. The default value is <b>2</b>.
    pub const NODE_CHECKBOX_MARK: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(11003);
    /// Defines the shape of the check box.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: component shape. The parameter type is [`ArkUI_CheckboxShape`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: component shape. The parameter type is [`ArkUI_CheckboxShape`].
    pub const NODE_CHECKBOX_SHAPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(11004);
    /// Defines the name of the checkbox.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: component name.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: component name.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_NAME: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(11005);
    /// Defines the name of the checkbox.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: component name.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: component name.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(11006);
    /// Defines the ID of the <b><XComponent></b> component.
    /// This attribute can be set and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: component ID.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: component ID.
    pub const NODE_XCOMPONENT_ID: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(12000);
    /// Defines the type of the <b><XComponent></b> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: type [`ArkUI_XComponentType`]. The default value is <b>ARKUI_XCOMPONENT_TYPE_SURFACE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: type [`ArkUI_XComponentType`].
    pub const NODE_XCOMPONENT_TYPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(12001);
    /// Defines the width and height of the <b><XComponent></b> component.
    /// This attribute can be set and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: width, in px.
    ///
    /// .value[1].u32: height, in px.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: width, in px.
    ///
    /// .value[1].u32: height, in px.
    pub const NODE_XCOMPONENT_SURFACE_SIZE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(12002);
    /// Defines the rectangle information of surface created by the <b><XComponent></b> component.
    /// This attribute can be set and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The horizontal offset of the surface relative to XComponent, in pixels.
    ///
    /// .value[1].i32: The vertical offset of the surface relative to XComponent, in pixels.
    ///
    /// .value[2].i32: The width of the surface created by XComponent, in pixels.
    ///
    /// .value[3].i32: The height of the surface created by XComponent, in pixels.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The horizontal offset of the surface relative to XComponent, in pixels.
    ///
    /// .value[1].i32: The vertical offset of the surface relative to XComponent, in pixels.
    ///
    /// .value[2].i32: The width of the surface created by XComponent, in pixels.
    ///
    /// .value[3].i32: The height of the surface created by XComponent, in pixels.
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_XCOMPONENT_SURFACE_RECT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(12003);
    /// Defines whether to enable the AI analyzer for the <b><XComponent></b> component.
    /// This attribute can be set and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// value[0].i32: The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].i32: The parameter type is 1 or 0.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_XCOMPONENT_ENABLE_ANALYZER: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(12004);
    /// Defines whether to display the lunar calendar in the date picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to display the lunar calendar in the date picker. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to display the lunar calendar in the date picker.
    pub const NODE_DATE_PICKER_LUNAR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(13000);
    /// Defines the start date of the date picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: date. The default value is <b>"1970-1-1"</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: date.
    pub const NODE_DATE_PICKER_START: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(13001);
    /// Defines the end date of the date picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: date. The default value is <b>"2100-12-31"</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: date.
    pub const NODE_DATE_PICKER_END: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(13002);
    /// Defines the selected date of the date picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: date. The default value is <b>"2024-01-22"</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: date.
    pub const NODE_DATE_PICKER_SELECTED: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(13003);
    /// Defines the font color, font size, and font weight for the top and bottom items in the date picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_DATE_PICKER_DISAPPEAR_TEXT_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(13004);
    /// Defines the font color, font size, and font weight of all items except the top, bottom, and selected
    /// items in the date picker. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_DATE_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(13005);
    /// Defines the font color, font size, and font weight of the selected item in the date picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_DATE_PICKER_SELECTED_TEXT_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(13006);
    /// Defines the mode of the date picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// value[0].i32: the mode. The value is and enum of [`ArkUI_DatePickerMode`].
    /// .
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].i32: the mode. The value is and enum of [`ArkUI_DatePickerMode`].
    /// .
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_DATE_PICKER_MODE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(13007);
    /// Defines whether haptic feedback.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to feedback. The value <b>true</b> means to feedback, and
    /// <b>false</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].i32: whether to feedback.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_DATE_PICKER_ENABLE_HAPTIC_FEEDBACK: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(13008);
    /// Defines the time of the selected item. in the timer picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: time. The default value is the current system time.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: time.
    pub const NODE_TIME_PICKER_SELECTED: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(14000);
    /// Defines whether the display time is in 24-hour format.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the display time is in 24-hour format. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the display time is in 24-hour format.
    pub const NODE_TIME_PICKER_USE_MILITARY_TIME: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(14001);
    /// Defines the font color, font size, and font weight for the top and bottom items in the time picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_TIME_PICKER_DISAPPEAR_TEXT_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(14002);
    /// Defines the font color, font size, and font weight of all items except the top, bottom, and selected items
    /// in the time picker. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_TIME_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(14003);
    /// Defines the font color, font size, and font weight of the selected item in the time picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_TIME_PICKER_SELECTED_TEXT_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(14004);
    /// Defines the start time of the time picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: time. The default value is <b>"00:00:00"</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: time. The default value is <b>"00:00:00"</b>.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_TIME_PICKER_START: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(14005);
    /// Defines the end time of the time picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: time. The default value is <b>"23:59:59"</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: time. The default value is <b>"23:59:59"</b>.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_TIME_PICKER_END: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(14006);
    /// Defines whether the AM/PM option is cascaded with the time in 12-hour mode.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable cascade. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable cascade.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_TIME_PICKER_ENABLE_CASCADE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(14007);
    /// Defines the data selection range of the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: type of the text picker [`ArkUI_TextPickerRangeType`].
    /// The default value is <b>ARKUI_TEXTPICKER_RANGETYPE_SINGLE</b>.
    ///
    /// ?.string: string input, whose format varies by picker type.
    ///
    /// 1: single-column picker. The input format is a group of strings separated by semicolons (;).
    ///
    /// 2: multi-column picker. Multiple pairs of plain text strings are supported. The pairs are separated by
    /// semicolons (;), and strings within each pair are separated by commas (,).
    ///
    /// ?.object: Object input, whose format varies by picker type.
    ///
    /// 1: single-column picker with image support. The input structure is [`ARKUI_TextPickerRangeContent`].
    ///
    /// 2: multi-column interconnected picker. The input structure is [`ARKUI_TextPickerCascadeRangeContent`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: type of the text picker [`ArkUI_TextPickerRangeType`].
    ///
    /// ?.string: string output, whose format varies by picker type.
    ///
    /// 1: single-column picker. The output format is a group of strings separated by semicolons (;).
    ///
    /// 2: multi-column picker. Multiple pairs of plain text strings are supported. The pairs are separated by
    /// semicolons (;), and strings within each pair are separated by commas (,).
    ///
    /// ?.string: Object output, whose format varies by picker type.
    ///
    /// 1: single-column picker with image support. The output structure is [`ARKUI_TextPickerRangeContent`].
    ///
    /// 2: multi-column interconnected picker. The output structure is [`ARKUI_TextPickerCascadeRangeContent`].
    pub const NODE_TEXT_PICKER_OPTION_RANGE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15000);
    /// Defines the index of the default selected item in the data selection range of the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: index. If there are multiple index values, add them one by one.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: index. If there are multiple index values, add them one by one.
    pub const NODE_TEXT_PICKER_OPTION_SELECTED: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15001);
    /// Defines the value of the default selected item in the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: value of the selected item. If there are multiple values, add them one by one and
    /// separate them with semicolons (;).
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: value of the selected item. If there are multiple values, add them one by one and
    /// separate them with semicolons (;).
    pub const NODE_TEXT_PICKER_OPTION_VALUE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15002);
    /// Defines the font color, font size, and font weight for the top and bottom items in the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_TEXT_PICKER_DISAPPEAR_TEXT_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15003);
    /// Defines the font color, font size, and font weight for all items except the top, bottom, and selected
    /// items in the text picker. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_TEXT_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(15004);
    /// Defines the font color, font size, and font weight for the selected item in the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: array of five parameters of the string type, separated by semicolons (;).
    ///
    /// Parameter 1: font color, in #ARGB format.
    ///
    /// Parameter 2: font size, in fp. The value is a number.
    ///
    /// Parameter 3: font weight. Available options are ("bold", "normal", "bolder", "lighter", "medium", "regular").
    /// .
    /// Parameter 4: fonts, separated by commas (,).
    ///
    /// Parameter 5: font style. Available options are ("normal", "italic").
    ///
    /// Example: "#ff182431;14;normal;Arial,HarmonyOS Sans;normal".
    pub const NODE_TEXT_PICKER_SELECTED_TEXT_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15005);
    /// Defines the index of the default selected item in the data selection range of the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0...].i32: index of the default item in the data selection range.
    pub const NODE_TEXT_PICKER_SELECTED_INDEX: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15006);
    /// Defines whether to support scroll looping for the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to support scroll looping. The value <b>true</b> means to support scroll looping, and
    /// <b>false</b> means the opposite.
    ///
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].i32: The value <b>1</b> means to support scroll looping, and <b>0</b> means the opposite.
    pub const NODE_TEXT_PICKER_CAN_LOOP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(15007);
    /// Defines the height of each item in the picker. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: item height, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].f32: item height, in vp.
    pub const NODE_TEXT_PICKER_DEFAULT_PICKER_ITEM_HEIGHT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15008);
    /// Defines whether haptic feedback.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to feedback. The value <b>true</b> means to feedback, and
    /// <b>false</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].i32: whether to feedback.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_TEXT_PICKER_ENABLE_HAPTIC_FEEDBACK: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15010);
    /// Defines the style of the background in the selected state of the calendar picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: style of the background in the selected state of the calendar picker.
    /// The value range is [0, +∞). If the value is <b>0</b>, the background is a rectangle with square corners.
    /// If the value is in the 0–16 range, the background is a rectangle with rounded corners. If the value is equal to
    /// or greater than 16, the background is a circle.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: style of the background in the selected state of the calendar picker. The value range is [0, +∞).
    /// If the value is <b>0</b>, the background is a rectangle with square corners.
    /// If the value is in the 0–16 range, the background is a rectangle with rounded corners. If the value is equal to or
    /// greater than 16, the background is a circle.
    pub const NODE_CALENDAR_PICKER_HINT_RADIUS: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(16000);
    /// Defines the date of the selected item in the calendar picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: year of the selected date.
    ///
    /// .value[1].u32: month of the selected date.
    ///
    /// .value[2].u32: day of the selected date.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: year of the selected date.
    ///
    /// .value[1].u32: month of the selected date.
    ///
    /// .value[2].u32: day of the selected date.
    pub const NODE_CALENDAR_PICKER_SELECTED_DATE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(16001);
    /// Defines how the calendar picker is aligned with the entry component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode. The parameter type is [`ArkUI_CalendarAlignment`].
    ///
    /// .value[1]?.f32: offset of the picker relative to the entry component along the x-axis after alignment based on
    /// the specified alignment mode.
    ///
    /// .value[2]?.f32: offset of the picker relative to the entry component along the y-axis after alignment based on
    /// the specified alignment mode.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode. The parameter type is [`ArkUI_CalendarAlignment`].
    ///
    /// .value[1]?.f32: offset of the picker relative to the entry component along the x-axis after alignment based on
    /// the specified alignment mode.
    ///
    /// .value[2]?.f32: offset of the picker relative to the entry component along the y-axis after alignment based on
    /// the specified alignment mode.
    pub const NODE_CALENDAR_PICKER_EDGE_ALIGNMENT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(16002);
    /// Defines the font color, font size, and font weight in the entry area of the calendar picker.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.u32: font color of the entry area.
    ///
    /// .value[1]?.f32: font size of the entry area, in fp.
    ///
    /// .value[2]?.i32: font weight of the entry area. The parameter type is [`ArkUI_FontWeight`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: font color of the entry area.
    ///
    /// .value[1].f32: font size of the entry area, in fp.
    ///
    /// .value[2].i32: font weight of the entry area. The parameter type is [`ArkUI_FontWeight`].
    pub const NODE_CALENDAR_PICKER_TEXT_STYLE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(16003);
    /// Defines the start date of the calendar picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: date. The value like <b>"1970-1-1"</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: date.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_CALENDAR_PICKER_START: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(16004);
    /// Defines the end date of the calendar picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: date. The value like <b>"2100-12-31"</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: date.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_CALENDAR_PICKER_END: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(16005);
    /// Defines the color of the slider. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the slider, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the slider, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    pub const NODE_SLIDER_BLOCK_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17000);
    /// Defines the background color of the slider. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: background color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: background color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    pub const NODE_SLIDER_TRACK_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17001);
    /// Defines the color of the selected part of the slider track. This attribute can be set, reset, and obtained
    /// as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the selected part of the slider track, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the selected part of the slider track, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    pub const NODE_SLIDER_SELECTED_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17002);
    /// Sets whether to display the stepping value. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to display the stepping value. The value <b>1</b> means to display the stepping value,
    /// and <b>0</b> (default value) means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to display the stepping value. The value <b>1</b> means to display the stepping value,
    /// and <b>0</b> (default value) means the opposite.
    pub const NODE_SLIDER_SHOW_STEPS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17003);
    /// Defines the slider shape, which can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: shape. The parameter type is [`ArkUI_SliderBlockStyle`].
    ///
    /// .string?: depending on the shape. Optional.
    ///
    /// ARKUI_SLIDER_BLOCK_STYLE_IMAGE: image resource of the slider. Example: /pages/common/icon.png.
    ///
    /// ARKUI_SLIDER_BLOCK_STYLE_SHAPE: custom shape of the slider.
    ///
    /// There are five types:
    ///
    /// 1. Rectangle:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_RECTANGLE</b> for the rectangle shape.
    ///
    /// .value[2].f32: width of the rectangle.
    ///
    /// .value[3].f32: height of the rectangle.
    ///
    /// .value[4].f32: width of the rounded corner of the rectangle.
    ///
    /// .value[5].f32: height of the rounded corner of the rectangle.
    ///
    /// 2. Circle:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_CIRCLE</b> for the circle shape.
    ///
    /// .value[2].f32: width of the circle.
    ///
    /// .value[3].f32: height of the circle.
    ///
    /// 3.Ellipse:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_ELLIPSE</b> for the ellipse shape.
    ///
    /// .value[2].f32: width of the ellipse.
    ///
    /// .value[3].f32: height of the ellipse;
    ///
    /// 4. Path:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_PATH</b> for the path shape.
    ///
    /// .value[2].f32: width of the path.
    ///
    /// .value[3].f32: height of the path.
    ///
    /// .string: command for drawing the path.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: shape. The parameter type is [`ArkUI_SliderBlockStyle`].
    ///
    /// .string?: depending on the shape. Optional.
    ///
    /// ARKUI_SLIDER_BLOCK_STYLE_IMAGE: image resource of the slider. Example: /pages/common/icon.png.
    ///
    /// ARKUI_SLIDER_BLOCK_STYLE_SHAPE: custom shape of the slider.
    ///
    /// There are five types:
    ///
    /// 1. Rectangle:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_RECTANGLE</b> for the rectangle shape.
    ///
    /// .value[2].f32: width of the rectangle.
    ///
    /// .value[3].f32: height of the rectangle.
    ///
    /// .value[4].f32: width of the rounded corner of the rectangle.
    ///
    /// .value[5].f32: height of the rounded corner of the rectangle.
    ///
    /// 2. Circle:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_CIRCLE</b> for the circle shape.
    ///
    /// .value[2].f32: width of the circle.
    ///
    /// .value[3].f32: height of the circle.
    ///
    /// 3.Ellipse:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_ELLIPSE</b> for the ellipse shape.
    ///
    /// .value[2].f32: width of the ellipse.
    ///
    /// .value[3].f32: height of the ellipse;
    ///
    /// 4. Path:
    ///
    /// .value[1].i32: type of shape. The parameter type is [`ArkUI_ShapeType`].
    /// The value is <b>ARKUI_SHAPE_TYPE_PATH</b> for the path shape.
    ///
    /// .value[2].f32: width of the path.
    ///
    /// .value[3].f32: height of the path.
    ///
    /// .string: command for drawing the path.
    pub const NODE_SLIDER_BLOCK_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17004);
    /// Defines the current value of the slider. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: current value.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: current value.
    pub const NODE_SLIDER_VALUE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17005);
    /// Defines the minimum value of the slider. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: minimum value.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: minimum value.
    pub const NODE_SLIDER_MIN_VALUE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17006);
    /// Defines the maximum value of the slider. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: maximum value.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: maximum value.
    pub const NODE_SLIDER_MAX_VALUE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17007);
    /// Defines the step of the slider. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: step. The value range is [0.01, 100].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: step. The value range is [0.01, 100].
    pub const NODE_SLIDER_STEP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17008);
    /// Defines whether the slider moves horizontally or vertically. This attribute can be set, reset, and
    /// obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the slider moves horizontally or vertically.
    /// The parameter type is [`ArkUI_SliderDirection`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the slider moves horizontally or vertically.
    pub const NODE_SLIDER_DIRECTION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17009);
    /// Defines whether the slider values are reversed. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the slider values are reversed. The value <b>1</b> means that the slider values are
    /// reversed, and <b>0</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the slider values are reversed. The value <b>1</b> means that the slider values are
    /// reversed, and <b>0</b> means the opposite.
    pub const NODE_SLIDER_REVERSE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17010);
    /// Defines the style of the slider thumb and track. This attribute can be set, reset, and obtained
    /// as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: style of the slider thumb and track. The parameter type is [`ArkUI_SliderStyle`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: style of the slider thumb and track. The parameter type is [`ArkUI_SliderStyle`].
    pub const NODE_SLIDER_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17011);
    /// Sets the track thickness of the slider.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: track thickness of the slider, in vp. The default value is 4.0 vp when <b>NODE_SLIDER_STYLE</b>
    /// is set to <b>ARKUI_SLIDER_STYLE_OUT_SET</b> and 20.0 vp when <b>NODE_SLIDER_STYLE</b> is set to
    /// <b>ARKUI_SLIDER_STYLE_IN_SET</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: track thickness of the slider, in vp.
    pub const NODE_SLIDER_TRACK_THICKNESS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(17012);
    /// Defines whether haptic feedback.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to feedback. The value <b>true</b> means to feedback, and
    /// <b>false</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].i32: whether to feedback.
    ///
    /// When enabling haptic feedback, you need to add "ohos.permission.VIBRATE" in the
    /// requestPermissions field of the module.json5 file to enable vibration permission.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_SLIDER_ENABLE_HAPTIC_FEEDBACK: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(17013);
    /// Set the selection status of an option button. Attribute setting,
    /// attribute resetting, and attribute obtaining are supported.
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: check status of an option button. The default value is false.
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: selection status of an option button.
    pub const NODE_RADIO_CHECKED: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(18000);
    /// Set the styles of the selected and deselected states of the option button.
    /// The attribute setting, attribute resetting, and attribute obtaining are supported.
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0]?. u32: color of the mother board in enabled state.
    ///
    /// The type is 0xARGB, and the default value is 0xFF007DFF.
    ///
    /// .value[1]?. u32: stroke color in the close state. The type is 0xARGB,
    ///
    /// and the default value is 0xFF182431.
    ///
    /// .value[2]?. u32: color of the internal round pie in the enabled state.
    ///
    /// The type is 0xARGB, and the default value is 0xFFFFFFFF.
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0]. u32: color of the mother board in enabled state.
    ///
    /// The type is 0xARGB, and the default value is 0xFF007DFF.
    ///
    /// .value[1]. u32: stroke color in the close state. The type is 0xARGB,
    ///
    /// and the default value is 0xFF182431.
    ///
    /// .value[2]. u32: color of the internal round pie in the enabled state.
    ///
    /// The type is 0xARGB, and the default value is 0xFFFFFFF.
    pub const NODE_RADIO_STYLE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(18001);
    /// Sets the value of the current radio.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .string: radio value.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: radio value.
    pub const NODE_RADIO_VALUE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(18002);
    /// Set the group name of the current Radio group, only one radio of the same group can be selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .string: name of the group to which the current option box belongs.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: name of the group to which the current option box belongs.
    pub const NODE_RADIO_GROUP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(18003);
    /// Set the image frames for the image animator. Dynamic updates is not supported.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .size: number of the images.
    ///
    /// .object: array of the images, the type is [`ArkUI_ImageAnimatorFrameInfo`] array.
    ///
    ///
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .size: number of the images.
    ///
    /// .object: array of the images, the type is [`ArkUI_ImageAnimatorFrameInfo`] array.
    pub const NODE_IMAGE_ANIMATOR_IMAGES: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(19000);
    /// Set the playback status of the animation for the image animator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: the playback status of the animation, the type is [`ArkUI_AnimationStatus`],
    /// and the default value is ARKUI_ANIMATION_STATUS_INITIAL.
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: the playback status of the animation, the type is [`ArkUI_AnimationStatus`].
    pub const NODE_IMAGE_ANIMATOR_STATE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(19001);
    /// Set the playback duration for the image animator. When the duration is 0, no image is played.
    /// The value change takes effect only at the beginning of the next cycle.
    /// When a separate duration is set in images, the setting of this attribute is invalid.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: the playback duration, the unit is ms and the default value is 1000.
    ///
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: the playback duration, the unit is ms.
    pub const NODE_IMAGE_ANIMATOR_DURATION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(19002);
    /// Set the playback direction for the image animator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: the playback direction. 0 indicates that images are played from the first one to the last one,
    /// and 1 indicates that images are played from the last one to the first one.
    ///
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: the playback direction. 0 indicates that images are played from the first one to the last one,
    /// and 1 indicates that images are played from the last one to the first one.
    pub const NODE_IMAGE_ANIMATOR_REVERSE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(19003);
    /// Set whether the image size is the same as the component size.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: whether the image size is the same as the component size.
    /// 1 indicates the image size is the same as the component size.
    /// In this case, the width, height, top, and left attributes of the image are invalid.
    /// 0 indicates the image size is customized.
    /// The width, height, top, and left attributes of each image must be set separately.
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: whether the image size is the same as the component size.
    /// 1 indicates the image size is the same as the component size.
    /// 0 indicates the image size is customized.
    pub const NODE_IMAGE_ANIMATOR_FIXED_SIZE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(19004);
    /// Set the status before and after execution of the animation in the current playback direction.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: the status before and after execution of the animation in the current playback direction,
    /// the type is {ArkUI_AnimationFillMode} and the default value is ARKUI_ANIMATION_FILL_MODE_FORWARDS.
    ///
    ///
    /// Attribute obtaining method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].i32: the status before and after execution of the animation in the current playback direction,
    /// the type is {ArkUI_AnimationFillMode}.
    pub const NODE_IMAGE_ANIMATOR_FILL_MODE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(19005);
    /// Set the number of times that the animation is played.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: the number of times that the animation is played.
    ///
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] Parameter format:
    ///
    /// .value[0].i32: the number of times that the animation is played.
    pub const NODE_IMAGE_ANIMATOR_ITERATION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(19006);
    /// Defines the name of the checkboxgroup.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: component name.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: component name.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP_NAME: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(21000);
    /// Defines whether the checkboxgroup is selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the checkboxgroup is selected.
    /// The value <b>1</b> means that the checkboxgroup is selected, and <b>0</b> means the opposite.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The value <b>1</b> means that the checkboxgroup is selected, and <b>0</b> means the opposite.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP_SELECT_ALL: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(21001);
    /// Defines the color of the checkboxgroup when it is selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the checkboxgroup when it is selected, in 0xARGB format,
    /// for example, <b>0xFF1122FF</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the checkboxgroup when it is selected, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP_SELECTED_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(21002);
    /// Defines the border color of the checkboxgroup when it is not selected.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP_UNSELECTED_COLOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(21003);
    /// Defines the internal icon style of the checkboxgroup.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    /// .value[1]?.f32: size of the internal mark, in vp. Optional.
    ///
    /// .value[2]?.f32: stroke width of the internal mark, in vp. Optional. The default value is <b>2</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: border color, in 0xARGB format, for example, <b>0xFF1122FF</b>.
    ///
    /// .value[1].f32: size of the internal mark, in vp.
    ///
    /// .value[2].f32: stroke width of the internal mark, in vp. The default value is <b>2</b>.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP_MARK: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(21004);
    /// Defines the shape of the checkboxgroup.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: component shape. The parameter type is [`ArkUI_CheckboxShape`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: component shape. The parameter type is [`ArkUI_CheckboxShape`].
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP_SHAPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(21005);
    /// Defines the alignment mode of the child components in the container. This attribute can be set, reset,
    /// and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode. The data type is [`ArkUI_Alignment`].
    /// The default value is <b>ARKUI_ALIGNMENT_CENTER</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode. The data type is [`ArkUI_Alignment`].
    pub const NODE_STACK_ALIGN_CONTENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1000000);
    /// Defines the scrollbar status. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: scrollbar status. The parameter type is [`ArkUI_ScrollBarDisplayMode`]. The default value is
    /// <b>ARKUI_SCROLL_BAR_DISPLAY_MODE_AUTO</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: scrollbar status. The parameter type is [`ArkUI_ScrollBarDisplayMode`].
    pub const NODE_SCROLL_BAR_DISPLAY_MODE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1002000);
    /// Defines the width of the scrollbar. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: width of the scrollbar, in vp. The default value is <b>4</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: width of the scrollbar, in vp.
    pub const NODE_SCROLL_BAR_WIDTH: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002001);
    /// Defines the color of the scrollbar. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .data[0].u32: color of the scrollbar, in 0xARGB format.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .data[0].u32: color of the scrollbar, in 0xARGB format.
    pub const NODE_SCROLL_BAR_COLOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002002);
    /// Defines the scroll direction. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: scroll direction. The parameter type is [`ArkUI_ScrollDirection`].
    /// The default value is <b>ARKUI_SCROLL_DIRECTION_VERTICAL</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: scroll direction. The parameter type is [`ArkUI_ScrollDirection`].
    pub const NODE_SCROLL_SCROLL_DIRECTION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1002003);
    /// Defines the effect used at the edges of the component when the boundary of the scrollable content is
    /// reached. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: effect used at the edges of the component when the boundary of the scrollable content is reached.
    /// The parameter type is [`ArkUI_EdgeEffect`]. The default value is <b>ARKUI_EDGE_EFFECT_NONE</b>.
    ///
    /// .value[1]?.i32: whether to enable the scroll effect when the component content size is smaller than the
    /// component itself. Optional. The value <b>1</b> means to enable the scroll effect, and <b>0</b> means the
    /// opposite. The default value is <b>1</b>.
    ///
    /// .value[2]?.i32: direction in which the effect takes effect. The parameter type is [`ArkUI_EffectEdge`].
    /// The default value is <b>ARKUI_EFFECT_EDGE_START | ARKUI_EFFECT_EDGE_END</b>. This parameter is supported since
    /// API version 16.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: effect used at the edges of the component when the boundary of the scrollable content is reached.
    /// The parameter type is [`ArkUI_EdgeEffect`].
    ///
    /// .value[1].i32: whether to enable the scroll effect when the component content size is smaller than the component
    /// itself. Optional. The value <b>1</b> means to enable the scroll effect, and <b>0</b> means the opposite.
    ///
    /// .value[2].i32: edge for which the effect takes effect when the boundary of the scrollable content is reached.
    /// The parameter type is [`ArkUI_EffectEdge`]. This parameter is supported since API version 16.
    pub const NODE_SCROLL_EDGE_EFFECT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002004);
    /// Defines whether to support scroll gestures. When this attribute is set to <b>false</b>, scrolling by
    /// finger or mouse is not supported, but the scroll controller API is not affected.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to support scroll gestures. The default value is <b>true</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to support scroll gestures.
    pub const NODE_SCROLL_ENABLE_SCROLL_INTERACTION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1002005);
    /// Defines the friction coefficient. It applies only to gestures in the scrolling area, and it affects only
    /// indirectly the scroll chaining during the inertial scrolling process.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: friction coefficient. The default value is <b>0.6</b> for non-wearable devices and <b>0.9</b>
    /// for wearable devices.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: friction coefficient.
    pub const NODE_SCROLL_FRICTION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002006);
    /// Defines the scroll snapping mode. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode for the scroll snap position. The parameter type is [`ArkUI_ScrollSnapAlign`].
    /// The default value is <b>ARKUI_SCROLL_SNAP_ALIGN_NONE</b>.
    ///
    /// .value[1].i32: whether to enable the snap to start feature. When scroll snapping is defined for the
    /// <b><Scroll></b> component, setting this attribute to <b>false</b> enables the component to scroll between the
    /// start edge and the first snap point. The default value is <b>true</b>. It is valid only when there are multiple
    /// snap points.
    ///
    /// .value[2].i32: Whether to enable the snap to end feature. When scroll snapping is defined for the
    /// <b><Scroll></b> component, setting this attribute to <b>false</b> enables the component to scroll between the
    /// end edge and the last snap point. The default value is <b>true</b>. It is valid only when there are multiple
    /// snap points.
    ///
    /// .value[3...].f32: snap points for the <b><Scroll></b> component. Each snap point defines the offset from an
    /// edge to which the <b><Scroll></b> component can scroll.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode for the scroll snap position. The parameter type is [`ArkUI_ScrollSnapAlign`].
    ///
    /// .value[1].i32: whether to enable the snap to start feature. When scroll snapping is defined for the
    /// <b><Scroll></b> component, setting this attribute to <b>false</b> enables the component to scroll between the
    /// start edge and the first snap point.
    ///
    /// .value[2].i32: Whether to enable the snap to end feature. When scroll snapping is defined for the
    /// <b><Scroll></b> component, setting this attribute to <b>false</b> enables the component to scroll between the
    /// end edge and the last snap point.
    ///
    /// .value[3...].f32: snap points for the <b><Scroll></b> component. Each snap point defines the offset from an edge
    /// to which the <b><Scroll></b> component can scroll.
    pub const NODE_SCROLL_SNAP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002007);
    /// Defines the nested scrolling options. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: nested scrolling option when the component scrolls forward.
    /// The parameter type is [`ArkUI_ScrollNestedMode`].
    ///
    /// .value[1].i32: nested scrolling option when the component scrolls backward.
    /// The parameter type is [`ArkUI_ScrollNestedMode`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: nested scrolling option when the component scrolls forward.
    /// The parameter type is [`ArkUI_ScrollNestedMode`].
    ///
    /// .value[1].i32: nested scrolling option when the component scrolls backward.
    /// The parameter type is [`ArkUI_ScrollNestedMode`].
    pub const NODE_SCROLL_NESTED_SCROLL: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002008);
    /// Defines the specified position to scroll to. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: horizontal scrolling offset, in vp.
    ///
    /// .value[1].f32: vertical scrolling offset, in vp.
    ///
    /// .value[2]?.i32: scrolling duration, in milliseconds. Optional.
    ///
    /// .value[3]?.i32: scrolling curve. Optional. The parameter type is [`ArkUI_AnimationCurve`].
    /// The default value is <b>ARKUI_CURVE_EASE</b>.
    ///
    /// .value[4]?.i32: whether to enable the default spring animation. Optional. The default value <b>0</b> means not
    /// to enable the default spring animation.
    ///
    /// .value[5]?.i32: Optional value, sets whether scrolling can cross the boundary.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: horizontal scrolling offset, in vp.
    ///
    /// .value[1].f32: vertical scrolling offset, in vp.
    pub const NODE_SCROLL_OFFSET: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002009);
    /// Defines the edge position to scroll to. This attribute can be set and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: edge position to scroll to. The parameter type is [`ArkUI_ScrollEdge`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the container at the edge position. The value <b>-1</b> means that the container is not
    /// at the edge position. If the container is at the edge position, the parameter type is [`ArkUI_ScrollEdge`].
    pub const NODE_SCROLL_EDGE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002010);
    /// Defines whether to enable the swipe-to-turn-pages feature. This attribute can be set, reset, and obtained
    /// as required through APIs.
    ///
    /// If both <b>enablePaging</b> and <b>scrollSnap</b> are set, <b>scrollSnap</b> takes effect, but
    /// <b>enablePaging</b> does not.
    ///
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable the swipe-to-turn-pages feature. The default value is <b>false</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable the swipe-to-turn-pages feature.
    pub const NODE_SCROLL_ENABLE_PAGING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002011);
    /// Scroll to the next or previous page.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32 Indicates whether to scroll to next page. Value 0 indicates scroll to next page and value 1
    /// indicates scroll to previous page.
    ///
    /// .value[1]?.i32 Indicates whether to enable animation. Value 1 indicates enable and 0 indicates disable.
    pub const NODE_SCROLL_PAGE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002012);
    /// Scroll a specified distance.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32：Horizontal scrolling distance in vp;
    ///
    /// .value[1].f32: Vertical scrolling distance in vp;
    pub const NODE_SCROLL_BY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002013);
    /// Performs inertial scrolling based on the initial velocity passed in.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: Initial velocity of inertial scrolling. Unit: vp/s. If the value specified is 0, it is
    /// considered as invalid, and the scrolling for this instance will not take effect. If the value is positive,
    /// the scroll will move downward; if the value is negative, the scroll will move upward.
    ///
    ///
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub const NODE_SCROLL_FLING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002014);
    /// Sets the fading effect for the edges of scrollable components.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    /// .value[0].i32: whether to enable the fading effect on edges. The value 0 means to disable the fading effect,
    /// and 1 means to enable it.
    /// .value[1]?.f32: length of the fading effect on edges, in vp. Default value: 32.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    /// .value[0].i32: whether the fading effect on edges is enabled. The value 0 means that the fading effect is
    /// disabled, and 1 means that it is enabled.
    /// .value[1].f32: length of the fading effect on edges, in vp.
    ///
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const NODE_SCROLL_FADING_EDGE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002015);
    /// Obtains the total size of all child components when fully expanded in the scrollable component.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: total width of all child components when fully expanded in the scrollable component.
    /// The default unit is vp.
    ///
    /// .value[1].f32: total height of all child components when fully expanded in the scrollable component.
    /// The default unit is vp.
    ///
    /// When <b>NODE_PADDING</b>, <b>NODE_MARGIN</b>, or <b>NODE_BORDER_WIDTH</b> is set, the values are rounded to the
    /// nearest pixel when being converted from vp to px.
    /// The returned values are calculated based on these rounded pixel values.
    ///
    ///
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const NODE_SCROLL_SIZE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002016);
    /// Sets the offset from the start of the scrollable components content.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: offset from the start of the content, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: offset from the start of the content, in vp.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_SCROLL_CONTENT_START_OFFSET: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1002017);
    /// Sets the offset from the end of the scrollable components content.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: offset from the end of the content, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: offset from the end of the content, in vp.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_SCROLL_CONTENT_END_OFFSET: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1002018);
    /// Defines the maximum starting fling speed of the scrollable when the fling animation starts.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: maximum starting fling speed, Unit: vp/s
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: maximum starting fling speed, Unit: vp/s
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_SCROLL_FLING_SPEED_LIMIT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1002019);
    /// Defines the clip mode of the scrollable.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: clip content mode, The parameter type is [`ArkUI_ContentClipMode`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: clip content mode, The parameter type is [`ArkUI_ContentClipMode`].
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_SCROLL_CLIP_CONTENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002020);
    /// Defines whether the scrollable scrolls back to top when status bar is clicked.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether the scrollable scrolls back to top when status bar is clicked.
    /// The value <b>1</b> means to scroll back to top, and <b>0</b> means the opposite. The default value is <b>0/b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether the scrollable scrolls back to top when status bar is clicked.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_SCROLL_BACK_TO_TOP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1002021);
    /// Defines the direction in which the list items are arranged. This attribute can be set, reset, and
    /// obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: direction in which the list items are arranged. The parameter type is [`ArkUI_Axis`].
    /// The default value is <b>ARKUI_AXIS_VERTICAL</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: direction in which the list items are arranged. The parameter type is [`ArkUI_Axis`].
    pub const NODE_LIST_DIRECTION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003000);
    /// Defines whether to pin the header to the top or the footer to the bottom in the <b><ListItemGroup></b>
    /// component. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to pin the header to the top or the footer to the bottom in the <b><ListItemGroup></b>
    /// component. It is used together with the <b><ListItemGroup></b> component. The parameter type is
    /// [`ArkUI_StickyStyle`]. The default value is <b>ARKUI_STICKY_STYLE_NONE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to pin the header to the top or the footer to the bottom in the <b><ListItemGroup></b>
    /// component. It is used together with the <b><ListItemGroup></b> component. The parameter type is
    /// [`ArkUI_StickyStyle`].
    pub const NODE_LIST_STICKY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003001);
    /// Defines the spacing between list items. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: spacing between list items along the main axis. The default value is <b>0</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: spacing between list items along the main axis.
    pub const NODE_LIST_SPACE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003002);
    /// Defines the list adapter. The attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: [`ArkUI_NodeAdapter`] object as the adapter.
    pub const NODE_LIST_NODE_ADAPTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003003);
    /// Sets the number of cached items in the list adapter.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: number of cached items in the list adapter.
    ///
    /// .value[1]?.i32: whether to show cached items. The value <b>0</b> means to hide cached items, and <b>0</b> means
    /// to show cached items. The default value is <b>0</b>. This parameter is supported since API version 15.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: number of cached items in the list adapter.
    ///
    /// .value[1].i32: whether to show cached items. The value <b>0</b> means to hide cached items, and <b>0</b> means
    /// to show cached items. This parameter is supported since API version 15.
    pub const NODE_LIST_CACHED_COUNT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003004);
    /// Scroll to the specified index.
    ///
    /// When activating the smooth animation, all items passed through will be loaded and layout calculated, which can
    /// lead to performance issues when loading a large number of items.
    ///
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32：The index value of the target element to be slid to in the current container.
    ///
    /// .value[1]?.i32：Set whether there is an action when sliding to the index value of a list item in the list, where
    /// 1 indicates an action and 0 indicates no action. Default value: 0。
    ///
    /// .value[2]?.i32：Specify the alignment of the sliding element with the current container,The parameter type is
    /// [`ArkUI_ScrollAlignment`], default value is ARKUI_SCROLL_ALIGNMENT_START.
    ///
    /// .value[3]?.f32: extra offset, in vp. The default value is <b>0</b>.
    /// This parameter is supported since API version 15.
    pub const NODE_LIST_SCROLL_TO_INDEX: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003005);
    /// Sets the alignment mode of list items along the cross axis when the cross-axis width of the list is
    /// greater than the cross-axis width of list items multiplied by the value of lanes.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode of list items along the cross axis.
    /// The parameter type is [`ArkUI_ListItemAlignment`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode of list items along the cross axis.
    /// The parameter type is [`ArkUI_ListItemAlignment`].
    pub const NODE_LIST_ALIGN_LIST_ITEM: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003006);
    /// Set the default spindle size for the List subcomponent.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: The parameter format is [`ArkUI-ListChildrenMainSize`]
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: The parameter format is [`ArkUI-ListChildrenMainSize`]
    pub const NODE_LIST_CHILDREN_MAIN_SIZE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1003007);
    /// Set the index value of the item displayed at the start of the viewport
    /// when the current List is first loaded.This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: index value of the item displayed at
    /// the start of the viewport when the current List is loaded for the first time. Default value: 0.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: index value of the item displayed at
    /// the start of the viewport when the current List is loaded for the first time. Default value: 0.
    pub const NODE_LIST_INITIAL_INDEX: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003008);
    /// sets the ListItem splitter style. By default, there is no splitter.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] Format:
    ///
    /// .value[0].u32: divider color, type 0xargb;
    ///
    /// .value[1].f32: dividing line width;
    ///
    /// .value[2].f32: the distance between the divider and the beginning of the side of the list, unit vp;
    ///
    /// .value[3].f32: the distance between the divider and the end of the side of the list (unit: vp).
    ///
    ///
    ///
    /// Attribute fetch method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .value[0].u32: divider color, type 0xargb;
    ///
    /// .value[1].f32: dividing line width;
    ///
    /// .value[2].f32: the distance between the divider and the beginning of the side of the list, unit vp;
    ///
    /// .value[3].f32: the distance between the divider and the end of the side of the list (unit: vp).
    pub const NODE_LIST_DIVIDER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003009);
    /// Scrolls to the item with the specified index in the specified list item group.
    ///
    /// When <b>smooth</b> is set to <b>true</b>, all passed items are loaded and counted in layout calculation.
    /// This may result in performance issues if a large number of items are involved.
    ///
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: index of the target list item group in the current list.
    ///
    /// .value[1].i32: index of the target list item in the list item group.
    ///
    /// .value[2]?.i32: whether to enable the smooth animation for scrolling to the item with the specified index.
    /// The value <b>1</b> means to enable the animation, and <b>0</b> means the opposite.
    /// The default value is <b>0</b>.
    ///
    /// .value[3]?.i32: how the item to scroll to is aligned with the container. The parameter type is
    /// [`ArkUI_ScrollAlignment`]. The default value is <b>ARKUI_SCROLL_ALIGNMENT_START</b>.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_LIST_SCROLL_TO_INDEX_IN_GROUP: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1003010);
    /// Sets the number of lanes in the list.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: number of lanes in the list. If the maximum and minimum lane widths are set, setting the number
    /// of lanes will not take effect.
    ///
    /// .value[1]?.f32: minimum lane width, in vp.
    ///
    /// .value[2]?.f32: maximum column width, in vp.
    ///
    /// .value[3]?.f32: lane spacing, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: number of lanes in the list.
    ///
    /// .value[1].f32: minimum lane width, in vp.
    ///
    /// .value[2].f32: maximum column width, in vp.
    ///
    /// .value[3].f32: lane spacing, in vp.
    ///
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_LIST_LANES: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1003011);
    /// Sets the list snap alignment mode.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: alignment mode for the list snap position. The parameter type is [`ArkUI_ScrollSnapAlign`].
    /// The default value is <b>ARKUI_SCROLL_SNAP_ALIGN_NONE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: alignment mode for the list snap position. The parameter type is [`ArkUI_ScrollSnapAlign`].
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_LIST_SCROLL_SNAP_ALIGN: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1003012);
    /// Sets whether to maintain the visible content's position when data is inserted or deleted outside the
    /// display area of the <b>List</b> component.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to maintain the visible content's position when data is inserted or deleted outside the
    /// display area of the <b>List</b> component. The value <b>0</b> means not to maintain the visible content's
    /// position, and <b>1</b> means the opposite. The default value is <b>0</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to maintain the visible content's position when data is inserted or deleted outside the
    /// display area of the <b>List</b> component. The value <b>0</b> means not to maintain the visible content's
    /// position, and <b>1</b> means the opposite. The default value is <b>0</b>.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_LIST_MAINTAIN_VISIBLE_CONTENT_POSITION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1003013);
    /// Defines whether to enable loop playback for the swiper.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable loop playback. The value <b>1</b> means to enable loop playback, and <b>0</b>
    /// means the opposite. The default value is <b>1/b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable loop playback. The value <b>1</b> means to enable loop playback, and <b>0</b>
    /// means the opposite. The default value is <b>1</b>.
    pub const NODE_SWIPER_LOOP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001000);
    /// Defines whether to enable automatic playback for child component switching in the swiper.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable automatic playback for child component switching. The value <b>1</b>
    /// means to enable automatic playback, and <b>0</b> means the opposite. The default value is <b>0</b>.
    ///
    ///
    ///
    /// .value[1]?.i32: whether to stop automatic playback when the user touches the screen. The value <b>1</b> means
    /// to stop automatic playback, and <b>0</b> means the opposite. The default value is <b>1</b>. This parameter is
    /// supported since API version 16.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable automatic playback for child component switching. The value <b>1</b> means
    /// to enable automatic playback, and <b>0</b> means the opposite. The default value is <b>0</b>.
    ///
    /// .value[1].i32: whether to stop automatic playback when the user touches the screen. The value <b>1</b> means to
    /// stop automatic playback, and <b>0</b> means the opposite. This parameter is supported since API version 16.
    pub const NODE_SWIPER_AUTO_PLAY: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001001);
    /// Defines whether to enable the navigation point indicator for the swiper. This attribute can be set,
    /// reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to enable the navigation point indicator. The value <b>1</b> means to enable the
    /// navigation point indicator, and <b>0</b> means the opposite. The default value is <b>1</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to enable the navigation point indicator. The value <b>1</b> means to enable the
    /// navigation point indicator, and <b>0</b> means the opposite. The default value is <b>1</b>.
    pub const NODE_SWIPER_SHOW_INDICATOR: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1001002);
    /// Defines the interval for automatic playback. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: interval for automatic playback, in milliseconds.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: interval for automatic playback, in milliseconds.
    pub const NODE_SWIPER_INTERVAL: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001003);
    /// Defines whether vertical swiping is used for the swiper. This attribute can be set, reset, and obtained
    /// as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether vertical swiping is used. The value <b>1</b> means that vertical swiping is used, and
    /// <b>0</b> means the opposite. The default value is <b>0</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether vertical swiping is used. The value <b>1</b> means that vertical swiping is used, and
    /// <b>0</b> means the opposite. The default value is <b>0</b>.
    pub const NODE_SWIPER_VERTICAL: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001004);
    /// Defines the duration of the animation for switching child components. This attribute can be set, reset,
    /// and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: duration of the animation for switching child components, in milliseconds. The default value is
    /// <b>400</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: duration of the animation for switching child components, in milliseconds. The default value is
    /// <b>400</b>.
    pub const NODE_SWIPER_DURATION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001005);
    /// Defines the animation curve for the swiper. This attribute can be set, reset, and obtained as required
    /// through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: animation curve. The parameter type is [`ArkUI_AnimationCurve`].
    /// The default value is <b>ARKUI_CURVE_LINEAR</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: animation curve. The parameter type is [`ArkUI_AnimationCurve`].
    /// The default value is <b>ARKUI_CURVE_LINEAR</b>.
    pub const NODE_SWIPER_CURVE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001006);
    /// Defines the spacing between child components in the swiper.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: spacing between child components.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: spacing between child components.
    pub const NODE_SWIPER_ITEM_SPACE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001007);
    /// Defines the index of the child component currently displayed in the swiper.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: index value of the child component.
    ///
    /// .value[1]?.i32: animation mode, the parameter type is [`ArkUI_SwiperAnimationMode`].
    ///
    /// The default value is ARKUI_SWIPER_NO_ANIMATION. This parameter is valid only for the current call.
    ///
    /// This parameter is supported since API version 15.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: index value of the child component.
    pub const NODE_SWIPER_INDEX: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001008);
    /// Defines the number of elements to display per page.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: index value of the child component.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: index value of the child component.
    pub const NODE_SWIPER_DISPLAY_COUNT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001009);
    /// Defines whether to disable the swipe feature.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to disable the swipe feature. The value <b>1</b> means to disable
    /// the swipe feature, and <b>0</b> means the opposite. The default value is <b>0</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to disable the swipe feature. The value <b>1</b> means to disable the swipe
    /// feature, and <b>0</b> means the opposite. The default value is <b>0</b>.
    pub const NODE_SWIPER_DISABLE_SWIPE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001010);
    /// Defines whether to show the arrow when the mouse pointer hovers over the navigation point indicator.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to show the arrow when the mouse pointer hovers over the navigation point indicator.
    /// The parameter type is [`ArkUI_SwiperArrow`].
    ///
    /// The default value is <b>ARKUI_SWIPER_ARROW_HIDE</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to show the arrow when the mouse pointer hovers over the navigation point indicator.
    /// The parameter type is [`ArkUI_SwiperArrow`].
    ///
    /// The default value is <b>ARKUI_SWIPER_ARROW_HIDE</b>.
    pub const NODE_SWIPER_SHOW_DISPLAY_ARROW: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1001011);
    /// Defines the effect used at the edges of the swiper when the boundary of the scrollable content is reached.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: effect used at the edges of the swiper when the boundary of the scrollable content is reached.
    /// The parameter type is [`ArkUI_EdgeEffect`].
    ///
    /// The default value is <b>ARKUI_EDGE_EFFECT_SPRING</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: effect used at the edges of the swiper when the boundary of the scrollable content is reached.
    /// The parameter type is [`ArkUI_EdgeEffect`].
    pub const NODE_SWIPER_EDGE_EFFECT_MODE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1001012);
    /// Defines the swiper adapter. The attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: [`ArkUI_NodeAdapter`] object as the adapter.
    pub const NODE_SWIPER_NODE_ADAPTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001013);
    /// Sets the number of cached items in the swiper adapter.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: number of cached items in the swiper adapter.
    pub const NODE_SWIPER_CACHED_COUNT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001014);
    /// Defines the front margin of the wiper.
    /// The attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: the front margin. The unit is vp. The default value is <b>0.0</b>
    ///
    /// .value[1]?.i32: whether to ignore blanks, the default value is 0.
    /// The value <b>1</b> means to ignore blank areas, and <b>0</b> means the opposite.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: the front margin, the unit is vp.
    ///
    /// .value[1].i32: whether to ignore blank areas. The value <b>1</b> means to ignore blank areas, and <b>0</b> means
    /// the opposite.
    pub const NODE_SWIPER_PREV_MARGIN: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001015);
    /// Defines the back margin of the wiper.
    /// The attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: the back margin. The unit is vp. The default value is <b>0.0</b>
    ///
    /// .value[1]?.i32: whether to ignore blanks, the default value is 0.
    /// The value <b>1</b> means to ignore blank areas, and <b>0</b> means the opposite.
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: the back margin, the unit is vp.
    ///
    /// .value[1].i32: whether to ignore blank areas. The value <b>1</b> means to ignore blank areas, and <b>0</b> means
    /// the opposite.
    pub const NODE_SWIPER_NEXT_MARGIN: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001016);
    /// Defines the navigation indicator type of the swiper.
    /// The attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: navigation indicator type, the parameter type is [`ArkUI_SwiperIndicatorType`].
    ///
    /// .object: The parameter type is [`ArkUI_SwiperIndicator`].
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: navigation indicator type, the parameter type is [`ArkUI_SwiperIndicatorType`].
    ///
    /// .object: The parameter type is [`ArkUI_SwiperIndicator`].
    pub const NODE_SWIPER_INDICATOR: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001017);
    /// Set the nested scrolling mode for the Swiper component and parent component.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32：Nested scrolling patterns for Swiper components and parent components. The parameter type is
    /// [`ArkUI_SwiperNestedScrollMode`]
    ///
    /// The default value is <b>ARKUI_SWIPER_NESTED_SRCOLL_SELF_ONLY<b>
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32：Nested scrolling patterns for Swiper components and parent components. The parameter type is
    /// [`ArkUI_SwiperNestedScrollMode`]
    pub const NODE_SWIPER_NESTED_SCROLL: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1001018);
    /// Set the switcher component to flip to the specified page.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32：Specify the index value of the page in Swiper.
    ///
    /// .value[1]?.i32：Set whether there is an animation effect when flipping to the specified page. 1 indicates active
    /// effect, 0 indicates no active effect, default value is 0。
    pub const NODE_SWIPER_SWIPE_TO_INDEX: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1001019);
    /// Set to disable component navigation point interaction function。
    ///
    /// Property setting method parameter [`ArkUI-AttributeItem`] format:
    ///
    /// .value[0].i32：Set to disable the interaction function of component navigation points. When set to true, it
    /// indicates that the navigation points are interactive. The default value is true.
    ///
    /// The return value of the attribute acquisition method is in the format of [`ArkUI-AttributeItem`]：
    ///
    /// .value[0].i32：Set to disable component navigation point interaction.
    pub const NODE_SWIPER_INDICATOR_INTERACTIVE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1001020);
    /// Sets the page flipping mode using the mouse wheel.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: page flipping mode using the mouse wheel. The parameter type is [`ArkUI_PageFlipMode`].
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_PageFlipMode`]:
    ///
    /// .value[0].i32: page flipping mode using the mouse wheel.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_SWIPER_PAGE_FLIP_MODE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1001021);
    /// Set the delineation component of the ListItem, supporting property settings, property resets, and
    /// property acquisition interfaces.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .object: Construct using the [`ArkUI_ListitemSwipeActionOption`] object.
    ///
    ///
    ///
    /// The return value of the attribute acquisition method [`ArkUI_AttributeItem`] format:
    ///
    /// .object: Construct using the [`ArkUI_ListitemSwipeActionOption`] object.
    pub const NODE_LIST_ITEM_SWIPE_ACTION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1004000);
    /// Defines the header of the list item group.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: [`ArkUI_NodeHandle`] object to be used as the header of the list item group.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: [`ArkUI_NodeHandle`] object to be used as the header of the list item group.
    pub const NODE_LIST_ITEM_GROUP_SET_HEADER: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1005000);
    /// Defines the footer of the list item group. This attribute can be set, reset, and obtained as
    /// required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: [`ArkUI_NodeHandle`] object to be used as the footer of the list item group.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: [`ArkUI_NodeHandle`] object to be used as the footer of the list item group.
    pub const NODE_LIST_ITEM_GROUP_SET_FOOTER: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1005001);
    /// Defines the style of the divider for the list items. This attribute can be set, reset, and obtained
    /// as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].u32: color of the divider, in 0xARGB format.
    ///
    /// .value[1].f32: stroke width of the divider, in vp.
    ///
    /// .value[2].f32: distance between the divider and the start of the list, in vp.
    ///
    /// .value[3].f32: distance between the divider and the end of the list, in vp.
    ///
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].u32: color of the divider, in 0xARGB format.
    ///
    /// .value[1].f32: stroke width of the divider, in vp.
    ///
    /// .value[2].f32: distance between the divider and the start of the list, in vp.
    ///
    /// .value[3].f32: distance between the divider and the end of the list, in vp.
    ///
    pub const NODE_LIST_ITEM_GROUP_SET_DIVIDER: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1005002);
    /// Set the default spindle size for the ListItem Group subcomponent.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: The parameter format is [`ArkUI-ListChildrenMainSize`]
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: The parameter format is [`ArkUI-ListChildrenMainSize`]
    pub const NODE_LIST_ITEM_GROUP_CHILDREN_MAIN_SIZE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1005003);
    /// Defines the list item group adapter.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: [`ArkUI_NodeAdapter`] object as the adapter.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: [`ArkUI_NodeAdapter`] object.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_LIST_ITEM_GROUP_NODE_ADAPTER: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1005004);
    /// Defines the horizontal alignment mode of child components in the column.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: horizontal alignment mode of child components.
    /// The parameter type is [`ArkUI_HorizontalAlignment`].
    ///
    /// Default value: <b>ARKUI_HORIZONTAL_ALIGNMENT_CENTER</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: horizontal alignment mode of child components.
    /// The parameter type is [`ArkUI_HorizontalAlignment`].
    pub const NODE_COLUMN_ALIGN_ITEMS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1006000);
    /// Defines the vertical alignment mode of child components in the column.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: vertical alignment mode of child components. The parameter type is [`ArkUI_FlexAlignment`].
    ///
    /// Default value: <b>ARKUI_FLEX_ALIGNMENT_START</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: vertical alignment mode of child components. The parameter type is [`ArkUI_FlexAlignment`].
    pub const NODE_COLUMN_JUSTIFY_CONTENT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1006001);
    /// Defines the vertical alignment mode of child components in the row.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: vertical alignment mode of child components.
    /// The parameter type is [`ArkUI_VerticalAlignment`].
    ///
    /// Default value: <b>ARKUI_VERTICAL_ALIGNMENT_CENTER</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: vertical alignment mode of child components.
    /// The parameter type is [`ArkUI_VerticalAlignment`].
    pub const NODE_ROW_ALIGN_ITEMS: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1007000);
    /// Defines the horizontal alignment mode of child components in the row.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: horizontal alignment mode of child components.
    /// The parameter type is [`ArkUI_FlexAlignment`].
    ///
    /// Default value: <b>ARKUI_FLEX_ALIGNMENT_START</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: horizontal alignment mode of child components.
    /// The parameter type is [`ArkUI_FlexAlignment`].
    pub const NODE_ROW_JUSTIFY_CONTENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1007001);
    /// Defines the flex attribute. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0]?.i32: direction in which flex items are arranged. The parameter type is [`ArkUI_FlexDirection`].
    /// The default value is <b>ARKUI_FLEX_DIRECTION_ROW</b>.
    ///
    /// .value[1]?.i32: how the flex items are wrapped. The parameter type is [`ArkUI_FlexWrap`].
    /// The default value is <b>ARKUI_FLEX_WRAP_NO_WRAP</b>.
    ///
    /// .value[2]?.i32: alignment mode along the main axis. The parameter type is [`ArkUI_FlexAlignment`].
    /// The default value is <b>ARKUI_FLEX_ALIGNMENT_START</b>.
    ///
    /// .value[3]?.i32: alignment mode along the cross axis. The parameter type is [`ArkUI_ItemAlignment`].
    /// The default value is <b>ARKUI_ITEM_ALIGNMENT_START</b>.
    ///
    /// .value[4]?.i32: alignment mode along the cross axis for multi-line content. The parameter type is
    /// [`ArkUI_FlexAlignment`]. The default value is <b>ARKUI_FLEX_ALIGNMENT_START</b>.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: direction in which flex items are arranged.
    ///
    /// .value[1].i32: how the flex items are wrapped.
    ///
    /// .value[2].i32: alignment mode along the main axis.
    ///
    /// .value[3].i32: alignment mode along the cross axis.
    ///
    /// .value[4].i32: alignment mode along the cross axis for multi-line content.
    pub const NODE_FLEX_OPTION: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1008000);
    /// Sets whether the component is being refreshed.
    /// This attribute can be set and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: The parameter type is 1 or 0.
    pub const NODE_REFRESH_REFRESHING: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1009000);
    /// Sets the custom content in the pull-down area.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: The parameter type is [`ArkUI_NodeHandle`].
    pub const NODE_REFRESH_CONTENT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1009001);
    /// Set the pull-down hand coefficient.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32：Pull-down hand coefficient, valid value between 0 and 1.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32：Pull-down hand coefficient, valid value between 0 and 1.
    pub const NODE_REFRESH_PULL_DOWN_RATIO: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1009002);
    /// Sets the pull-down offset that initiates a refresh.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: pull-down offset, in vp. The default value is <b>64vp</b>.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: pull-down offset, in vp. The default value is <b>64vp</b>.
    pub const NODE_REFRESH_OFFSET: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1009003);
    /// Sets whether to initiate a refresh when the pull-down distance exceeds the value of <b>refreshOffset</b>.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: whether to initiate a refresh. The value <b>true</b> means to initiate a refresh, and
    /// <b>false</b> means the opposite.
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: whether to initiate a refresh. The value <b>1</b> means to initiate a refresh, and
    /// <b>0</b> means the opposite.
    pub const NODE_REFRESH_PULL_TO_REFRESH: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1009004);
    /// Defines the main axis direction of the <b><WaterFlow></b> component layout.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: main axis direction. The parameter type is [`ArkUI_FlexDirection`].
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: main axis direction. The parameter type is [`ArkUI_FlexDirection`].
    pub const NODE_WATER_FLOW_LAYOUT_DIRECTION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010000);
    /// Sets the number of columns in the water flow layout. If this parameter is not set, one column is used
    /// by default. This attribute can be set, reset, and obtained as required through APIs.
    /// For example, <b>'1fr 1fr 2fr'</b> indicates three columns, with the first column taking up 1/4 of the parent
    /// component's full width, the second column 1/4, and the third column 2/4.
    /// You can use <b>columnsTemplate('repeat(auto-fill,track-size)')</b> to automatically calculate the number of
    /// columns based on the specified column width <b>track-size</b>.
    /// <b>repeat</b> and <b>auto-fill</b> are keywords. The units for <b>track-size</b> can be px, vp (default), %,
    /// or a valid number.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: number of columns in the layout.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: number of columns in the layout.
    pub const NODE_WATER_FLOW_COLUMN_TEMPLATE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010001);
    /// Sets the number of rows in the water flow layout. If this parameter is not set, one row is used
    /// by default. This attribute can be set, reset, and obtained as required through APIs.
    /// For example, <b>'1fr 1fr 2fr'</b> indicates three rows, with the first row taking up 1/4 of the parent
    /// component's full height, the second row 1/4, and the third row 2/4.
    /// You can use <b>rowsTemplate('repeat(auto-fill,track-size)')</b> to automatically calculate the number of rows
    /// based on the specified row height <b>track-size</b>.
    /// <b>repeat</b> and <b>auto-fill</b> are keywords. The units for <b>track-size</b> can be px, vp (default), %,
    /// or a valid number.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: number of rows in the layout.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: number of rows in the layout.
    pub const NODE_WATER_FLOW_ROW_TEMPLATE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010002);
    /// Sets the gap between columns.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: gap between columns, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: gap between columns, in vp.
    pub const NODE_WATER_FLOW_COLUMN_GAP: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010003);
    /// Sets the gap between rows.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: gap between lines, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: gap between lines, in vp.
    pub const NODE_WATER_FLOW_ROW_GAP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1010004);
    /// Defines the water flow section configuration.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: An index calculated from 0 is converted to an integer,
    /// indicating that you want to start changing the position of the group.
    /// .object: [`ArkUI_WaterFlowSectionOption`] object.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .object: [`ArkUI_WaterFlowSectionOption`] object.
    pub const NODE_WATER_FLOW_SECTION_OPTION: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010005);
    /// Defines the water flow adapter. The attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: [`ArkUI_NodeAdapter`] object as the adapter.
    pub const NODE_WATER_FLOW_NODE_ADAPTER: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010006);
    /// Sets the number of cached items in the water flow adapter.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// value[0].i32：number of cached items in the water flow adapter.
    ///
    /// .value[1]?.i32：whether to the cached items will be displayed, 0: not displayed, 1: displayed, default value: 0.
    /// This parameter is supported since API version 16.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: number of cached items in the water flow adapter.
    ///
    /// .value[1].i32: whether to the cached items will be displayed, 0: not displayed, 1: displayed, default value: 0.
    /// This parameter is supported since API version 16.
    pub const NODE_WATER_FLOW_CACHED_COUNT: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010007);
    /// Set the custom display component at the end of the waterfall flow component.
    ///
    /// Attribute setting method [`ArkUI_AttributeItem`] parameter format:
    ///
    /// .object: Parameter type [`ArkUI_NodeHandle`].
    pub const NODE_WATER_FLOW_FOOTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1010008);
    /// Scroll to the specified index.
    ///
    /// When activating the smooth animation, all items passed through will be loaded and layout calculated, which can
    /// lead to performance issues when loading a large number of items.
    ///
    ///
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32：The index value of the target element to be slid to in the current container.
    ///
    /// .value[1]?.i32：Set whether there is an action when sliding to the index value of a list item in the list, where
    /// 1 indicates an action and 0 indicates no action. Default value is 0。
    ///
    /// .value[2]?.i32：Specify the alignment of the sliding element with the current container，The parameter type is
    /// [`ArkUI_ScrollAlignment`]. Default value is </b>ARKUI_SCROLL_ALIGNMENT_START</b>。
    pub const NODE_WATER_FLOW_SCROLL_TO_INDEX: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010009);
    /// Defines the size constraints to apply to water flow items.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: minimum width, in vp.
    ///
    /// .value[1].f32: maximum width, in vp.
    ///
    /// .value[2].f32: minimum height, in vp.
    ///
    /// .value[3].f32: maximum height, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: minimum width, in vp.
    ///
    /// .value[1].f32: maximum width, in vp.
    ///
    /// .value[2].f32: minimum height, in vp.
    ///
    /// .value[3].f32: maximum height, in vp.
    pub const NODE_WATER_FLOW_ITEM_CONSTRAINT_SIZE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010010);
    /// Defines the layout mode of the <b><WaterFlow></b> component.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: waterflow layout mode. The parameter type is [`ArkUI_WaterFlowLayoutMode`].
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].i32: waterflow layout mode. The parameter type is [`ArkUI_WaterFlowLayoutMode`].
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_WATER_FLOW_LAYOUT_MODE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1010011);
    /// Set the auxiliary line in the RelativeContaine container, supporting property setting,
    /// property reset and property acquisition interfaces.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .object: Auxiliary lines within the RelativeContaine container:
    ///
    ///
    ///
    /// Attribute acquisition method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .object: Auxiliary lines within the RelativeContaine container:
    pub const NODE_RELATIVE_CONTAINER_GUIDE_LINE: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1012000);
    /// Sets the barrier within the RelativeContaine container and supports property setting,
    /// property reset and property acquisition interfaces.
    ///
    /// Attribute setting method parameter [`ArkUI_AttributeItem`] format:
    ///
    /// .object: Auxiliary lines within the RelativeContaine container:
    ///
    ///
    ///
    /// Attribute acquisition method return value [`ArkUI_AttributeItem`] format:
    ///
    /// .object: Barrier within the RelativeContaine container:
    pub const NODE_RELATIVE_CONTAINER_BARRIER: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(1012001);
    /// Sets the number of columns in the grid layout. If this parameter is not set, one column is used
    /// by default. This attribute can be set, reset, and obtained as required through APIs.
    /// For example, <b>'1fr 1fr 2fr'</b> indicates three columns, with the first column taking up 1/4 of the parent
    /// component's full width, the second column 1/4, and the third column 2/4.
    /// You can use <b>columnsTemplate('repeat(auto-fill,track-size)')</b> to automatically calculate the number of
    /// columns based on the specified column width <b>track-size</b>.
    /// <b>repeat</b> and <b>auto-fill</b> are keywords. The units for <b>track-size</b> can be px, vp (default), %,
    /// or a valid number.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: number of columns in the layout.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: number of columns in the layout.
    pub const NODE_GRID_COLUMN_TEMPLATE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1013000);
    /// Sets the number of rows in the grid layout. If this parameter is not set, one row is used
    /// by default. This attribute can be set, reset, and obtained as required through APIs.
    /// For example, <b>'1fr 1fr 2fr'</b> indicates three rows, with the first row taking up 1/4 of the parent
    /// component's full height, the second row 1/4, and the third row 2/4.
    /// You can use <b>rowsTemplate('repeat(auto-fill,track-size)')</b> to automatically calculate the number of rows
    /// based on the specified row height <b>track-size</b>.
    /// <b>repeat</b> and <b>auto-fill</b> are keywords. The units for <b>track-size</b> can be px, vp (default), %,
    /// or a valid number.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .string: number of rows in the layout.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .string: number of rows in the layout.
    pub const NODE_GRID_ROW_TEMPLATE: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1013001);
    /// Sets the gap between columns. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: gap between columns, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: gap between columns, in vp.
    pub const NODE_GRID_COLUMN_GAP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1013002);
    /// Sets the gap between rows. This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: gap between lines, in vp.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// .value[0].f32: gap between lines, in vp.
    pub const NODE_GRID_ROW_GAP: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1013003);
    /// Defines the grid adapter. The attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .object: [`ArkUI_NodeAdapter`] object as the adapter.
    pub const NODE_GRID_NODE_ADAPTER: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1013004);
    /// Sets the number of cached items in the grid adapter.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].i32: number of cached items in the grid adapter.
    pub const NODE_GRID_CACHED_COUNT: ArkUI_NodeAttributeType = ArkUI_NodeAttributeType(1013005);
    /// Defines the column width of the text picker.
    /// This attribute can be set, reset, and obtained as required through APIs.
    ///
    /// Format of the [`ArkUI_AttributeItem`] parameter for setting the attribute:
    ///
    /// .value[0].f32: percentage of total width. The default value is that all colulmns are equal width.
    ///
    /// .value[1]?.f32: percentage of total width. The default value is that all colulmns are equal width.
    ///
    /// .value[2]?.f32: percentage of total width. The default value is that all colulmns are equal width.
    ///
    /// ...
    ///
    /// .value[n]?.f32: percentage of total width. The default value is that all colulmns are equal width.
    ///
    ///
    ///
    /// Format of the return value [`ArkUI_AttributeItem`]:
    ///
    /// value[0].f32: percentage of total width.
    ///
    /// value[1].f32: percentage of total width.
    ///
    /// value[2].f32: percentage of total width.
    ///
    /// ...
    ///
    /// value[n].f32: percentage of total width.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_TEXT_PICKER_COLUMN_WIDTHS: ArkUI_NodeAttributeType =
        ArkUI_NodeAttributeType(15009);
}
#[repr(transparent)]
/// Defines the ArkUI style attributes that can be set on the native side.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_NodeAttributeType(pub ::core::ffi::c_uint);
/// Defines the parameter type of the component callback event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_NodeComponentEvent {
    /// Data array object.
    pub data: [ArkUI_NumberValue; 12usize],
}
/// Defines the string type parameter used by the component callback event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_StringAsyncEvent {
    /// String.
    pub pStr: *const ::core::ffi::c_char,
}
/// Defines a hybrid data structure for component events.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_TextChangeEvent {
    /// String data
    pub pStr: *const ::core::ffi::c_char,
    /// Extended string data
    pub pExtendStr: *const ::core::ffi::c_char,
    /// Numeric data
    pub number: i32,
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_NodeEventType {
    /// Defines the gesture event type.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_UIInputEvent`].
    pub const NODE_TOUCH_EVENT: ArkUI_NodeEventType = ArkUI_NodeEventType(0);
    /// Defines the mount event.
    ///
    /// This event is triggered when the component is mounted and displayed.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_EVENT_ON_APPEAR: ArkUI_NodeEventType = ArkUI_NodeEventType(1);
    /// Defines the unmount event.
    ///
    /// This event is triggered when the component is unmounted and hidden.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_EVENT_ON_DISAPPEAR: ArkUI_NodeEventType = ArkUI_NodeEventType(2);
    /// Defines the area change event.
    ///
    /// This event is triggered when the component's size, position, or any other attribute that may
    /// affect its display area changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains 12 parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: original width of the target element, in vp.
    /// The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: original height of the target element, in vp.
    /// The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].f32</b>: original X coordinate of the target element's upper left corner
    /// relative to the parent element's, in vp. The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[3].f32</b>: original Y coordinate of the target element's upper left corner
    /// relative to the parent element's, in vp. The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[4].f32</b>: original X coordinate of the target element's upper left corner
    /// relative to the page's, in vp. The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[5].f32</b>: original Y coordinate of the target element's upper left corner
    /// relative to the page's, in vp. The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[6].f32</b>: new width of the target element, in vp. The value is a number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[7].f32</b>: new height of the target element, in vp. The value is a number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[8].f32</b>: new X coordinate of the target element's upper left corner relative
    /// to the parent element's, in vp. The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[9].f32</b>: new Y coordinate of the target element's upper left corner relative
    /// to the parent element's, in vp. The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[10].f32</b>: new X coordinate of the target element's upper left corner relative
    /// to the page's, in vp. The value type is number.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[11].f32</b>: new Y coordinate of the target element's upper left corner relative
    /// to the page's, in vp. The value type is number.
    pub const NODE_EVENT_ON_AREA_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(3);
    /// Defines the focus event.
    ///
    /// This event is triggered when the component obtains the focus.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_ON_FOCUS: ArkUI_NodeEventType = ArkUI_NodeEventType(4);
    /// Defines the blur event.
    ///
    /// This event is triggered when the component loses the focus.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_ON_BLUR: ArkUI_NodeEventType = ArkUI_NodeEventType(5);
    /// Defines the click event.
    ///
    /// This event is triggered when the component is clicked.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains 12 parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: X coordinate of the click relative to the upper left corner of the
    /// clicked component's original area, in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: Y coordinate of the click relative to the upper left corner of the
    /// clicked component's original area, in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].f32</b>: event timestamp. It is the interval between the time when the event
    /// is triggered and the time when the system starts, in microseconds.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[3].i32</b>: event input device. The value <b>1</b> indicates the mouse,
    /// <b>2</b> indicates the touchscreen, and <b>4</b> indicates the key.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[4].f32</b>: X coordinate of the click relative to the upper left corner of the
    /// application window, in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[5].f32</b>: Y coordinate of the click relative to the upper left corner of the
    /// application window, in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[6].f32</b>: X coordinate of the click relative to the upper left corner of the
    /// application screen, in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[7].f32</b>: Y coordinate of the click relative to the upper left corner of the
    /// application screen, in vp.
    pub const NODE_ON_CLICK: ArkUI_NodeEventType = ArkUI_NodeEventType(6);
    /// Defines event interception.
    ///
    /// This event is triggered when the component is touched.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_UIInputEvent`].
    pub const NODE_ON_TOUCH_INTERCEPT: ArkUI_NodeEventType = ArkUI_NodeEventType(7);
    /// Defines the visible area change event.
    ///
    /// This event is triggered when the ratio of the component's visible area to its total area is greater than or less
    /// than the threshold.
    /// Before registering this event, you must set <b>NODE_VISIBLE_AREA_CHANGE_RATIO</b>.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: how the ratio of the component's visible area to its total area
    /// changes compared to the previous one. The value <b>1</b> indicates an increase, and <b>0</b> indicates a
    /// decrease.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: ratio of the component's visible area to its total area when this
    /// callback is invoked.
    pub const NODE_EVENT_ON_VISIBLE_AREA_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(8);
    /// Defines the event triggered when the mouse pointer is moved over or away from the component.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: whether the mouse pointer is hovered over the component.
    /// The value <b>1</b> indicates that the mouse pointer is hovered over the component, and <b>0</b> indicates that
    /// the mouse pointer is moved away from the component.
    pub const NODE_ON_HOVER: ArkUI_NodeEventType = ArkUI_NodeEventType(9);
    /// Defines the click event.
    ///
    /// This event is triggered when the component is clicked by a mouse device button or when the mouse pointer moves
    /// within the component.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_UIInputEvent`].
    pub const NODE_ON_MOUSE: ArkUI_NodeEventType = ArkUI_NodeEventType(10);
    /// Defines the attach event.
    ///
    /// This event is triggered when the component is attached.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_EVENT_ON_ATTACH: ArkUI_NodeEventType = ArkUI_NodeEventType(11);
    /// Defines the detach event.
    ///
    /// This event is triggered when the component is detached.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_EVENT_ON_DETACH: ArkUI_NodeEventType = ArkUI_NodeEventType(12);
    /// Defines the accessibility action event.
    ///
    /// This event is triggered when The accessibility operation type has been set and
    /// corresponding operations have been carried out.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].u32</b>: accessibility action type，the union type is
    /// [`ArkUI_AccessibilityActionType`]
    pub const NODE_ON_ACCESSIBILITY_ACTIONS: ArkUI_NodeEventType = ArkUI_NodeEventType(13);
    /// Notifies the listener of the interaction state prior to a drop and drop operation.
    ///
    /// This event is triggered when a drag operation is about to start on a draggable item.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: corresponds to [`ArkUI_PreDragStatus`].
    pub const NODE_ON_PRE_DRAG: ArkUI_NodeEventType = ArkUI_NodeEventType(14);
    /// Called when the user starts to drag an ite
    ///
    /// A drag operation is recognized only when the dragged item is moved far enough.
    ///
    /// When the event callback occurs, the [`ArkUI_DragEvent`] object can be obtained from the
    /// [`ArkUI_NodeEvent`] object.
    pub const NODE_ON_DRAG_START: ArkUI_NodeEventType = ArkUI_NodeEventType(15);
    /// Called when a dragged item enters the boundaries of the current component.
    ///
    /// The current component refers to the component that listens for this event.
    ///
    /// When the event callback occurs, the [`ArkUI_DragEvent`] object can be obtained from the
    /// [`ArkUI_NodeEvent`] object.
    pub const NODE_ON_DRAG_ENTER: ArkUI_NodeEventType = ArkUI_NodeEventType(16);
    /// Called when a dragged item moves in the current component.
    ///
    /// The current component refers to the component that listens for this event.
    ///
    /// When the event callback occurs, the [`ArkUI_DragEvent`] object can be obtained from the
    /// [`ArkUI_NodeEvent`] object.
    pub const NODE_ON_DRAG_MOVE: ArkUI_NodeEventType = ArkUI_NodeEventType(17);
    /// Called when a dragged item leaves the boundaries of the current component.
    ///
    /// The current component refers to the component that listens for this event.
    ///
    /// When the event callback occurs, the [`ArkUI_DragEvent`] object can be obtained from the
    /// [`ArkUI_NodeEvent`] object.
    pub const NODE_ON_DRAG_LEAVE: ArkUI_NodeEventType = ArkUI_NodeEventType(18);
    /// Called when a dragged item is dropped on the current component.
    /// The component can obtain the drag data for processing through the callback.
    ///
    /// The current component refers to the component that listens for this event.
    ///
    /// When the event callback occurs, the [`ArkUI_DragEvent`] object can be obtained from the
    /// [`ArkUI_NodeEvent`] object.
    pub const NODE_ON_DROP: ArkUI_NodeEventType = ArkUI_NodeEventType(19);
    /// Called when a drag operation ends.
    /// The drag source can obtain the drag result by registering this callback.
    ///
    /// A drag operation ends when the dragged item is released.
    /// When the event callback occurs, the [`ArkUI_DragEvent`] object can be obtained from the
    /// [`ArkUI_NodeEvent`] object.
    pub const NODE_ON_DRAG_END: ArkUI_NodeEventType = ArkUI_NodeEventType(20);
    /// Defines the event triggered when a key event occurs.
    ///
    /// The callback can be triggered during interactions with a focused window using an external keyboard or other input
    /// device.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    ///
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const NODE_ON_KEY_EVENT: ArkUI_NodeEventType = ArkUI_NodeEventType(21);
    /// Defines the event triggered before the input method responds to the key action.
    ///
    /// If the return value of this callback is <b>true</b>, it is considered that the key event has been consumed, and
    /// subsequent event callbacks (<b>keyboardShortcut</b>, input method events, <b>onKeyEvent</b>) will be intercepted
    /// and no longer triggered.
    /// The callback can be triggered during interactions with a focused window using an external keyboard or other input
    /// device.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    ///
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const NODE_ON_KEY_PRE_IME: ArkUI_NodeEventType = ArkUI_NodeEventType(22);
    /// Defines the event triggered when the bound component receives a focus axis event after gaining focus.
    ///
    /// The event callback is triggered by interactions with a joystick and a focused component.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_UIInputEvent`].
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_ON_FOCUS_AXIS: ArkUI_NodeEventType = ArkUI_NodeEventType(23);
    /// Dispatch key event on the component node.
    ///
    /// When the component node receives a key event, this callback will be triggered instead of dispatching event to its
    /// children.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_DISPATCH_KEY_EVENT: ArkUI_NodeEventType = ArkUI_NodeEventType(24);
    /// Defines the event triggered when the bound component receives an axis event.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_UIInputEvent`].
    ///
    ///
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub const NODE_ON_AXIS: ArkUI_NodeEventType = ArkUI_NodeEventType(25);
    /// Defines the event triggered when the bound component is clicked.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_UIInputEvent`].
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_ON_CLICK_EVENT: ArkUI_NodeEventType = ArkUI_NodeEventType(26);
    /// Defines the event triggered when the mouse pointer hovers over or moves away from a component.
    ///
    /// This event is triggered when the mouse pointer enters or leaves the component's bounding box.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_UIInputEvent`].
    ///
    ///
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub const NODE_ON_HOVER_EVENT: ArkUI_NodeEventType = ArkUI_NodeEventType(27);
    /// Sets the callback for the NODE_EVENT_ON_VISIBLE_AREA_CHANGE event, which limits the callback interval.
    ///
    /// The callback is triggered when the ratio of the component's visible area to its total area is greater than or
    /// less than the threshold. Before registering the callback, you must configure the threshold and update interval
    /// using <b>NODE_VISIBLE_AREA_APPROXIMATE_CHANGE_RATIO</b>.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: how the ratio of the component's visible area to its total area
    /// changes compared to the previous one. The value <b>1</b> indicates an increase, and <b>0</b> indicates
    /// a decrease.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: ratio of the component's visible area to its total area
    /// when this callback is invoked.
    ///
    ///
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub const NODE_VISIBLE_AREA_APPROXIMATE_CHANGE_EVENT: ArkUI_NodeEventType =
        ArkUI_NodeEventType(28);
    /// Defines the hover event.
    ///
    /// The event is triggered when the pointer is hovered by a pen device.
    /// within the component.
    ///
    /// When the event callback occurs, the [`ArkUI_NodeEvent`] object can be obtained from the
    /// [`ArkUI_UIInputEvent`] object.
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_ON_HOVER_MOVE: ArkUI_NodeEventType = ArkUI_NodeEventType(29);
    /// Triggers onDetectResultUpdate callback
    /// when the text is set to TextDataDetectorConfig and recognized successfully.
    ///
    /// Trigger this event when TextDataDetectorConfig is set and recognized successfully.
    ///
    /// When the event callback occurs, the event parameter[`ArkUI_NodeEvent`]The union type in the object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`]contains 1 parameter
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>：Indicates the result of text recognition, in Json format.
    pub const NODE_TEXT_ON_DETECT_RESULT_UPDATE: ArkUI_NodeEventType = ArkUI_NodeEventType(1000);
    /// Defines the image loading success event.
    ///
    /// This event is triggered when an image is successfully loaded or decoded.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains nine parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: loading status. The value <b>0</b> indicates that the image is
    /// loaded successfully, and the value <b>1</b> indicates that the image is decoded successfully.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: width of the image, in px.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].f32</b>: height of the image, in px.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[3].f32</b>: width of the component, in px.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[4].f32</b>: height of the component, in px.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[5].f32</b>: offset of the rendered content relative to the component on the
    /// x-axis, in px.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[6].f32</b>: offset of the rendered content relative to the component on the
    /// y-axis, in px.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[7].f32</b>: actual rendered width of the image, in px.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[8].f32</b>: actual rendered height of the image, in px.
    pub const NODE_IMAGE_ON_COMPLETE: ArkUI_NodeEventType = ArkUI_NodeEventType(4000);
    /// Defines the image loading failure event.
    ///
    /// This event is triggered when an error occurs during image loading.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>error code:
    ///
    /// 401: The image could not be obtained because the image path is invalid.
    ///
    /// 103101: The image format is not supported.
    pub const NODE_IMAGE_ON_ERROR: ArkUI_NodeEventType = ArkUI_NodeEventType(4001);
    /// Defines the SVG animation playback completion event.
    ///
    /// This event is triggered when the animation playback in the loaded SVG image is complete.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_IMAGE_ON_SVG_PLAY_FINISH: ArkUI_NodeEventType = ArkUI_NodeEventType(4002);
    /// Defines image download process event.
    ///
    /// This event is triggered when downloading webpage images from page components.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].u32</b>: the num of bytes downloaded.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].u32</b>: the total number of bytes to download.
    pub const NODE_IMAGE_ON_DOWNLOAD_PROGRESS: ArkUI_NodeEventType = ArkUI_NodeEventType(4003);
    /// Defines the event triggered when the toggle status changes.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: toggle status. <b>1</b>: on; <b>0</b>: off.
    pub const NODE_TOGGLE_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(5000);
    /// Defines the event triggered when the text input content changes.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`] contains one parameter:
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>: text input.
    pub const NODE_TEXT_INPUT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(7000);
    /// Defines the event triggered when the Enter key of the text input method is pressed.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: Enter key type of the input method.
    pub const NODE_TEXT_INPUT_ON_SUBMIT: ArkUI_NodeEventType = ArkUI_NodeEventType(7001);
    /// Defines the event triggered when the cut button on the pasteboard, which displays when the text box
    /// is long pressed, is clicked.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`] contains one parameter:
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>: text that is cut.
    pub const NODE_TEXT_INPUT_ON_CUT: ArkUI_NodeEventType = ArkUI_NodeEventType(7002);
    /// Defines the event triggered when the paste button on the pasteboard, which displays when the text box
    /// is long pressed, is clicked.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`] contains one parameter:
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>: text that is pasted
    pub const NODE_TEXT_INPUT_ON_PASTE: ArkUI_NodeEventType = ArkUI_NodeEventType(7003);
    /// Defines the event triggered when the text selection position changes.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: start position of the text selection area.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: end position of the text selection area.
    pub const NODE_TEXT_INPUT_ON_TEXT_SELECTION_CHANGE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(7004);
    /// Defines the event triggered when the input status changes.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: <b>true</b> indicates that text input is in progress.
    pub const NODE_TEXT_INPUT_ON_EDIT_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(7005);
    /// textInput This event is triggered when the input content changes.
    ///
    /// Conditions for triggering this event: When the input content changes.
    ///
    /// When the event callback occurs, the union type in the event parameter
    /// [`ArkUI_NodeEvent`] object is [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains 2 parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: Indicates the width of the text.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: Indicates the height of the text.
    pub const NODE_TEXT_INPUT_ON_CONTENT_SIZE_CHANGE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(7006);
    /// Defines the event triggered when matching with the regular expression specified by
    /// <b>NODE_TEXT_INPUT_INPUT_FILTER</b> fails.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`] contains one parameter:
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>: content that is filtered out when regular expression matching fails.
    pub const NODE_TEXT_INPUT_ON_INPUT_FILTER_ERROR: ArkUI_NodeEventType =
        ArkUI_NodeEventType(7007);
    /// This callback is triggered when the text content is scrolled.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: Indicates the horizontal offset of the text in the content area.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: Indicates the vertical coordinate offset of
    ///
    /// the text in the content area.
    pub const NODE_TEXT_INPUT_ON_CONTENT_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(7008);
    /// Defines the event triggered when text is about to be entered.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the text is entered; returns <b>false</b> otherwise.
    /// You can set the return value using <b>OH_ArkUI_NodeEvent_SetReturnNumberValue</b>.
    pub const NODE_TEXT_INPUT_ON_WILL_INSERT: ArkUI_NodeEventType = ArkUI_NodeEventType(7009);
    /// Defines the event triggered when text is entered.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    pub const NODE_TEXT_INPUT_ON_DID_INSERT: ArkUI_NodeEventType = ArkUI_NodeEventType(7010);
    /// Defines the event triggered when text is about to be deleted.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text to delete, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// value.i32: direction for deleting the text, with the index of <b>1</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>. The value <b>0</b> indicates backward-delete, and <b>1</b> indicates
    /// forward-delete.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the text is deleted; returns <b>false</b> otherwise.
    ///
    /// You can set the return value using <b>OH_ArkUI_NodeEvent_SetReturnNumberValue</b>.
    pub const NODE_TEXT_INPUT_ON_WILL_DELETE: ArkUI_NodeEventType = ArkUI_NodeEventType(7011);
    /// Defines the event triggered when text is deleted.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text deleted, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// value.i32: direction for deleting the text, with the index of <b>1</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>. The value <b>0</b> indicates backward-delete, and <b>1</b> indicates
    /// forward-delete.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    pub const NODE_TEXT_INPUT_ON_DID_DELETE: ArkUI_NodeEventType = ArkUI_NodeEventType(7012);
    /// Defines the event triggered when content (including preview text) changes in the <b>TextInput</b>
    /// component.
    ///
    /// When the event callback occurs, the union type [`ArkUI_NodeEvent`] is [`ArkUI_TextChangeEvent`].
    ///
    /// [`ArkUI_TextChangeEvent`] contains the following parameters:
    ///
    /// <b>ArkUI_TextChangeEvent.pStr</b>: content in the <b>TextInput</b> component.
    /// <b>ArkUI_TextChangeEvent.pExtendStr</b>: content of the preview text in the <b>TextInput</b> component.
    /// <b>ArkUI_TextChangeEvent.number</b>: start position of the preview text in the <b>TextInput</b> component.
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_INPUT_ON_CHANGE_WITH_PREVIEW_TEXT: ArkUI_NodeEventType =
        ArkUI_NodeEventType(7013);
    /// Defines the event triggered when the input in the text box changes.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`] contains one parameter:
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>: text entered.
    pub const NODE_TEXT_AREA_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(8000);
    /// Defines the event triggered when the paste button on the pasteboard, which displays when the text box is
    /// long pressed, is clicked.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`] contains one parameter:
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>: text that is pasted
    pub const NODE_TEXT_AREA_ON_PASTE: ArkUI_NodeEventType = ArkUI_NodeEventType(8001);
    /// Defines the event triggered when the text selection position changes.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: start position of the text selection area.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: end position of the text selection area.
    pub const NODE_TEXT_AREA_ON_TEXT_SELECTION_CHANGE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(8002);
    /// Defines the event triggered when matching with the regular expression specified by
    /// <b>NODE_TEXT_AREA_INPUT_FILTER</b> fails.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// [`ArkUI_StringAsyncEvent`] contains one parameter:
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>: content that is filtered out when regular expression matching fails.
    pub const NODE_TEXT_AREA_ON_INPUT_FILTER_ERROR: ArkUI_NodeEventType = ArkUI_NodeEventType(8003);
    /// This callback is triggered when the text content is scrolled.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: Indicates the horizontal offset of the text in the content area.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: Indicates the vertical coordinate offset of
    ///
    /// the text in the content area.
    pub const NODE_TEXT_AREA_ON_CONTENT_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(8004);
    /// Defines the event triggered when the input status changes.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: <b>true</b> indicates that text input is in progress.
    pub const NODE_TEXT_AREA_ON_EDIT_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(8005);
    /// Defines the event triggered when the Enter key on the keyboard is pressed for the multi-line text box.
    ///
    /// This event is not triggered when <b>keyType</b> is <b>ARKUI_ENTER_KEY_TYPE_NEW_LINE</b>.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: type of the Enter key.
    pub const NODE_TEXT_AREA_ON_SUBMIT: ArkUI_NodeEventType = ArkUI_NodeEventType(8006);
    /// textArea This event is triggered when the input content changes.
    ///
    /// Conditions for triggering this event: When the input content changes.
    ///
    /// When the event callback occurs, the union type in the event parameter [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains 2 parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: Indicates the width of the text.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: Indicates the height of the text.
    pub const NODE_TEXT_AREA_ON_CONTENT_SIZE_CHANGE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(8007);
    /// Defines the event triggered when text is about to be entered.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the text is entered; returns <b>false</b> otherwise.
    /// You can set the return value using <b>OH_ArkUI_NodeEvent_SetReturnNumberValue</b>.
    pub const NODE_TEXT_AREA_ON_WILL_INSERT: ArkUI_NodeEventType = ArkUI_NodeEventType(8008);
    /// Defines the event triggered when text is entered.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    pub const NODE_TEXT_AREA_ON_DID_INSERT: ArkUI_NodeEventType = ArkUI_NodeEventType(8009);
    /// Defines the event triggered when text is about to be deleted.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text to delete, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// value.i32: direction for deleting the text, with the index of <b>1</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>. The value <b>0</b> indicates backward-delete, and <b>1</b> indicates
    /// forward-delete.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    ///
    /// # Returns
    ///
    /// * Returns <b>true</b> if the text is deleted; returns <b>false</b> otherwise.
    ///
    /// You can set the return value using <b>OH_ArkUI_NodeEvent_SetReturnNumberValue</b>.
    pub const NODE_TEXT_AREA_ON_WILL_DELETE: ArkUI_NodeEventType = ArkUI_NodeEventType(8010);
    /// Defines the event triggered when text is deleted.
    ///
    /// The event parameter is [`ArkUI_NodeEvent`].
    ///
    /// value.f32: position of the text deleted, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>.
    ///
    /// value.i32: direction for deleting the text, with the index of <b>1</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetNumberValue</b>. The value <b>0</b> indicates backward-delete, and <b>1</b> indicates
    /// forward-delete.
    ///
    /// buffer: string value of the text, with the index of <b>0</b>; obtained using
    /// <b>OH_ArkUI_NodeEvent_GetStringValue</b>.
    pub const NODE_TEXT_AREA_ON_DID_DELETE: ArkUI_NodeEventType = ArkUI_NodeEventType(8011);
    /// Defines the event triggered when content (including preview text) changes in the <b>TextArea</b>
    /// component.
    ///
    /// When the event callback occurs, the union type [`ArkUI_NodeEvent`] is [`ArkUI_TextChangeEvent`].
    ///
    /// [`ArkUI_TextChangeEvent`] contains the following parameters:
    ///
    /// <b>ArkUI_TextChangeEvent.pStr</b>: content in the <b>TextArea</b> component.
    /// <b>ArkUI_TextChangeEvent.pExtendStr</b>: content of the preview text in the <b>TextArea</b> component.
    /// <b>ArkUI_TextChangeEvent.number</b>: start position of the preview text in the <b>TextArea</b> component.
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_TEXT_AREA_ON_CHANGE_WITH_PREVIEW_TEXT: ArkUI_NodeEventType =
        ArkUI_NodeEventType(8012);
    /// Defines the event triggered when the selected status of the <b>ARKUI_NODE_CHECKBOX</b> component changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b><b>1</b>: selected; <b>0</b>: not selected.
    pub const NODE_CHECKBOX_EVENT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(11000);
    /// Defines the event triggered when a date is selected in the <b>ARKUI_NODE_DATE_PICKER</b> component.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: year of the selected date.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: month of the selected date. Value range: [0-11].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].i32</b>: day of the selected date.
    pub const NODE_DATE_PICKER_EVENT_ON_DATE_CHANGE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(13000);
    /// Defines the event triggered when a time is selected in the <b>ARKUI_NODE_TIME_PICKER</b> component.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: hour of the selected time. Value range: [0-23].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: minute of the selected time. Value range: [0-59].
    pub const NODE_TIME_PICKER_EVENT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(14000);
    /// Defines the event triggered when an item is selected in the <b>ARKUI_NODE_TEXT_PICKER</b> component.
    ///
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0...11].i32</b>: value of the selected item.
    pub const NODE_TEXT_PICKER_EVENT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(15000);
    /// Defines the event triggered when an item is selected and scrolling has stopped in the
    /// <b>ARKUI_NODE_TEXT_PICKER</b> component.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0...11].i32</b>: value of the selected item.
    ///
    ///
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const NODE_TEXT_PICKER_EVENT_ON_SCROLL_STOP: ArkUI_NodeEventType =
        ArkUI_NodeEventType(15001);
    /// Defines the event triggered when a date is selected in the <b>NODE_CALENDAR_PICKER</b>.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// <b>ArkUI_NodeComponent.data[0].u32</b>: year of the selected date.
    ///
    /// <b>ArkUI_NodeComponent.data[1].u32</b>: month of the selected date.
    ///
    /// <b>ArkUI_NodeComponent.data[2].u32</b>: day of the selected date.
    pub const NODE_CALENDAR_PICKER_EVENT_ON_CHANGE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(16000);
    /// Defines the event triggered when the <b>ARKUI_NODE_SLIDER</b> component is dragged or clicked.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: current slider value.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: state triggered by the event.
    pub const NODE_SLIDER_EVENT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(17000);
    /// Defines the event callback function triggered when an object is dragged or clicked by ARKUI_NODE_RADIO.
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// ArkUI_NodeComponentEvent.data[0].i32: option button status.
    pub const NODE_RADIO_EVENT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(18000);
    /// Defines the event callback function triggered when the animation starts to play.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains no parameter:
    pub const NODE_IMAGE_ANIMATOR_EVENT_ON_START: ArkUI_NodeEventType = ArkUI_NodeEventType(19000);
    /// Defines the event callback function triggered when the animation playback is paused.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains no parameter:
    pub const NODE_IMAGE_ANIMATOR_EVENT_ON_PAUSE: ArkUI_NodeEventType = ArkUI_NodeEventType(19001);
    /// Defines the event callback function triggered when the animation playback is repeated.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains no parameter:
    pub const NODE_IMAGE_ANIMATOR_EVENT_ON_REPEAT: ArkUI_NodeEventType = ArkUI_NodeEventType(19002);
    /// Defines the event callback function when the animation playback returns to the initial state.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains no parameter:
    pub const NODE_IMAGE_ANIMATOR_EVENT_ON_CANCEL: ArkUI_NodeEventType = ArkUI_NodeEventType(19003);
    /// Defines the event callback function triggered when the animation playback is complete or stopped.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains no parameter:
    pub const NODE_IMAGE_ANIMATOR_EVENT_ON_FINISH: ArkUI_NodeEventType = ArkUI_NodeEventType(19004);
    /// Defines the callback triggered when the selected status of the <b>ARKUI_NODE_CHECKBOX_GROOUP</b>
    /// or checkbox changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_StringAsyncEvent`].
    ///
    /// <b>ArkUI_StringAsyncEvent.pStr</b>
    /// Name: The names of the selected checkboxes;
    /// Status:
    /// 0: All checkboxes are selected.
    /// 1: Some checkboxes are selected.
    /// 2: No checkboxes are selected.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_CHECKBOX_GROUP_EVENT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(21000);
    /// Defines the event triggered when the index of the currently displayed element of this
    /// <b>ARKUI_NODE_SWIPER</b> instance changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: index of the currently displayed element.
    pub const NODE_SWIPER_EVENT_ON_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(1001000);
    /// Defines the event triggered when the switching animation of this <b>ARKUI_NODE_SWIPER</b> instance starts.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains five parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: index of the currently displayed element.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: index of the target element to switch to.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].f32</b>: offset of the currently displayed element relative to the
    /// start position of the swiper along the main axis.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[3].f32</b>: offset of the target element relative to the start position
    /// of the swiper along the main axis.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[4].f32</b>: hands-off velocity.
    pub const NODE_SWIPER_EVENT_ON_ANIMATION_START: ArkUI_NodeEventType =
        ArkUI_NodeEventType(1001001);
    /// Defines the event triggered when the switching animation of this <b>ARKUI_NODE_SWIPER</b> instance ends.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: index of the currently displayed element.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: offset of the currently displayed element relative to the
    /// start position of the swiper along the main axis.
    pub const NODE_SWIPER_EVENT_ON_ANIMATION_END: ArkUI_NodeEventType =
        ArkUI_NodeEventType(1001002);
    /// Defines the event triggered on a frame-by-frame basis when the page is turned by a swipe in this
    /// <b>ARKUI_NODE_SWIPER</b> instance.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: index of the currently displayed element.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: offset of the currently displayed element relative to the
    /// start position of the swiper along the main axis.
    pub const NODE_SWIPER_EVENT_ON_GESTURE_SWIPE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(1001003);
    /// Define the <b>ARKUI_NODE_SWIPER</b> to listen for Swiper page slide events.
    /// Instruction:
    ///
    /// 1. If the [`ArkUI_SwiperDisplayModeType`] attribute is set to
    ///
    /// ARKUI_SWIPER_DISPLAY_MODE_AUTO_LINEAR, the interface does not take effect.
    ///
    /// 2, circular scenario, set prevMargin and nextMargin attributes,
    ///
    /// so that Swiper front and back end display the same page, the interface does not take effect.
    ///
    /// 3. During page sliding, the ContentDidScrollCallback callback is
    ///
    /// triggered frame-by-frame for all pages in the window.
    ///
    /// For example, when there are two pages in the window with subscripts 0 and 1,
    ///
    /// callbacks with index values 0 and 1 are triggered twice per frame.
    ///
    /// 4, set the swipeByGroup parameter of the displayCount property to
    ///
    /// true if at least one page in the same group is in the window,
    ///
    /// A callback is triggered for all pages in the group.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains four parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b> : indicates the index of the Swiper component,
    ///
    /// which is consistent with the index change in the onChange event.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b> : The index of a page in the window.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].f32</b> : The proportion of page movement relative to
    ///
    /// the start position of the Swiper spindle (selectedIndex corresponds to the start position of the page).
    ///
    /// <b>ArkUI_NodeComponentEvent.data[3].f32</b> : The length of the page in the axis direction.
    pub const NODE_SWIPER_EVENT_ON_CONTENT_DID_SCROLL: ArkUI_NodeEventType =
        ArkUI_NodeEventType(1001004);
    /// Defines the event triggered when content in the swiper component will scroll.
    /// Instructions: Before page scrolling, the </b>ContentWillScrollCallback</b> callback is invoked.
    ///
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: the index value of the current child page.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: the index value of the child page that will display.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].f32</b>: the sliding offset of each frame.
    /// Positive numbers indicating slide backward(e.g. from index=1 to index=0), negative numbers indicating
    /// slide forward(e.g. from index=0 to index=1).
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_SWIPER_EVENT_ON_CONTENT_WILL_SCROLL: ArkUI_NodeEventType =
        ArkUI_NodeEventType(1001007);
    /// Defines the event triggered when the selected index of the <b>ARKUI_NODE_SWIPER</b> changed.
    ///
    /// This event is triggered under the following scenarios:
    ///
    /// 1. When the page switching animation starts after the user lifts their finger after swiping and the swipe meets
    /// the threshold for page turning.
    ///
    /// 2. When the page is changed programmatically using either <b>NODE_SWIPER_INDEX</b> or
    /// <b>NODE_SWIPER_SWIPE_TO_INDEX</b>.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: index of the currently selected element.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_SWIPER_EVENT_ON_SELECTED: ArkUI_NodeEventType = ArkUI_NodeEventType(1001005);
    /// Defines the event triggered when the selected index of the <b>ARKUI_NODE_SWIPER</b> changed.
    ///
    /// This event is triggered under the following scenarios:
    ///
    /// 1. When the page switching animation starts after the user lifts their finger after swiping and the swipe meets
    /// the threshold for page turning.
    ///
    /// 2. When the page is changed programmatically using either <b>NODE_SWIPER_INDEX</b> or
    /// <b>NODE_SWIPER_SWIPE_TO_INDEX</b>.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: the index of the element becomes unselected.
    ///
    ///
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const NODE_SWIPER_EVENT_ON_UNSELECTED: ArkUI_NodeEventType = ArkUI_NodeEventType(1001006);
    /// Defines the event triggered when the <b>ARKUI_NODE_SCROLL</b> component scrolls.
    ///
    /// Notes for triggering the event:
    ///
    /// 1. This event is triggered when scrolling is started by the <b>ARKUI_NODE_SCROLL</b> component or other input
    /// settings, such as keyboard and mouse operations.
    ///
    /// 2. Scrolling can be initiated by calling the controller API.
    ///
    /// 3. The out-of-bounds bounce effect is supported.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: horizontal scrolling offset.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: vertical scrolling offset.
    pub const NODE_SCROLL_EVENT_ON_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(1002000);
    /// Defines the event triggered when each frame scrolling starts in the <b>ARKUI_NODE_SCROLL</b> component.
    ///
    /// Notes for triggering the event:
    ///
    /// 1. This event is triggered when scrolling is started by the <b>ARKUI_NODE_SCROLL</b> component or other input
    /// settings, such as keyboard and mouse operations.
    ///
    /// 2. This event is not triggered when the controller API is called.
    ///
    /// 3. This event does not support the out-of-bounds bounce effect.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: amount to scroll by.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: current scrolling state.
    ///
    /// <b>::ArkUI_NodeComponentEvent</b> contains one return value:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: The event handler can work out the amount by which the component
    /// needs to scroll based on the real-world situation and return the result in this parameter.
    pub const NODE_SCROLL_EVENT_ON_SCROLL_FRAME_BEGIN: ArkUI_NodeEventType =
        ArkUI_NodeEventType(1002001);
    /// Define the enumeration value of the pre sliding trigger event for the scrolling container component.
    ///
    /// The conditions that trigger this event:
    ///
    /// 1. When the scrolling component triggers scrolling, it supports input settings such as keyboard and mouse
    /// operations that trigger scrolling.
    ///
    /// 2. Called through the rolling controller API interface.
    ///
    /// 3. Cross boundary rebound.
    ///
    /// When an event callback occurs, the union type in the event parameter [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains four parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: The offset for each frame of scrolling is positive when scrolling to
    /// the left and negative when scrolling to the right, measured in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: The offset of each frame scrolling, with a positive offset when
    /// scrolling up and a negative offset when scrolling down, measured in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].i32</b>: Current sliding state,
    ///
    /// parameter type is [`ArkUI_ScrollState`].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[3].i32</b>: Current scroll source,
    ///
    /// parameter type is [`ArkUI_ScrollSource`].
    ///
    ///
    /// # Returns
    ///
    /// * Does not return or returns a number that sets the actual scroll distance of the scroll component.
    pub const NODE_SCROLL_EVENT_ON_WILL_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(1002002);
    /// Define the event enumeration value triggered when sliding a scrolling container component.
    ///
    /// The conditions that trigger this event:
    ///
    /// 1. When the scrolling component triggers scrolling, it supports input settings such as keyboard and mouse
    /// operations that trigger scrolling.
    ///
    /// 2. Called through the rolling controller API interface.
    ///
    /// 3. Cross boundary rebound.
    ///
    /// When an event callback occurs, the union type in the event parameter [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: The offset for each frame of scrolling is positive when scrolling to
    /// the left and negative when scrolling to the right, measured in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].f32</b>: The offset of each frame scrolling, with a positive offset when
    /// scrolling up and a negative offset when scrolling down, measured in vp.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].i32</b>: Current sliding state,
    ///
    /// parameter type is [`ArkUI_ScrollState`].
    pub const NODE_SCROLL_EVENT_ON_DID_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(1002003);
    /// Defines the event triggered when scrolling starts in the <b>ARKUI_NODE_SCROLL</b> component.
    ///
    /// Notes for triggering the event:
    ///
    /// 1. This event is triggered when scrolling is started, with support for other input settings, such as keyboard
    /// and mouse operations.
    ///
    /// 2. This event is triggered when the controller API is called, accompanied by a transition animation.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_SCROLL_EVENT_ON_SCROLL_START: ArkUI_NodeEventType = ArkUI_NodeEventType(1002004);
    /// Defines the event triggered when scrolling of the <b>ARKUI_NODE_SCROLL</b> component stops.
    ///
    /// Notes for triggering the event:
    ///
    /// 1. This event is triggered when scrolling is stopped by the <b>ARKUI_NODE_SCROLL</b> component or other input
    /// settings, such as keyboard and mouse operations.
    ///
    /// 2. This event is triggered when the controller API is called, accompanied by a transition animation.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters.
    pub const NODE_SCROLL_EVENT_ON_SCROLL_STOP: ArkUI_NodeEventType = ArkUI_NodeEventType(1002005);
    /// Defines the event triggered when scrolling of the <b>ARKUI_NODE_SCROLL</b> component reaches
    /// one of the edges.
    ///
    /// Notes for triggering the event:
    ///
    /// 1. This event is triggered when scrolling reaches the edge after being started by the <b>ARKUI_NODE_SCROLL</b>
    /// component or other input settings, such as keyboard and mouse operations.
    ///
    /// 2. Scrolling can be initiated by calling the controller API.
    ///
    /// 3. The out-of-bounds bounce effect is supported.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: edge (top, bottom, left, or right) that the scrolling reaches.
    pub const NODE_SCROLL_EVENT_ON_SCROLL_EDGE: ArkUI_NodeEventType = ArkUI_NodeEventType(1002006);
    /// Define that a callback is triggered when the scrolling container component reaches the start position.
    /// Condition for triggering the event:
    ///
    /// Triggered when the component reaches the start position.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains no parameters.
    pub const NODE_SCROLL_EVENT_ON_REACH_START: ArkUI_NodeEventType = ArkUI_NodeEventType(1002007);
    /// Define that a callback is triggered when the scrolling container component ends.
    ///
    /// Condition for triggering the event:
    ///
    /// Triggered when the component reaches the end.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains no parameters.
    pub const NODE_SCROLL_EVENT_ON_REACH_END: ArkUI_NodeEventType = ArkUI_NodeEventType(1002008);
    /// Defines the enumerated values of the event triggered,
    ///
    /// when a subcomponent of ARKUI_NODE_LIST is moved into or out of the list display area.
    ///
    /// Condition for triggering the event:
    ///
    /// This method is triggered once during list initialization.
    ///
    /// It is triggered when the index value of the first or last subcomponent in the list display area changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// ArkUI_NodeComponentEvent.data[0].i32: List Displays the index value of
    ///
    /// the first child component in the region.
    ///
    /// ArkUI_NodeComponentEvent.data[1].i32: List Displays the index value of
    ///
    /// the last child component in the region.
    ///
    /// ArkUI_NodeComponentEvent.data[2].i32: List Displays the index value of
    ///
    /// the subcomponent in the middle of the area.
    pub const NODE_LIST_ON_SCROLL_INDEX: ArkUI_NodeEventType = ArkUI_NodeEventType(1003000);
    /// Defines the enumerated values of the event triggered
    /// before the sliding of the ARKUI_NODE_LIST component.
    ///
    /// Condition for triggering the event:
    ///
    /// This event is triggered when the scrolling component triggers scrolling.
    ///
    /// Other inputs that trigger scrolling, such as keyboard and mouse operations, can be set.
    ///
    /// Called through the scroll controller API.
    ///
    /// Out-of-bounds rebound.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// ArkUI_NodeComponentEvent.data[0].f32: offset of each frame scrolling.
    ///
    /// The offset is positive when the list content is scrolled up and
    ///
    /// is negative when the list content is scrolled down.
    ///
    /// ArkUI_NodeComponentEvent.data[1].i32: Current sliding state.
    ///
    /// parameter type is [`ArkUI_ScrollState`].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].i32</b>: Current scroll source,
    ///
    /// parameter type is [`ArkUI_ScrollSource`].
    ///
    ///
    /// # Returns
    ///
    /// * Does not return or returns a number that sets the actual scroll distance of the scroll component.
    pub const NODE_LIST_ON_WILL_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(1003001);
    /// Define the enumerated values of the event triggered when the ARKUI_NODE_LIST component is flicked.
    /// Condition for triggering the event:
    ///
    /// This event is triggered when the scrolling component triggers scrolling.
    ///
    /// Other inputs that trigger scrolling, such as keyboard and mouse operations, can be set.
    ///
    /// Called through the scroll controller API.
    ///
    /// Out-of-bounds rebound.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// ArkUI_NodeComponentEvent.data[0].f32: offset of each frame scrolling.
    ///
    /// The offset is positive when the list content is scrolled up and
    ///
    /// is negative when the list content is scrolled down.
    ///
    /// ArkUI_NodeComponentEvent.data[1].i32: Current sliding state.
    pub const NODE_LIST_ON_DID_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(1003002);
    /// Defines the event triggered when the currently displayed content of the <b>ARKUI_NODE_LIST</b> changes.
    ///
    /// Notes for triggering the event:
    ///
    /// This event is triggered once when the list is initialized and when the index of the first child component or the
    /// next child component in the list display area changes.
    /// During index calculation, the list item, header of the list item group, and footer of the list item group each
    /// are counted as a child component.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: index of the first child component in the list display area.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[1].i32</b>: area in the list item group where the list display area starts.
    /// The type is [`ArkUI_ListItemGroupArea`].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].i32</b>: index of the list item at the start of the list display area
    /// in the list item group.
    /// If the start of the list display area is not on a list item, the value is <b>-1</b>.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[3].i32</b>: index of the last child component in the list display area.
    ///
    /// <b>ArkUI_NodeComponentEvent.data[4].i32</b>: area in the list item group where the list display area ends.
    /// The type is [`ArkUI_ListItemGroupArea`].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[5].i32</b>: index of the list item at the end of the list display area in the
    /// list item group.
    /// If the end of the list display area is not on a list item, the value is <b>-1</b>.
    ///
    ///
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const NODE_LIST_ON_SCROLL_VISIBLE_CONTENT_CHANGE: ArkUI_NodeEventType =
        ArkUI_NodeEventType(1003003);
    /// Defines the event triggered when the refresh state of the <b>ARKUI_NODE_REFRESH</b> object changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].i32</b>: refresh state.
    pub const NODE_REFRESH_STATE_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(1009000);
    /// Defines the event triggered when the <b>ARKUI_NODE_REFRESH</b> object enters the refresh state.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] does not contain parameters:
    pub const NODE_REFRESH_ON_REFRESH: ArkUI_NodeEventType = ArkUI_NodeEventType(1009001);
    /// Defines the event that is triggered when the <b>ARKUI_NODE_REFRESH</b> drop-down distance changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains one parameter:
    ///
    /// <b>ArkUI_NodeComponentEvent.data[0].f32</b>: Pull-down distance.
    pub const NODE_REFRESH_ON_OFFSET_CHANGE: ArkUI_NodeEventType = ArkUI_NodeEventType(1009002);
    /// Defines the event triggered when the <b>ARKUI_NODE_SCROLL</b> component is about to scroll.
    ///
    /// Notes for triggering the event:
    ///
    /// 1. This event is triggered when scrolling is started by the <b>ARKUI_NODE_SCROLL</b> component or other
    /// input settings, such as keyboard and mouse operations.
    ///
    /// 2. Scrolling can be initiated by calling the controller API.
    ///
    /// 3. The out-of-bounds bounce effect is supported.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// ArkUI_NodeComponentEvent.data[0].f32: offset of each frame scrolling.
    ///
    /// The offset is positive when the list content is scrolled up and
    ///
    /// is negative when the list content is scrolled down.
    ///
    /// ArkUI_NodeComponentEvent.data[1].i32: Current sliding state.
    ///
    /// parameter type is [`ArkUI_ScrollState`].
    ///
    /// <b>ArkUI_NodeComponentEvent.data[2].i32</b>: Current scroll source,
    ///
    /// parameter type is [`ArkUI_ScrollSource`].
    ///
    ///
    /// # Returns
    ///
    /// * Does not return or returns a number that sets the actual scroll distance of the scroll component.
    pub const NODE_ON_WILL_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(1010000);
    /// Define the enumerated values of the event triggered when the ARKUI_NODE_WATER_FLOW component slides.
    /// Condition for triggering the event:
    ///
    /// This event is triggered when the scrolling component triggers scrolling.
    /// Other inputs that trigger scrolling, such as keyboard and mouse operations, can be set.
    ///
    /// Called through the scroll controller API.
    ///
    /// Out-of-bounds rebound.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains two parameters:
    ///
    /// ArkUI_NodeComponentEvent.data[0].f32: offset of each frame scrolling.
    ///
    /// The offset is positive when the content is scrolled up and is negative when the content is scrolled down.
    ///
    /// ArkUI_NodeComponentEvent.data[1].i32: Current sliding state.
    pub const NODE_WATER_FLOW_ON_DID_SCROLL: ArkUI_NodeEventType = ArkUI_NodeEventType(1010001);
    /// Defines the enumerated values of the event triggered,
    /// when the subcomponent of the start position or end position displayed in the current waterfall changes.
    /// Condition for triggering the event:
    ///
    /// This event is triggered when the index value of the
    ///
    /// first or last subcomponent in the waterfall display area changes.
    ///
    /// When the event callback occurs, the union type in the [`ArkUI_NodeEvent`] object is
    ///
    /// [`ArkUI_NodeComponentEvent`].
    ///
    /// [`ArkUI_NodeComponentEvent`] contains three parameters:
    ///
    /// ArkUI_NodeComponentEvent.data[0].i32: The index value of the
    ///
    /// start position of the currently displayed WaterFlow.
    ///
    /// ArkUI_NodeComponentEvent.data[1].i32: The index value of
    ///
    /// the end position of the currently displayed waterfall.
    pub const NODE_WATER_FLOW_ON_SCROLL_INDEX: ArkUI_NodeEventType = ArkUI_NodeEventType(1010002);
}
#[repr(transparent)]
/// Enumerates the event types supported by the NativeNode component.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_NodeEventType(pub ::core::ffi::c_uint);
/// Defines the common structure type of a component event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_NodeEvent {
    _unused: [u8; 0],
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_NodeDirtyFlag {
    /// Remeasure.
    ///
    /// When this type of flag is specified, re-layout is triggered by default.
    pub const NODE_NEED_MEASURE: ArkUI_NodeDirtyFlag = ArkUI_NodeDirtyFlag(1);
    /// Re-layout.
    pub const NODE_NEED_LAYOUT: ArkUI_NodeDirtyFlag = ArkUI_NodeDirtyFlag(2);
    /// Re-rendering.
    pub const NODE_NEED_RENDER: ArkUI_NodeDirtyFlag = ArkUI_NodeDirtyFlag(3);
}
#[repr(transparent)]
/// Defines the dirty area flag passed in the <b>::markDirty</b> API.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_NodeDirtyFlag(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_NodeCustomEventType {
    /// Measure type.
    pub const ARKUI_NODE_CUSTOM_EVENT_ON_MEASURE: ArkUI_NodeCustomEventType =
        ArkUI_NodeCustomEventType(1);
    /// Layout type.
    pub const ARKUI_NODE_CUSTOM_EVENT_ON_LAYOUT: ArkUI_NodeCustomEventType =
        ArkUI_NodeCustomEventType(2);
    /// Draw type.
    pub const ARKUI_NODE_CUSTOM_EVENT_ON_DRAW: ArkUI_NodeCustomEventType =
        ArkUI_NodeCustomEventType(4);
    /// Foreground type.
    pub const ARKUI_NODE_CUSTOM_EVENT_ON_FOREGROUND_DRAW: ArkUI_NodeCustomEventType =
        ArkUI_NodeCustomEventType(8);
    /// Overlay type.
    pub const ARKUI_NODE_CUSTOM_EVENT_ON_OVERLAY_DRAW: ArkUI_NodeCustomEventType =
        ArkUI_NodeCustomEventType(16);
}
#[repr(transparent)]
/// Defines the custom component event type.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_NodeCustomEventType(pub ::core::ffi::c_uint);
/// Defines the general structure of a custom component event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_NodeCustomEvent {
    _unused: [u8; 0],
}
#[repr(C)]
pub struct ArkUI_NodeAdapter {
    _unused: [u8; 0],
}
/// Defines the component adapter, which is used for lazy loading of elements of scrollable components.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type ArkUI_NodeAdapterHandle = *mut ArkUI_NodeAdapter;
/// Defines the component adapter event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_NodeAdapterEvent {
    _unused: [u8; 0],
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_NodeAdapterEventType {
    /// This event occurs when the component is attached to the adapter.
    pub const NODE_ADAPTER_EVENT_WILL_ATTACH_TO_NODE: ArkUI_NodeAdapterEventType =
        ArkUI_NodeAdapterEventType(1);
    /// This event occurs when the component is detached from the adapter.
    pub const NODE_ADAPTER_EVENT_WILL_DETACH_FROM_NODE: ArkUI_NodeAdapterEventType =
        ArkUI_NodeAdapterEventType(2);
    /// This event occurs when the adapter obtains the unique ID of the new element to add.
    pub const NODE_ADAPTER_EVENT_ON_GET_NODE_ID: ArkUI_NodeAdapterEventType =
        ArkUI_NodeAdapterEventType(3);
    /// This event occurs when the adapter obtains the content of the new element to add.
    pub const NODE_ADAPTER_EVENT_ON_ADD_NODE_TO_ADAPTER: ArkUI_NodeAdapterEventType =
        ArkUI_NodeAdapterEventType(4);
    /// This event occurs when the adapter removes an element.
    pub const NODE_ADAPTER_EVENT_ON_REMOVE_NODE_FROM_ADAPTER: ArkUI_NodeAdapterEventType =
        ArkUI_NodeAdapterEventType(5);
}
#[repr(transparent)]
/// Enumerates component adapter events.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_NodeAdapterEventType(pub ::core::ffi::c_uint);
/// Declares a collection of native node APIs provided by ArkUI.
///
/// The APIs related to the native node must be called in the main thread.
///
///
/// Version: 1
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_NativeNodeAPI_1 {
    /// Struct version.
    pub version: i32,
    /// Creates a component based on [`ArkUI_NodeType`] and returns the pointer to the created component.
    ///
    /// # Arguments
    ///
    /// * `type` - Indicates the type of component to create.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the created component. If the component fails to be created, NULL is returned.
    pub createNode:
        ::core::option::Option<unsafe extern "C" fn(type_: ArkUI_NodeType) -> ArkUI_NodeHandle>,
    /// Destroys the component to which the specified pointer points.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer.
    pub disposeNode: ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle)>,
    /// Adds a component to a parent node.
    ///
    /// # Arguments
    ///
    /// * `parent` - Indicates the pointer to the parent node.
    ///
    /// * `child` - Indicates the pointer to the child node.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub addChild: ::core::option::Option<
        unsafe extern "C" fn(parent: ArkUI_NodeHandle, child: ArkUI_NodeHandle) -> i32,
    >,
    /// Removes a component from its parent node.
    ///
    /// # Arguments
    ///
    /// * `parent` - Indicates the pointer to the parent node.
    ///
    /// * `child` - Indicates the pointer to the child node.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub removeChild: ::core::option::Option<
        unsafe extern "C" fn(parent: ArkUI_NodeHandle, child: ArkUI_NodeHandle) -> i32,
    >,
    /// Inserts a component to a parent node after the specified <b>sibling</b> node.
    ///
    /// # Arguments
    ///
    /// * `parent` - Indicates the pointer to the parent node.
    ///
    /// * `child` - Indicates the pointer to the child node.
    ///
    /// * `sibling` - Indicates the pointer to the sibling node after which the target node is to be inserted.
    /// If the value is null, the node is inserted at the start of the parent node.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub insertChildAfter: ::core::option::Option<
        unsafe extern "C" fn(
            parent: ArkUI_NodeHandle,
            child: ArkUI_NodeHandle,
            sibling: ArkUI_NodeHandle,
        ) -> i32,
    >,
    /// Inserts a component to a parent node before the specified <b>sibling</b> node.
    ///
    /// # Arguments
    ///
    /// * `parent` - Indicates the pointer to the parent node.
    ///
    /// * `child` - Indicates the pointer to the child node.
    ///
    /// * `sibling` - Indicates the pointer to the sibling node before which the target node is to be inserted.
    /// If the value is null, the node is inserted at the end of the parent node.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub insertChildBefore: ::core::option::Option<
        unsafe extern "C" fn(
            parent: ArkUI_NodeHandle,
            child: ArkUI_NodeHandle,
            sibling: ArkUI_NodeHandle,
        ) -> i32,
    >,
    /// Inserts a component to the specified position in a parent node.
    ///
    /// # Arguments
    ///
    /// * `parent` - Indicates the pointer to the parent node.
    ///
    /// * `child` - Indicates the pointer to the child node.
    ///
    /// * `position` - Indicates the position to which the target child node is to be inserted. If the value is a
    /// negative number or invalid, the node is inserted at the end of the parent node.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub insertChildAt: ::core::option::Option<
        unsafe extern "C" fn(
            parent: ArkUI_NodeHandle,
            child: ArkUI_NodeHandle,
            position: i32,
        ) -> i32,
    >,
    /// Sets the attribute of a node.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the node whose attribute needs to be set.
    ///
    /// * `attribute` - Indicates the type of attribute to set.
    ///
    /// * `value` - Indicates the attribute value.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED`] if the dynamic implementation library
    /// of the native API was not found.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub setAttribute: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            attribute: ArkUI_NodeAttributeType,
            item: *const ArkUI_AttributeItem,
        ) -> i32,
    >,
    /// Obtains an attribute.
    ///
    /// The pointer returned by this API is an internal buffer pointer of the ArkUI framework. As such, you do not need
    /// to call <b>delete</b> to release the memory. However, the pointer must be used before this API is called next
    /// time. Otherwise, the pointer may be overwritten by other values.
    /// # Arguments
    ///
    /// * `node` - Indicates the node whose attribute needs to be obtained.
    ///
    /// * `attribute` - Indicates the type of attribute to obtain.
    ///
    /// # Returns
    ///
    /// * Returns the attribute value. If the operation fails, a null pointer is returned.
    pub getAttribute: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            attribute: ArkUI_NodeAttributeType,
        ) -> *const ArkUI_AttributeItem,
    >,
    /// Resets an attribute.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the node whose attribute needs to be reset.
    ///
    /// * `attribute` - Indicates the type of attribute to reset.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED`] if the dynamic implementation library
    /// of the native API was not found.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub resetAttribute: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, attribute: ArkUI_NodeAttributeType) -> i32,
    >,
    /// Registers an event for the specified node.
    ///
    /// When the component is being displayed, this API must be called in the main thread.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `eventType` - Indicates the type of event to register.
    ///
    /// * `targetId` - Indicates the custom event ID, which is passed in the callback of [`ArkUI_NodeEvent`]
    /// when the event is triggered.
    ///
    /// * `userData` - Indicates the custom event parameter, which is passed in the callback of [`ArkUI_NodeEvent`]
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED`] if the dynamic implementation library
    /// of the native API was not found.
    /// Returns [`ARKUI_ERROR_CODE_NOT_SUPPROTED_FOR_ARKTS_NODE`] if the following operations are not allowed
    /// on BuilderNode generated nodes:
    /// setting or resetting attributes, setting events, or adding or editing subnodes.
    pub registerNodeEvent: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventType: ArkUI_NodeEventType,
            targetId: i32,
            userData: *mut ::core::ffi::c_void,
        ) -> i32,
    >,
    /// Unregisters an event for the specified node.
    ///
    /// When the component is being displayed, this API must be called in the main thread.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `eventType` - Indicates the type of event to unregister.
    pub unregisterNodeEvent: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, eventType: ArkUI_NodeEventType),
    >,
    /// Registers an event receiver.
    ///
    /// The ArkUI framework collects component events generated during the process and calls back the events through
    /// the registered event receiver.
    ///
    /// A new call to this API will overwrite the previously registered event receiver.
    ///
    /// Do not directly save the <b>ArkUI_NodeEvent</b> object pointer. The data will be destroyed after the
    /// callback is complete.
    ///
    /// To bind with a component instance, you can use the <b>addNodeEventReceiver</b> function.
    ///
    ///
    /// # Arguments
    ///
    /// * `eventReceiver` - Indicates the event receiver to register.
    pub registerNodeEventReceiver: ::core::option::Option<
        unsafe extern "C" fn(
            eventReceiver: ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeEvent)>,
        ),
    >,
    /// Unregisters the event receiver.
    pub unregisterNodeEventReceiver: ::core::option::Option<unsafe extern "C" fn()>,
    /// Forcibly marks the current node that needs to be measured, laid out, or rendered again.
    ///
    /// Regarding updates to system attributes, the ArkUI framework automatically marks the dirty area and performs
    /// measuring, layout, or rendering again. In this case, you do not need to call this API.
    /// # Arguments
    ///
    /// * `node` - Indicates the node for which you want to mark as dirty area.
    ///
    /// * `dirtyFlag` - Indicates type of dirty area.
    pub markDirty: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, dirtyFlag: ArkUI_NodeDirtyFlag),
    >,
    /// Obtains the number of subnodes.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * the number of subnodes. If not, returns 0.
    pub getTotalChildCount:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> u32>,
    /// Obtains a subnode.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `position` - Indicates the position of the subnode.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the subnode if the subnode exists; returns <b>NULL</b> otherwise.
    pub getChildAt: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, position: i32) -> ArkUI_NodeHandle,
    >,
    /// Obtains the first subnode.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the subnode if the subnode exists; returns <b>NULL</b> otherwise.
    pub getFirstChild:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    /// Obtains the last subnode.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the subnode if the subnode exists; returns <b>NULL</b> otherwise.
    pub getLastChild:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    /// Obtains the previous sibling node.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the subnode if the subnode exists; returns <b>NULL</b> otherwise.
    pub getPreviousSibling:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    /// Obtains the next sibling node.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the subnode if the subnode exists; returns <b>NULL</b> otherwise.
    pub getNextSibling:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    /// Registers a custom event for a node. When the event is triggered, the value is returned through the entry
    /// point function registered by <b>registerNodeCustomEventReceiver</b>.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `eventType` - Indicates the type of event to register.
    ///
    /// * `targetId` - Indicates the custom event ID, which is passed in the callback of [`ArkUI_NodeCustomEvent`]
    /// when the event is triggered.
    ///
    /// * `userData` - Indicates the custom event parameter, which is passed in the callback of
    /// [`ArkUI_NodeCustomEvent`] when the event is triggered.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED`] if the dynamic implementation library
    /// of the native API was not found.
    pub registerNodeCustomEvent: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventType: ArkUI_NodeCustomEventType,
            targetId: i32,
            userData: *mut ::core::ffi::c_void,
        ) -> i32,
    >,
    /// Unregisters a custom event for a node.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `eventType` - Indicates the type of event to unregister.
    pub unregisterNodeCustomEvent: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, eventType: ArkUI_NodeCustomEventType),
    >,
    /// Registers a unified entry point function for custom node event callbacks.
    ///
    /// The ArkUI framework collects custom component events generated during the process and calls back the events
    /// through the registered <b>registerNodeCustomEventReceiver</b>.
    ///
    /// A new call to this API will overwrite the previously registered event receiver.
    /// Do not directly save the <b>ArkUI_NodeCustomEvent</b> object pointer.
    /// The data will be destroyed after the callback is complete.
    ///
    /// To bind with a component instance, you can use the <b>addNodeCustomEventReceiver</b> function.
    ///
    ///
    /// # Arguments
    ///
    /// * `eventReceiver` - Indicates the event receiver to register.
    pub registerNodeCustomEventReceiver: ::core::option::Option<
        unsafe extern "C" fn(
            eventReceiver: ::core::option::Option<
                unsafe extern "C" fn(event: *mut ArkUI_NodeCustomEvent),
            >,
        ),
    >,
    /// Unregisters the unified entry point function for custom node event callbacks.
    pub unregisterNodeCustomEventReceiver: ::core::option::Option<unsafe extern "C" fn()>,
    /// Sets the width and height for a component after the measurement.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `width` - Indicates the width.
    ///
    /// * `height` - Indicates the height.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs..
    pub setMeasuredSize: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, width: i32, height: i32) -> i32,
    >,
    /// Sets the position for a component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `positionX` - Indicates the X coordinate.
    ///
    /// * `positionY` - Indicates the Y coordinate.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs..
    pub setLayoutPosition: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, positionX: i32, positionY: i32) -> i32,
    >,
    /// Obtains the width and height of a component after measurement.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * Returns the width and height of the component.
    pub getMeasuredSize:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_IntSize>,
    /// Obtains the position of a component after the layout is complete.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * Returns the position of the component.
    pub getLayoutPosition:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_IntOffset>,
    /// Measures a node. You can use the <b>getMeasuredSize</b> API to obtain the size after the measurement.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `Constraint` - Indicates the size constraint.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs..
    pub measureNode: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            Constraint: *mut ArkUI_LayoutConstraint,
        ) -> i32,
    >,
    /// Lays outs a component and passes the expected position of the component relative to its parent component.
    ///
    /// When the component is being displayed, this API must be called in the main thread.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `positionX` - Indicates the X coordinate.
    ///
    /// * `positionY` - Indicates the Y coordinate.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs..
    pub layoutNode: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, positionX: i32, positionY: i32) -> i32,
    >,
    /// Adds a component event callback function to a component to receive component events generated
    /// by the component.
    ///
    /// Unlike the global registration function <b>registerNodeEventReceiver</b>, this API allows multiple event
    /// receivers to be added to the same component.
    ///
    /// The callback added by this API is triggered before the global callback registered by
    /// <b>registerNodeEventReceiver</b>.
    ///
    /// Do not directly save the <b>ArkUI_NodeEvent</b> object pointer.
    /// The data will be destroyed after the callback is complete.
    ///
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the component for which you want to add the event callback function.
    ///
    /// * `eventReceiver` - Indicates the component event callback function to add.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs..
    pub addNodeEventReceiver: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeEvent)>,
        ) -> i32,
    >,
    /// Removes the registered component event callback function from a component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the component from which you want to remove the event callback function.
    ///
    /// * `eventReceiver` - Indicates the component event callback function to remove.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs..
    pub removeNodeEventReceiver: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeEvent)>,
        ) -> i32,
    >,
    /// Adds a custom event callback function to a component to receive custom events
    /// (such as layout and drawing events) generated by the component.
    ///
    /// Unlike the global registration function <b>registerNodeCustomEventReceiver</b>, this API allows
    /// multiple event receivers to be added to the same component.
    ///
    /// The callback added by this API is triggered before the global callback registered by
    /// <b>registerNodeCustomEventReceiver</b>.
    ///
    /// Do not directly save the <b>ArkUI_NodeCustomEvent</b> object pointer.
    /// The data will be destroyed after the callback is complete.
    ///
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the component for which you want to add the custom event callback function.
    ///
    /// * `eventReceiver` - Indicates the custom event callback function to add.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    pub addNodeCustomEventReceiver: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::core::option::Option<
                unsafe extern "C" fn(event: *mut ArkUI_NodeCustomEvent),
            >,
        ) -> i32,
    >,
    /// Removes a registered custom event callback function from a component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the component from which you want to remove the custom event callback function.
    ///
    /// * `eventReceiver` - Indicates the custom event callback function to remove.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    pub removeNodeCustomEventReceiver: ::core::option::Option<
        unsafe extern "C" fn(
            node: ArkUI_NodeHandle,
            eventReceiver: ::core::option::Option<
                unsafe extern "C" fn(event: *mut ArkUI_NodeCustomEvent),
            >,
        ) -> i32,
    >,
    /// Saves custom data on the specified component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the component on which the custom data will be saved.
    ///
    /// * `userData` - Indicates the custom data to be saved.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs..
    pub setUserData: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, userData: *mut ::core::ffi::c_void) -> i32,
    >,
    /// Obtains the custom data saved on the specified component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target component.
    ///
    /// # Returns
    ///
    /// * Returns the custom data.
    pub getUserData: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle) -> *mut ::core::ffi::c_void,
    >,
    /// Sets the unit for a component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the component for which you want to set the unit.
    ///
    /// * `unit` - Indicates the unit, which is an enumerated value of [`ArkUI_LengthMetricUnit`].
    /// The default value is <b>ARKUI_LENGTH_METRIC_UNIT_DEFAULT</b>.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    pub setLengthMetricUnit: ::core::option::Option<
        unsafe extern "C" fn(node: ArkUI_NodeHandle, unit: ArkUI_LengthMetricUnit) -> i32,
    >,
    /// Get the parent node.
    ///
    /// # Arguments
    ///
    /// * `node` - target node object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer of the component, if not return NULL
    pub getParent:
        ::core::option::Option<unsafe extern "C" fn(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle>,
    /// Uninstall all child nodes from the parent component.
    ///
    /// # Arguments
    ///
    /// * `parent` - target node object.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    pub removeAllChildren:
        ::core::option::Option<unsafe extern "C" fn(parent: ArkUI_NodeHandle) -> i32>,
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_NodeContentEventType {
    /// Defines the attach event.
    pub const NODE_CONTENT_EVENT_ON_ATTACH_TO_WINDOW: ArkUI_NodeContentEventType =
        ArkUI_NodeContentEventType(0);
    /// Defines the detach event.
    pub const NODE_CONTENT_EVENT_ON_DETACH_FROM_WINDOW: ArkUI_NodeContentEventType =
        ArkUI_NodeContentEventType(1);
}
#[repr(transparent)]
/// Defines the node content event type.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_NodeContentEventType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
impl ArkUI_InspectorErrorCode {
    /// Success.
    pub const ARKUI_INSPECTOR_NATIVE_RESULT_SUCCESSFUL: ArkUI_InspectorErrorCode =
        ArkUI_InspectorErrorCode(0);
    /// Invalid parameter.
    pub const ARKUI_INSPECTOR_NATIVE_RESULT_BAD_PARAMETER: ArkUI_InspectorErrorCode =
        ArkUI_InspectorErrorCode(-1);
}
#[repr(transparent)]
/// Enumerates the inspector error codes.
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_InspectorErrorCode(pub ::core::ffi::c_int);
/// Defines the general structure of a node content event.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_NodeContentEvent {
    _unused: [u8; 0],
}
/// Defines the callback function of a node content event.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type ArkUI_NodeContentCallback =
    ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeContentEvent)>;
extern "C" {
    /// Obtains the type of a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// # Returns
    ///
    /// * Returns the type of the component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetEventType(event: *mut ArkUI_NodeEvent) -> ArkUI_NodeEventType;
    /// Obtains the custom ID of a component event.
    ///
    /// The event ID is passed in as a parameter when the [`registerNodeEvent`] function is called and can be applied
    /// to the dispatch logic of the same event entry function [`registerNodeEventReceiver`].
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// # Returns
    ///
    /// * Returns the custom ID of the component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetTargetId(event: *mut ArkUI_NodeEvent) -> i32;
    /// Obtains the component object that triggers a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// # Returns
    ///
    /// * Returns the component object that triggers the component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetNodeHandle(event: *mut ArkUI_NodeEvent) -> ArkUI_NodeHandle;
    /// Obtains input event (for example, touch event) data for a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the input event data.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetInputEvent(event: *mut ArkUI_NodeEvent)
        -> *mut ArkUI_UIInputEvent;
    /// Obtains the numerical data in a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the numerical data.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetNodeComponentEvent(
        event: *mut ArkUI_NodeEvent,
    ) -> *mut ArkUI_NodeComponentEvent;
    /// Obtains the string data in a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the string data.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetStringAsyncEvent(
        event: *mut ArkUI_NodeEvent,
    ) -> *mut ArkUI_StringAsyncEvent;
    /// Obtains the ArkUI_TextChangeEvent data from a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Pointer to a component event. It cannot be null.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>ArkUI_TextChangeEvent</b> object.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeEvent_GetTextChangeEvent(
        event: *mut ArkUI_NodeEvent,
    ) -> *mut ArkUI_TextChangeEvent;
    /// Obtains the custom data in a component event.
    ///
    /// This parameter is passed in [`registerNodeEvent`] and can be applied to the service logic when the event
    /// is triggered.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the custom data.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetUserData(event: *mut ArkUI_NodeEvent) -> *mut ::core::ffi::c_void;
    /// Obtains the numeric-type parameter of a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// * `index` - Indicates the index of the return value.
    ///
    /// * `value` - Indicates the return value.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INDEX_OUT_OF_RANGE`] if the parameter length exceeds
    /// the limit.
    /// Returns [`ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INVALID`] if the data does not exist in the component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetNumberValue(
        event: *mut ArkUI_NodeEvent,
        index: i32,
        value: *mut ArkUI_NumberValue,
    ) -> i32;
    /// Obtains the string-type parameter of a component event. The string data is valid only during an event
    /// callback. To use it outside an event callback, you are advised to copy the string data.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// * `index` - Indicates the index of the return value.
    ///
    /// * `string` - Indicates the pointer to the string array.
    ///
    /// * `stringSize` - Indicates the length of the string array.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INDEX_OUT_OF_RANGE`] if the parameter length exceeds
    /// the limit.
    /// Returns [`ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INVALID`] if the data does not exist in the component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetStringValue(
        event: *mut ArkUI_NodeEvent,
        index: i32,
        string: *mut *mut ::core::ffi::c_char,
        stringSize: *mut i32,
    ) -> i32;
    /// Sets the return value for a component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the component event.
    ///
    /// * `value` - Indicates the numeric-type array.
    ///
    /// * `size` - Indicates the array length.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_NODE_EVENT_NO_RETURN`] if the component event does not support return values.
    /// Returns [`ARKUI_ERROR_CODE_NODE_EVENT_PARAM_INVALID`] if data does not exist in the component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_SetReturnNumberValue(
        event: *mut ArkUI_NodeEvent,
        value: *mut ArkUI_NumberValue,
        size: i32,
    ) -> i32;
    /// Creates a component adapter.
    ///
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_Create() -> ArkUI_NodeAdapterHandle;
    /// Destroys a component adapter.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_Dispose(handle: ArkUI_NodeAdapterHandle);
    /// Sets the total number of elements in the specified adapter.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// * `size` - Indicates the number of elements.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_SetTotalNodeCount(
        handle: ArkUI_NodeAdapterHandle,
        size: u32,
    ) -> i32;
    /// Obtains the total number of elements in the specified adapter.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// # Returns
    ///
    /// * Returns the total number of elements in the adapter.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_GetTotalNodeCount(handle: ArkUI_NodeAdapterHandle) -> u32;
    /// Registers an event callback for the adapter.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// * `userData` - Indicates custom data.
    ///
    /// * `receiver` - Indicates the event receiver callback.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_RegisterEventReceiver(
        handle: ArkUI_NodeAdapterHandle,
        userData: *mut ::core::ffi::c_void,
        receiver: ::core::option::Option<unsafe extern "C" fn(event: *mut ArkUI_NodeAdapterEvent)>,
    ) -> i32;
    /// Deregisters an event callback for the adapter.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_UnregisterEventReceiver(handle: ArkUI_NodeAdapterHandle);
    /// Instructs the specified adapter to reload all elements.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_ReloadAllItems(handle: ArkUI_NodeAdapterHandle) -> i32;
    /// Instructs the specified adapter to reload certain elements.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// * `startPosition` - Indicates the start position of the elements to reload.
    ///
    /// * `itemCount` - Indicates the number of the elements to reload.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_ReloadItem(
        handle: ArkUI_NodeAdapterHandle,
        startPosition: u32,
        itemCount: u32,
    ) -> i32;
    /// Instructs the specified adapter to remove certain elements.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// * `startPosition` - Indicates the start position of the elements to remove.
    ///
    /// * `itemCount` - Indicates the number of the elements to remove.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_RemoveItem(
        handle: ArkUI_NodeAdapterHandle,
        startPosition: u32,
        itemCount: u32,
    ) -> i32;
    /// Instructs the specified adapter to insert certain elements.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// * `startPosition` - Indicates the start position of the elements to insert.
    ///
    /// * `itemCount` - Indicates the number of the elements to insert.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_InsertItem(
        handle: ArkUI_NodeAdapterHandle,
        startPosition: u32,
        itemCount: u32,
    ) -> i32;
    /// Instructs the specified adapter to move certain elements.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// * `from` - Indicates the start position of the elements to move.
    ///
    /// * `to` - Indicates the end position of the elements to move.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_MoveItem(
        handle: ArkUI_NodeAdapterHandle,
        from: u32,
        to: u32,
    ) -> i32;
    /// Obtains all elements stored in the specified adapter.
    ///
    /// This API returns the pointer to the array of the elements. You need to manually release the memory data
    /// to which the pointer points.
    ///
    /// # Arguments
    ///
    /// * `handle` - Indicates the target component adapter.
    ///
    /// * `items` - Indicates the pointer to the array of the elements in the adapter.
    ///
    /// * `size` - Indicates the number of elements.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapter_GetAllItems(
        handle: ArkUI_NodeAdapterHandle,
        items: *mut *mut ArkUI_NodeHandle,
        size: *mut u32,
    ) -> i32;
    /// Obtains the custom data passed in during registration of the specified event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the target adapter event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapterEvent_GetUserData(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> *mut ::core::ffi::c_void;
    /// Obtains the event type.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the target adapter event.
    ///
    /// # Returns
    ///
    /// * Returns the event type.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapterEvent_GetType(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> ArkUI_NodeAdapterEventType;
    /// Obtains the element to be removed for the event to be destroyed.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the target adapter event.
    ///
    /// # Returns
    ///
    /// * Returns the element to be removed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapterEvent_GetRemovedNode(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> ArkUI_NodeHandle;
    /// Obtains the index of the element to be operated for the specified adapter event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the target adapter event.
    ///
    /// # Returns
    ///
    /// * Returns the index of the element.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapterEvent_GetItemIndex(event: *mut ArkUI_NodeAdapterEvent) -> u32;
    /// Obtains the scrollable container node that uses the specified adapter.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the target adapter event.
    ///
    /// # Returns
    ///
    /// * Returns the scrollable container node that uses the specified adapter.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapterEvent_GetHostNode(
        event: *mut ArkUI_NodeAdapterEvent,
    ) -> ArkUI_NodeHandle;
    /// Sets the component to be added to the specified adapter.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the target adapter event.
    ///
    /// * `node` - Indicates the component to be added.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapterEvent_SetItem(
        event: *mut ArkUI_NodeAdapterEvent,
        node: ArkUI_NodeHandle,
    ) -> i32;
    /// Sets the component ID to be generated.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the target adapter event.
    ///
    /// * `id` - Indicates the component ID to set.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeAdapterEvent_SetNodeId(event: *mut ArkUI_NodeAdapterEvent, id: i32) -> i32;
    /// Obtains the size constraint for measurement through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the size constraint.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetLayoutConstraintInMeasure(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> *mut ArkUI_LayoutConstraint;
    /// Obtains the expected position of a component relative to its parent component in the layout phase through a
    /// custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// # Returns
    ///
    /// * Returns the expected position relative to the parent component.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetPositionInLayout(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> ArkUI_IntOffset;
    /// Obtains the drawing context through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// # Returns
    ///
    /// * Returns the drawing context.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetDrawContextInDraw(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> *mut ArkUI_DrawContext;
    /// Obtains the ID of a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// # Returns
    ///
    /// * Returns the ID of the custom component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetEventTargetId(event: *mut ArkUI_NodeCustomEvent) -> i32;
    /// Obtains custom event parameters through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// # Returns
    ///
    /// * Returns the custom event parameters.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetUserData(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> *mut ::core::ffi::c_void;
    /// Obtains a component object through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// # Returns
    ///
    /// * Returns the component object.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetNodeHandle(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> ArkUI_NodeHandle;
    /// Obtains the event type through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// # Returns
    ///
    /// * Returns the type of the custom component event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetEventType(
        event: *mut ArkUI_NodeCustomEvent,
    ) -> ArkUI_NodeCustomEventType;
    /// Obtains the measurement information of a custom span through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// * `info` - Indicates the measurement information to be obtained.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetCustomSpanMeasureInfo(
        event: *mut ArkUI_NodeCustomEvent,
        info: *mut ArkUI_CustomSpanMeasureInfo,
    ) -> i32;
    /// Sets the measurement metrics of a custom span through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// * `metrics` - Indicates the measurement metrics to set.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_SetCustomSpanMetrics(
        event: *mut ArkUI_NodeCustomEvent,
        metrics: *mut ArkUI_CustomSpanMetrics,
    ) -> i32;
    /// Obtains the drawing information of a custom span through a custom component event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the custom component event.
    ///
    /// * `info` - Indicates the drawing information to obtain.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// <br> Possible causes: Parameter verification failed, the parameter should not be nullptr.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeCustomEvent_GetCustomSpanDrawInfo(
        event: *mut ArkUI_NodeCustomEvent,
        info: *mut ArkUI_CustomSpanDrawInfo,
    ) -> i32;
    /// register a callback function to a node content.
    ///
    /// # Arguments
    ///
    /// * `content` - Indicates the pointer to the node content instance.
    ///
    /// * `callback` - Indicates the callback function.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContent_RegisterCallback(
        content: ArkUI_NodeContentHandle,
        callback: ArkUI_NodeContentCallback,
    ) -> i32;
    /// Obtains the type of a node content event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the node content event.
    ///
    /// # Returns
    ///
    /// * Returns the type of the node content event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContentEvent_GetEventType(
        event: *mut ArkUI_NodeContentEvent,
    ) -> ArkUI_NodeContentEventType;
    /// Obtains the node content object that triggers a node content event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to the node content event.
    ///
    /// # Returns
    ///
    /// * Returns the node content object that triggers the node content event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContentEvent_GetNodeContentHandle(
        event: *mut ArkUI_NodeContentEvent,
    ) -> ArkUI_NodeContentHandle;
    /// Saves custom data on the specified node content.
    ///
    /// # Arguments
    ///
    /// * `content` - Indicates the node content on which the custom data will be saved.
    ///
    /// * `userData` - Indicates the custom data to be saved.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContent_SetUserData(
        content: ArkUI_NodeContentHandle,
        userData: *mut ::core::ffi::c_void,
    ) -> i32;
    /// Obtains the custom data saved on the specified node content.
    ///
    /// # Arguments
    ///
    /// * `content` - Indicates the target node content.
    ///
    /// # Returns
    ///
    /// * Returns the custom data.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContent_GetUserData(
        content: ArkUI_NodeContentHandle,
    ) -> *mut ::core::ffi::c_void;
    /// Add a node to a node content.
    ///
    /// # Arguments
    ///
    /// * `content` - Indicates the pointer to the node content instance.
    ///
    /// * `node` - Indicates the pointer to the node
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContent_AddNode(
        content: ArkUI_NodeContentHandle,
        node: ArkUI_NodeHandle,
    ) -> i32;
    /// remove a node from a node content.
    ///
    /// # Arguments
    ///
    /// * `content` - Indicates the pointer to the node content instance.
    ///
    /// * `node` - Indicates the pointer to the node
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContent_RemoveNode(
        content: ArkUI_NodeContentHandle,
        node: ArkUI_NodeHandle,
    ) -> i32;
    /// insert a node into a node content at a given position.
    ///
    /// # Arguments
    ///
    /// * `content` - Indicates the pointer to the node content instance.
    ///
    /// * `node` - Indicates the pointer to the node
    ///
    /// * `position` - Indicates the position for inserting the node
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeContent_InsertNode(
        content: ArkUI_NodeContentHandle,
        node: ArkUI_NodeHandle,
        position: i32,
    ) -> i32;
    /// Get the size of the component layout area.
    /// The layout area size does not include graphic variation attributes such as scaling.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `size` - The drawing area size of the component handle, in px.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeUtils_GetLayoutSize(
        node: ArkUI_NodeHandle,
        size: *mut ArkUI_IntSize,
    ) -> i32;
    /// Obtain the position of the component layout area relative to the parent component.
    /// The relative position of the layout area does not include graphic variation attributes, such as translation.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `localOffset` - The offset value of the component handle relative to the parent component, in px.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeUtils_GetLayoutPosition(
        node: ArkUI_NodeHandle,
        localOffset: *mut ArkUI_IntOffset,
    ) -> i32;
    /// Obtain the position of the component layout area relative to the window.
    /// The relative position of the layout area does not include graphic variation attributes, such as translation.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `globalOffset` - The offset value of the component handle relative to the window, in px.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeUtils_GetLayoutPositionInWindow(
        node: ArkUI_NodeHandle,
        globalOffset: *mut ArkUI_IntOffset,
    ) -> i32;
    /// Obtain the position of the component layout area relative to the screen.
    /// The relative position of the layout area does not include graphic variation attributes, such as translation.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `screenOffset` - The offset value of the component handle relative to the screen, in px.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeUtils_GetLayoutPositionInScreen(
        node: ArkUI_NodeHandle,
        screenOffset: *mut ArkUI_IntOffset,
    ) -> i32;
    /// Obtain the position of the component in the window, including the properties of graphic translation changes.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `translateOffset` - The cumulative offset value of the component handle itself,
    /// parent components, and ancestor nodes, in px.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeUtils_GetPositionWithTranslateInWindow(
        node: ArkUI_NodeHandle,
        translateOffset: *mut ArkUI_IntOffset,
    ) -> i32;
    /// Obtain the position of the component on the screen, including the attributes of graphic translation changes.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `translateOffset` - The cumulative offset value of the component handle itself,
    /// parent components, and ancestor nodes, in px.
    ///
    /// # Returns
    ///
    /// * Returns the error code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeUtils_GetPositionWithTranslateInScreen(
        node: ArkUI_NodeHandle,
        translateOffset: *mut ArkUI_IntOffset,
    ) -> i32;
    /// Add the custom property of the component. This interface only works on the main thread.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `name` - The name of the custom property. Passing null pointers is not allowed.
    ///
    /// * `value` - The value of the custom property. Passing null pointers is not allowed.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_NodeUtils_AddCustomProperty(
        node: ArkUI_NodeHandle,
        name: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
    );
    /// Remove the custom property of the component.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI_NodeHandle pointer.
    ///
    /// * `name` - The name of the custom property.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_NodeUtils_RemoveCustomProperty(
        node: ArkUI_NodeHandle,
        name: *const ::core::ffi::c_char,
    );
    /// Get the value of the custom property of the component.
    ///
    /// # Arguments
    ///
    /// * `node` - ArkUI-NodeHandle pointer.
    ///
    /// * `name` - The name of the custom attribute.
    ///
    /// * `handle` - The structure of the custom attribute corresponding to the key parameter name obtained.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_NodeUtils_GetCustomProperty(
        node: ArkUI_NodeHandle,
        name: *const ::core::ffi::c_char,
        handle: *mut *mut ArkUI_CustomProperty,
    ) -> i32;
    /// Get the parent node to obtain the component nodes created by ArkTs.
    ///
    /// # Arguments
    ///
    /// * `node` - Target node object.
    ///
    /// # Returns
    ///
    /// * Return the pointer of the component.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_NodeUtils_GetParentInPageTree(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle;
    /// Retrieve all active child nodes of a node. Span will not be counted in the children.
    ///
    /// # Arguments
    ///
    /// * `head` - Pass in the node that needs to be obtained.
    ///
    /// * `handle` - The structure corresponding to the sub node information of the head node.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_NodeUtils_GetActiveChildrenInfo(
        head: ArkUI_NodeHandle,
        handle: *mut *mut ArkUI_ActiveChildrenInfo,
    ) -> i32;
    /// Retrieve the root node of the current page.
    ///
    /// # Arguments
    ///
    /// * `node` - Target node object.
    ///
    /// # Returns
    ///
    /// * Return the pointer of the component.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_NodeUtils_GetCurrentPageRootNode(node: ArkUI_NodeHandle) -> ArkUI_NodeHandle;
    /// Retrieve whether the component is labeled by C-API.
    ///
    /// # Arguments
    ///
    /// * `node` - Target node object.
    ///
    /// # Returns
    ///
    /// * Return whether the node is a Tag created by C-API,
    /// true represents created by C-API, false represents not created by C-API.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_NodeUtils_IsCreatedByNDK(node: ArkUI_NodeHandle) -> bool;
    /// Get the type of node.
    ///
    /// # Arguments
    ///
    /// * `node` - Target node object.
    ///
    /// # Returns
    ///
    /// * Return the type of the node.
    /// For specific open types, refer to [`ArkUI_NodeType`]. For unopened nodes, return -1.
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_ArkUI_NodeUtils_GetNodeType(node: ArkUI_NodeHandle) -> i32;
    /// Get info of the window to which the node belongs.
    ///
    /// # Arguments
    ///
    /// * `node` - Target node object.
    ///
    /// * `info` - Window info. Use [`OH_ArkUI_HostWindowInfo_Destroy`] to release memory.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    /// [`ARKUI_ERROR_CODE_NODE_NOT_ON_MAIN_TREE`] The node is not mounted.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_GetWindowInfo(
        node: ArkUI_NodeHandle,
        info: *mut *mut ArkUI_HostWindowInfo,
    ) -> i32;
    /// Obtains the index of the current FrameNode's first child node which is on the tree.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `index` - The index of the subnode.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_GetFirstChildIndexWithoutExpand(
        node: ArkUI_NodeHandle,
        index: *mut u32,
    ) -> i32;
    /// Obtains the index of the current FrameNode's last child node which is on the tree.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `index` - the index of the subnode.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_GetLastChildIndexWithoutExpand(
        node: ArkUI_NodeHandle,
        index: *mut u32,
    ) -> i32;
    /// Obtains a subnode by position with the expand mode.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `position` - Indicates the position of the subnode.
    ///
    /// * `subnode` - The pointer to the subnode.
    ///
    /// * `expandMode` - Indicates the expand mode. [`ArkUI_ExpandMode`].
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_GetChildWithExpandMode(
        node: ArkUI_NodeHandle,
        position: i32,
        subnode: *mut ArkUI_NodeHandle,
        expandMode: u32,
    ) -> i32;
    /// Collapse the ListItem in its expanded state.
    ///
    /// # Arguments
    ///
    /// * `node` - Node objects that need to be registered for events.
    ///
    /// * `userData` - Custom event parameters are carried back in the callback parameter when the event is triggered.
    ///
    /// * `onFinish` - The callback triggered after the completion of the folding animation.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] Success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    /// [`ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED`] The component does not support this event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_List_CloseAllSwipeActions(
        node: ArkUI_NodeHandle,
        userData: *mut ::core::ffi::c_void,
        onFinish: ::core::option::Option<unsafe extern "C" fn(userData: *mut ::core::ffi::c_void)>,
    ) -> i32;
    /// Obtain the UIContext pointer to the page where the node is located.
    ///
    /// # Arguments
    ///
    /// * `node` - The node.
    ///
    /// # Returns
    ///
    /// * The UIContext pointer.
    /// If a null pointer is returned, it may be because the node is empty.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_GetContextByNode(node: ArkUI_NodeHandle) -> ArkUI_ContextHandle;
    /// The event called when the system color mode changes.
    /// Only one system color change callback can be registered for the same component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `userData` - Indicates the custom data to be saved.
    ///
    /// * `onColorModeChange` - Callback Events.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] Success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    /// [`ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED`] The component does not support this event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_RegisterSystemColorModeChangeEvent(
        node: ArkUI_NodeHandle,
        userData: *mut ::core::ffi::c_void,
        onColorModeChange: ::core::option::Option<
            unsafe extern "C" fn(
                colorMode: ArkUI_SystemColorMode,
                userData: *mut ::core::ffi::c_void,
            ),
        >,
    ) -> i32;
    /// Unregister the event callback when the system color mode changes.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_UnregisterSystemColorModeChangeEvent(node: ArkUI_NodeHandle);
    /// The event called when the system font style changes.
    /// Only one system font change callback can be registered for the same component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `userData` - Indicates the custom data to be saved.
    ///
    /// * `onFontStyleChange` - Callback Events.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] Success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    /// [`ARKUI_ERROR_CODE_ATTRIBUTE_OR_EVENT_NOT_SUPPORTED`] The component does not support this event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_RegisterSystemFontStyleChangeEvent(
        node: ArkUI_NodeHandle,
        userData: *mut ::core::ffi::c_void,
        onFontStyleChange: ::core::option::Option<
            unsafe extern "C" fn(
                event: *mut ArkUI_SystemFontStyleEvent,
                userData: *mut ::core::ffi::c_void,
            ),
        >,
    ) -> i32;
    /// Unregister the event callback when the system font style changes.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_UnregisterSystemFontStyleChangeEvent(node: ArkUI_NodeHandle);
    /// Retrieve the font size value for system font change events.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates a pointer to the current system font change event.
    ///
    /// # Returns
    ///
    /// * Updated system font size scaling factor. Default value: 1.0.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SystemFontStyleEvent_GetFontSizeScale(
        event: *const ArkUI_SystemFontStyleEvent,
    ) -> f32;
    /// Retrieve the font thickness values for system font change events.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates a pointer to the current system font change event.
    ///
    /// # Returns
    ///
    /// * The updated system font thickness scaling factor. Default value: 1.0.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SystemFontStyleEvent_GetFontWeightScale(
        event: *const ArkUI_SystemFontStyleEvent,
    ) -> f32;
    /// Move the node handle to target parent node as child.
    ///
    /// # Arguments
    ///
    /// * `node` - The node handle of the node to move.
    ///
    /// * `target_parent` - The node handle of target parent.
    ///
    /// * `index` - Indicates the index which the node is moved to. If the value is a nagative number of invalid, the
    /// node is moved to the end of the target parent node.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    /// [`ARKUI_ERROR_CODE_CAPI_INIT_ERROR`] if the CAPI init error.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub fn OH_ArkUI_NodeUtils_MoveTo(
        node: ArkUI_NodeHandle,
        target_parent: ArkUI_NodeHandle,
        index: i32,
    ) -> i32;
    /// Set the cross-language option of the target node handle.
    ///
    /// # Arguments
    ///
    /// * `node` - The target node handle.
    ///
    /// * `option` - The cross-language option [`ArkUI_CrossLanguageOption`].
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_SetCrossLanguageOption(
        node: ArkUI_NodeHandle,
        option: *mut ArkUI_CrossLanguageOption,
    ) -> i32;
    /// Get the cross-language option of the target node handle.
    ///
    /// # Arguments
    ///
    /// * `node` - The target node handle.
    ///
    /// * `option` - The cross-language option [`ArkUI_CrossLanguageOption`].
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_GetCrossLanguageOption(
        node: ArkUI_NodeHandle,
        option: *mut ArkUI_CrossLanguageOption,
    ) -> i32;
    /// Registers a callback for node when layout is completed.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `userData` - Indicates the custom data used in onLayoutCompleted callback function.
    ///
    /// * `onLayoutCompleted` - Indicates the function when layout completed is callback.
    ///
    /// # Returns
    ///
    /// * error code
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_RegisterLayoutCallbackOnNodeHandle(
        node: ArkUI_NodeHandle,
        userData: *mut ::core::ffi::c_void,
        onLayoutCompleted: ::core::option::Option<
            unsafe extern "C" fn(userData: *mut ::core::ffi::c_void),
        >,
    ) -> i32;
    /// Registers a callback for node when draw is completed.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `userData` - Indicates the custom data used in onDrawCompleted callback function.
    ///
    /// * `onDrawCompleted` - Indicates the function when draw completed is callback.
    ///
    /// # Returns
    ///
    /// * error code
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_RegisterDrawCallbackOnNodeHandle(
        node: ArkUI_NodeHandle,
        userData: *mut ::core::ffi::c_void,
        onDrawCompleted: ::core::option::Option<
            unsafe extern "C" fn(userData: *mut ::core::ffi::c_void),
        >,
    ) -> i32;
    /// Unregisters the layout completed callback for node.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * error code
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_UnregisterLayoutCallbackOnNodeHandle(node: ArkUI_NodeHandle) -> i32;
    /// Unregisters the draw completed callback for node.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// # Returns
    ///
    /// * error code
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// [`ARKUI_INSPECTOR_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_UnregisterDrawCallbackOnNodeHandle(node: ArkUI_NodeHandle) -> i32;
    /// Get the node handle by id.
    ///
    /// # Arguments
    ///
    /// * `id` - The id of the target node handle.
    ///
    /// * `node` - The handle of target node handle.
    ///
    /// # Returns
    ///
    /// * Error code.
    /// [`ARKUI_ERROR_CODE_NO_ERROR`] success.
    /// [`ARKUI_ERROR_CODE_PARAM_INVALID`] Function parameter exception.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_GetAttachedNodeHandleById(
        id: *const ::core::ffi::c_char,
        node: *mut ArkUI_NodeHandle,
    ) -> i32;
    /// Get the snapshot pixelmap for the given node synchronously, will get error if the node is not on the
    /// tree or is not rendered yet.
    /// Note: the pixelmap should be released through OH_PixelmapNative_Release when it's not used any more.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the target node.
    ///
    /// * `snapshotOptions` - the given configuration for taking snapshot, can be null for using default.
    ///
    /// * `pixelmap` - Pixelmap pointer created by system, it's the out result.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_INTERNAL_ERROR`] if the snapshot taking failed will null pixelmap returned.
    /// Returns [`ARKUI_ERROR_CODE_COMPONENT_SNAPSHOT_TIMEOUT`] if the snapshot taking is timeout.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_GetNodeSnapshot(
        node: ArkUI_NodeHandle,
        snapshotOptions: *mut ArkUI_SnapshotOptions,
        pixelmap: *mut *mut OH_PixelmapNative,
    ) -> i32;
    /// Obtains the offset of a specific node relative to its parent node.
    ///
    /// # Arguments
    ///
    /// * `node` - Target node.
    ///
    /// * `globalOffset` - Offset of the target node relative to its parent node, in px.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_NodeUtils_GetPositionToParent(
        node: ArkUI_NodeHandle,
        globalOffset: *mut ArkUI_IntOffset,
    ) -> i32;
}
