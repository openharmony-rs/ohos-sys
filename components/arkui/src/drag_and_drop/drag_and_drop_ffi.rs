// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_type::*;
pub use ohos_sys_opaque_types::OH_PixelmapNative;

#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_DragResult {
    /// The drag and drop operation succeeded.
    pub const SUCCESSFUL: ArkUI_DragResult = ArkUI_DragResult(0);
    /// The drag and drop operation failed.
    pub const FAILED: ArkUI_DragResult = ArkUI_DragResult(1);
    /// The drag and drop operation was canceled.
    pub const CANCELED: ArkUI_DragResult = ArkUI_DragResult(2);
}
#[repr(transparent)]
/// Defines an enum for drag results, which are set by the data receiver and transferred by the system to the
/// drag source so that the drag source is aware of the data processing result of the receiver.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_DragResult(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_DropOperation {
    /// Copy.
    pub const ARKUI_DROP_OPERATION_COPY: ArkUI_DropOperation = ArkUI_DropOperation(0);
    /// Cut.
    pub const ARKUI_DROP_OPERATION_MOVE: ArkUI_DropOperation = ArkUI_DropOperation(1);
}
#[repr(transparent)]
/// Defines an enum for data processing modes used when data is dropped, which affects the display of the badge.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_DropOperation(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_PreDragStatus {
    /// Unknown.
    pub const ARKUI_PRE_DRAG_STATUS_UNKNOWN: ArkUI_PreDragStatus = ArkUI_PreDragStatus(-1);
    /// A drag gesture is being detected.
    pub const ARKUI_PRE_DRAG_STATUS_ACTION_DETECTING: ArkUI_PreDragStatus = ArkUI_PreDragStatus(0);
    /// The component is ready to be dragged.
    pub const ARKUI_PRE_DRAG_STATUS_READY_TO_TRIGGER_DRAG: ArkUI_PreDragStatus =
        ArkUI_PreDragStatus(1);
    /// A lift animation is started.
    pub const ARKUI_PRE_DRAG_STATUS_PREVIEW_LIFT_STARTED: ArkUI_PreDragStatus =
        ArkUI_PreDragStatus(2);
    /// A lift animation is finished.
    pub const ARKUI_PRE_DRAG_STATUS_PREVIEW_LIFT_FINISHED: ArkUI_PreDragStatus =
        ArkUI_PreDragStatus(3);
    /// A drop animation is started.
    pub const ARKUI_PRE_DRAG_STATUS_PREVIEW_LANDING_STARTED: ArkUI_PreDragStatus =
        ArkUI_PreDragStatus(4);
    /// A drop animation is finished.
    pub const ARKUI_PRE_DRAG_STATUS_PREVIEW_LANDING_FINISHED: ArkUI_PreDragStatus =
        ArkUI_PreDragStatus(5);
    /// A drop animation is terminated.
    pub const ARKUI_PRE_DRAG_STATUS_CANCELED_BEFORE_DRAG: ArkUI_PreDragStatus =
        ArkUI_PreDragStatus(6);
}
#[repr(transparent)]
/// Defines an enum for interaction states prior to a drop and drop operation.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_PreDragStatus(pub ::core::ffi::c_int);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_DragPreviewScaleMode {
    /// The system automatically changes the position of the dragged point based on the scenario and
    /// scales the drag preview based on set rules.
    pub const ARKUI_DRAG_PREVIEW_SCALE_AUTO: ArkUI_DragPreviewScaleMode =
        ArkUI_DragPreviewScaleMode(0);
    /// The system does not scale the drag preview.
    pub const ARKUI_DRAG_PREVIEW_SCALE_DISABLED: ArkUI_DragPreviewScaleMode =
        ArkUI_DragPreviewScaleMode(1);
}
#[repr(transparent)]
/// Defines an enum for drag preview scale modes.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_DragPreviewScaleMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl ArkUI_DragStatus {
    /// Unknown.
    pub const ARKUI_DRAG_STATUS_UNKNOWN: ArkUI_DragStatus = ArkUI_DragStatus(-1);
    /// Started.
    pub const ARKUI_DRAG_STATUS_STARTED: ArkUI_DragStatus = ArkUI_DragStatus(0);
    /// Ended.
    pub const ARKUI_DRAG_STATUS_ENDED: ArkUI_DragStatus = ArkUI_DragStatus(1);
}
#[repr(transparent)]
/// Defines an enum for drag states.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_DragStatus(pub ::core::ffi::c_int);
/// Defines a struct for a component event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_NodeEvent {
    _unused: [u8; 0],
}
/// Defines a struct for a drag event.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_DragEvent {
    _unused: [u8; 0],
}
/// Defines a struct for custom drag preview options.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_DragPreviewOption {
    _unused: [u8; 0],
}
/// Defines a struct for a drag action.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_DragAction {
    _unused: [u8; 0],
}
/// Defines a struct for drag and drop information returned through a drag status listener.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct ArkUI_DragAndDropInfo {
    _unused: [u8; 0],
}
extern "C" {
    /// Obtains a <b>ArkUI_DragEvent</b> object from the specified <b>ArkUI_NodeEvent</b> object.
    ///
    /// # Arguments
    ///
    /// * `nodeEvent` - Indicates the pointer to an <b>ArkUI_NodeEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to an <b>ArkUI_DragEvent</b> object.
    /// Returns <b>null</b> if the parameter passed in is invalid or is not a drag-related event.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetDragEvent(nodeEvent: *mut ArkUI_NodeEvent)
        -> *mut ArkUI_DragEvent;
    /// Obtains the interaction state prior to a drop and drop operation.
    ///
    /// # Arguments
    ///
    /// * `nodeEvent` - Indicates the pointer to an <b>ArkUI_NodeEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the interaction state prior to the drop and drop operation.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_NodeEvent_GetPreDragStatus(
        nodeEvent: *mut ArkUI_NodeEvent,
    ) -> ArkUI_PreDragStatus;
    /// Sets whether to disable the default drop animation.
    /// The default drop animation is enabled by default and can be disabled to apply a custom drop animation.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `disable` - Indicates whether to disable the default drop animation.
    /// The value <b>true</b> means to disable the default drop animation, and <b>false</b> means the opposite.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_DisableDefaultDropAnimation(
        event: *mut ArkUI_DragEvent,
        disable: bool,
    ) -> i32;
    /// Sets the data processing mode.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `dropOperation` - Indicates the data processing mode.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_SetSuggestedDropOperation(
        event: *mut ArkUI_DragEvent,
        dropOperation: ArkUI_DropOperation,
    ) -> i32;
    /// Sets the result for a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `result` - Indicates the drag result.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_SetDragResult(
        event: *mut ArkUI_DragEvent,
        result: ArkUI_DragResult,
    ) -> i32;
    /// Obtains the number of drag data types from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `count` - Indicates the number of drag data types returned.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetDataTypeCount(event: *mut ArkUI_DragEvent, count: *mut i32)
        -> i32;
    /// Obtains the list of drag data types from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `eventTypeArray` - Indicates the list of the drag data types. You need to create a string array first.
    ///
    /// * `length` - Indicates the total length of the list array. It must be greater than or equal to the number obtained
    /// by using [`OH_ArkUI_DragEvent_GetDataTypeCount`].
    ///
    /// * `maxStrLen` - Indicates the max string length of drag data types.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Returns [`ARKUI_ERROR_CODE_BUFFER_SIZE_ERROR`] if the giving buffer is not enough for string copy.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetDataTypes(
        event: *mut ArkUI_DragEvent,
        eventTypeArray: *mut *mut ::core::ffi::c_char,
        length: i32,
        maxStrLen: i32,
    ) -> i32;
    /// Obtains the drag result from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `result` - Indicates the drag result returned.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetDragResult(
        event: *mut ArkUI_DragEvent,
        result: *mut ArkUI_DragResult,
    ) -> i32;
    /// Obtains the drop operation from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `operation` - Indicates the drop operation which the data receiver set.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    /// Possible causes: 1. The given parameters are null or the given event is not a valid DragEvent.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetDropOperation(
        event: *mut ArkUI_DragEvent,
        operation: *mut ArkUI_DropOperation,
    ) -> i32;
    /// Obtains the X coordinate of the touch point for a drag preview from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate of the touch point, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetPreviewTouchPointX(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the Y coordinate of the touch point for a drag preview from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate of the touch point, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetPreviewTouchPointY(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the width of a drag preview from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the width of the drag preview, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetPreviewRectWidth(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the height of a drag preview from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the height of the drag preview, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetPreviewRectHeight(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the X coordinate of the touch point relative to the window from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate of the touch point relative to the window, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetTouchPointXToWindow(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the Y coordinate of the touch point relative to the window from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate of the touch point relative to the window, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetTouchPointYToWindow(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the X coordinate of the touch point relative to the current display from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the X coordinate of the touch point relative to the current display, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetTouchPointXToDisplay(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the Y coordinate of the touch point relative to the current display from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the Y coordinate of the touch point relative to the current display, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetTouchPointYToDisplay(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the dragging velocity along the x-axis.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the dragging velocity along the x-axis, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetVelocityX(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the dragging velocity along the y-axis.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the dragging velocity along the y-axis, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetVelocityY(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the dragging velocity along the main axis.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the dragging velocity along the main axis, in px.
    /// Returns the default value <b>0</b> if the input parameter is invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetVelocity(event: *mut ArkUI_DragEvent) -> f32;
    /// Obtains the pressed status of modifier keys from a drag event.
    ///
    /// # Arguments
    ///
    /// * `event` - Indicates the pointer to an <b>ArkUI_DragEvent</b> object.
    ///
    /// * `keys` - Indicates the returned combination of modifier keys that are currently pressed.
    /// The application can determine the pressed modifier keys through bitwise operations.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragEvent_GetModifierKeyStates(
        event: *mut ArkUI_DragEvent,
        keys: *mut u64,
    ) -> i32;
    /// Sets whether to enable strict reporting on drag events.
    /// This feature is disabled by default, and you are advised to enable it.
    /// If this feature is disabled, the parent component is not notified when an item in it is dragged over its child
    /// component. If this feature is enabled, the component is notified of the dragged item's leaving, and the chil
    /// component to which the dragged item is dropped is notified of the item's entering. This configuration is
    /// related to a specific UI instance. You can pass in a specific component node on the current UI instance
    /// for association.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// * `enabled` - Indicates whether to enable strict reporting on drag events.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SetDragEventStrictReportWithNode(node: ArkUI_NodeHandle, enabled: bool) -> i32;
    /// Sets whether to enable strict reporting on drag events.
    /// This feature is disabled by default, and you are advised to enable it.
    /// If this feature is disabled, the parent component is not notified when an item in it is dragged over its child
    /// component. If this feature is enabled, the component is notified of the dragged item's leaving, and the child
    /// component to which the dragged item is dropped is notified of the item's entering. This configuration is
    /// related to a specific UI instance. You can pass in a specific UI instance for association.
    ///
    /// # Arguments
    ///
    /// * `uiContext` - Indicates the pointer to a UI instance.
    ///
    /// * `enabled` - Indicates whether to enable strict reporting on drag events.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SetDragEventStrictReportWithContext(
        uiContext: ArkUI_ContextHandle,
        enabled: bool,
    ) -> i32;
    /// Sets the types of data that can be dropped to the specified component. This API resets the settings configured
    /// through [`OH_ArkUI_DisallowNodeAnyDropDataTypes`] and [`OH_ArkUI_AllowNodeAllDropDataTypes`].
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// * `typesArray` - Indicates the array of types of data that can be dropped.
    ///
    /// * `count` - Indicates length of an array.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SetNodeAllowedDropDataTypes(
        node: ArkUI_NodeHandle,
        typesArray: *mut *const ::core::ffi::c_char,
        count: i32,
    ) -> i32;
    /// Configures the specified component to disallow any data types. This API resets the settings configured through
    /// [`OH_ArkUI_SetNodeAllowedDropDataTypes`].
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DisallowNodeAnyDropDataTypes(node: ArkUI_NodeHandle) -> i32;
    /// Configures the specified component to allow any data types. This API resets the settings configured through
    /// [`OH_ArkUI_SetNodeAllowedDropDataTypes`].
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_AllowNodeAllDropDataTypes(node: ArkUI_NodeHandle) -> i32;
    /// Sets whether the specified component is draggable.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// * `bool` - Indicates whether the component is draggable.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SetNodeDraggable(node: ArkUI_NodeHandle, enabled: bool) -> i32;
    /// Sets a custom drag preview for the specified component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// * `preview` - Indicates the custom drag preview, which is a pixel map.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SetNodeDragPreview(
        node: ArkUI_NodeHandle,
        preview: *mut OH_PixelmapNative,
    ) -> i32;
    /// Creates an <b>ArkUI_DragPreviewOption</b> object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns the created <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateDragPreviewOption() -> *mut ArkUI_DragPreviewOption;
    /// Disposes of a <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragPreviewOption_Dispose(option: *mut ArkUI_DragPreviewOption);
    /// Sets the scale mode for an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// * `scaleMode` - Indicates the scale mode.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragPreviewOption_SetScaleMode(
        option: *mut ArkUI_DragPreviewOption,
        scaleMode: ArkUI_DragPreviewScaleMode,
    ) -> i32;
    /// Sets whether to enable the shadow effect for an <b>ArkUI_DragPreviewOption</b> object.
    /// The shadow effect is enabled by default.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// * `enabled` - Indicates whether to enable the shadow effect.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragPreviewOption_SetDefaultShadowEnabled(
        option: *mut ArkUI_DragPreviewOption,
        enabled: bool,
    ) -> i32;
    /// Sets whether to enable the rounded corner effect for an <b>ArkUI_DragPreviewOption</b> object.
    /// The rounded corner effect is enabled by default.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// * `enabled` - Indicates whether to enable the rounded corner effect.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragPreviewOption_SetDefaultRadiusEnabled(
        option: *mut ArkUI_DragPreviewOption,
        enabled: bool,
    ) -> i32;
    /// Sets whether to enable the badge for an <b>ArkUI_DragPreviewOption</b> object.
    /// If this feature is enabled, a badge that contains the number of dragged items is displayed.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// * `enabled` - Indicates whether to enable badge.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragPreviewOption_SetNumberBadgeEnabled(
        option: *mut ArkUI_DragPreviewOption,
        enabled: bool,
    ) -> i32;
    /// Sets the count on the badge.
    /// The settings will overwrite the value in the <b>SetDragPreviewNumberBadgeEnabled</b> API.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// * `forcedNumber` - Indicates the count on the badge.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragPreviewOption_SetBadgeNumber(
        option: *mut ArkUI_DragPreviewOption,
        forcedNumber: u32,
    ) -> i32;
    /// Sets whether to enable the default animation on a click or touch, it's not used in drag action.
    ///
    /// # Arguments
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// * `enabled` - Indicates whether to enable the default animation on a click or touch.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragPreviewOption_SetDefaultAnimationBeforeLiftingEnabled(
        option: *mut ArkUI_DragPreviewOption,
        enabled: bool,
    ) -> i32;
    /// Sets an <b>ArkUI_DragPreviewOption</b> object for the specified component.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_SetNodeDragPreviewOption(
        node: ArkUI_NodeHandle,
        option: *mut ArkUI_DragPreviewOption,
    ) -> i32;
    /// Creates a drag action object for a UI instance based on the specified component node of the current
    /// UI instance.
    ///
    /// # Arguments
    ///
    /// * `node` - Indicates the pointer to a component node.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the created drag action object; returns null if the operation fails.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateDragActionWithNode(node: ArkUI_NodeHandle) -> *mut ArkUI_DragAction;
    /// Creates a drag action object for the specified UI instance.
    ///
    /// # Arguments
    ///
    /// * `uiContext` - Indicates the pointer to a UI instance.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the created drag action object; returns null if the operation fails.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_CreateDragActionWithContext(
        uiContext: ArkUI_ContextHandle,
    ) -> *mut ArkUI_DragAction;
    /// Disposes of a drag action object.
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_Dispose(dragAction: *mut ArkUI_DragAction);
    /// Sets the pointer ID. If only one finger is operating on the screen, the pointer ID is 0.
    /// In general cases, you can set the pointer ID to 0.
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// * `pointer` - Indicates the pointer ID. The value ranges from 0 to 9.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_SetPointerId(dragAction: *mut ArkUI_DragAction, pointer: i32)
        -> i32;
    /// Sets the drag previews for a drag action.
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// * `pixelmapArray` - Indicates the array of the drag previews to set, which must be pixel maps.
    ///
    /// * `size` - Indicates the size of the drag preview array.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_SetPixelMaps(
        dragAction: *mut ArkUI_DragAction,
        pixelmapArray: *mut *mut OH_PixelmapNative,
        size: i32,
    ) -> i32;
    /// Sets the touch point relative to the upper left corner of the first drag preview (pixel map).
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// * `x` - Indicates the X coordinate of the touch point.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_SetTouchPointX(dragAction: *mut ArkUI_DragAction, x: f32) -> i32;
    /// Sets the touch point relative to the upper left corner of the first drag preview (pixel map).
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// * `y` - Indicates the Y coordinate of the touch point.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_SetTouchPointY(dragAction: *mut ArkUI_DragAction, y: f32) -> i32;
    /// Sets an <b>ArkUI_DragPreviewOption</b> object for the specified drag action object.
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// * `option` - Indicates the pointer to an <b>ArkUI_DragPreviewOption</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_SetDragPreviewOption(
        dragAction: *mut ArkUI_DragAction,
        option: *mut ArkUI_DragPreviewOption,
    ) -> i32;
    /// Registers a drag status listener.
    /// This listener can be used to check whether the data is successfully received and processed.
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// * `userData` - Indicates the custom user data.
    ///
    /// * `listener` - Indicates the listener to register. When the callback is invoked, the system returns a pointer to the drag status
    /// object. The pointer is destroyed after the callback is complete and the application should not hold it anymore.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_RegisterStatusListener(
        dragAction: *mut ArkUI_DragAction,
        userData: *mut ::core::ffi::c_void,
        listener: ::core::option::Option<
            unsafe extern "C" fn(
                dragAndDropInfo: *mut ArkUI_DragAndDropInfo,
                userData: *mut ::core::ffi::c_void,
            ),
        >,
    ) -> i32;
    /// Unregisters a drag status listener.
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates the pointer to the target drag action object.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAction_UnregisterStatusListener(dragAction: *mut ArkUI_DragAction);
    /// Obtains the drag status of a drag action.
    ///
    /// # Arguments
    ///
    /// * `dragAndDropInfo` - Indicates the drag and drop information returned by the drag status listener.
    ///
    /// # Returns
    ///
    /// * Returns an <b>ArkUI_DragStatus</b> object; returns <b>ArkUI_DRAG_STATUS_UNKNOWN</b> if an error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAndDropInfo_GetDragStatus(
        dragAndDropInfo: *mut ArkUI_DragAndDropInfo,
    ) -> ArkUI_DragStatus;
    /// Obtains a drag event based on the specified drag and drop information.
    /// The drag event can then be used to obtain the drag result and the drag behavior, please note
    /// other info is not included in such a drag event.
    ///
    /// # Arguments
    ///
    /// * `dragAndDropInfo` - Indicates the drag and drop information returned by the drag status listener.
    ///
    /// # Returns
    ///
    /// * Returns an <b>ArkUI_DragEvent</b> object; returns null if an error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_DragAndDropInfo_GetDragEvent(
        dragAndDropInfo: *mut ArkUI_DragAndDropInfo,
    ) -> *mut ArkUI_DragEvent;
    /// Initiates a drag action through the specified drag action object.
    ///
    /// # Arguments
    ///
    /// * `dragAction` - Indicates a drag action object.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// Returns [`ARKUI_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// Returns [`ARKUI_ERROR_CODE_PARAM_INVALID`] if a parameter error occurs.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ArkUI_StartDrag(dragAction: *mut ArkUI_DragAction) -> i32;
}
