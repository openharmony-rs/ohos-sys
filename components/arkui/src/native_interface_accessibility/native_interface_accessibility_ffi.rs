// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_type::*;
use ohos_sys_opaque_types::ArkUI_AccessibilityProvider;

/// Defines a struct for accessibility element information.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct ArkUI_AccessibilityElementInfo {
    _unused: [u8; 0],
}
/// Defines a struct for accessibility event information.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct ArkUI_AccessibilityEventInfo {
    _unused: [u8; 0],
}
/// Defines a struct for accessibility action arguments.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct ArkUI_AccessibilityActionArguments {
    _unused: [u8; 0],
}
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl ArkUI_Accessibility_ActionType {
    /// Invalid action.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_INVALID: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(0);
    /// Response to a click.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_CLICK: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(16);
    /// Response to a long click.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_LONG_CLICK: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(32);
    /// Accessibility focus acquisition.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_GAIN_ACCESSIBILITY_FOCUS:
        ArkUI_Accessibility_ActionType = ArkUI_Accessibility_ActionType(64);
    /// Accessibility focus clearance.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_CLEAR_ACCESSIBILITY_FOCUS:
        ArkUI_Accessibility_ActionType = ArkUI_Accessibility_ActionType(128);
    /// Forward scroll action.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SCROLL_FORWARD:
        ArkUI_Accessibility_ActionType = ArkUI_Accessibility_ActionType(256);
    /// Backward scroll action.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SCROLL_BACKWARD:
        ArkUI_Accessibility_ActionType = ArkUI_Accessibility_ActionType(512);
    /// Copy action for text content.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_COPY: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(1024);
    /// Paste action for text content.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_PASTE: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(2048);
    /// Cut action for text content.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_CUT: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(4096);
    /// Text selection action, requiring the setting of <b>selectTextBegin</b>, <b>TextEnd</b>, and <b>TextInForward</b>
    /// parameters to select a text segment in the text box.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SELECT_TEXT: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(8192);
    /// Text content setting action.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SET_TEXT: ArkUI_Accessibility_ActionType =
        ArkUI_Accessibility_ActionType(16384);
    /// Cursor position setting action.
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_SET_CURSOR_POSITION:
        ArkUI_Accessibility_ActionType = ArkUI_Accessibility_ActionType(1048576);
    /// Support action for find next item in focus move operation
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_NEXT_HTML_ITEM:
        ArkUI_Accessibility_ActionType = ArkUI_Accessibility_ActionType(33554432);
    /// Support action for find previous item in focus move operation
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub const ARKUI_ACCESSIBILITY_NATIVE_ACTION_TYPE_PREVIOUS_HTML_ITEM:
        ArkUI_Accessibility_ActionType = ArkUI_Accessibility_ActionType(67108864);
}
#[repr(transparent)]
/// Defines an enum for accessibility action types.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_Accessibility_ActionType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl ArkUI_AccessibilityEventType {
    /// Invalid event.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_INVALID: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(0);
    /// Click event, sent after the UI component responds.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_CLICKED: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(1);
    /// Long click event, sent after the UI component responds.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_LONG_CLICKED: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(2);
    /// Selection event, sent after the UI component responds.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_SELECTED: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(4);
    /// Text update event, sent when text is updated.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_TEXT_UPDATE: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(16);
    /// Page state update event, sent when the page transitions, switches, resizes, or moves.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_STATE_UPDATE:
        ArkUI_AccessibilityEventType = ArkUI_AccessibilityEventType(32);
    /// Page content update event, sent when the page content changes.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_CONTENT_UPDATE:
        ArkUI_AccessibilityEventType = ArkUI_AccessibilityEventType(2048);
    /// Scrolled event, sent when a scrollable component experiences a scroll event.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_SCROLLED: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(4096);
    /// Accessibility focus event, sent after the UI component responds.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_ACCESSIBILITY_FOCUSED:
        ArkUI_AccessibilityEventType = ArkUI_AccessibilityEventType(32768);
    /// Accessibility focus cleared event, sent after the UI component responds.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_ACCESSIBILITY_FOCUS_CLEARED:
        ArkUI_AccessibilityEventType = ArkUI_AccessibilityEventType(65536);
    /// FOcus request for a specific node.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_REQUEST_ACCESSIBILITY_FOCUS:
        ArkUI_AccessibilityEventType = ArkUI_AccessibilityEventType(33554432);
    /// Page open event reported by the UI component.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_OPEN: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(536870912);
    /// Page close event reported by the UI component.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_PAGE_CLOSE: ArkUI_AccessibilityEventType =
        ArkUI_AccessibilityEventType(134217728);
    /// Announcement event, indicating a request to proactively announce specified content.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_ANNOUNCE_FOR_ACCESSIBILITY:
        ArkUI_AccessibilityEventType = ArkUI_AccessibilityEventType(268435456);
    /// Focus update event, used for focus update scenarios.
    pub const ARKUI_ACCESSIBILITY_NATIVE_EVENT_TYPE_FOCUS_NODE_UPDATE:
        ArkUI_AccessibilityEventType = ArkUI_AccessibilityEventType(268435457);
}
#[repr(transparent)]
/// Defines an enum for accessibility event types.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_AccessibilityEventType(pub ::core::ffi::c_uint);
/// Defines a struct for the accessible action.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleAction {
    /// Action type.
    pub actionType: ArkUI_Accessibility_ActionType,
    /// Action description.
    pub description: *const ::core::ffi::c_char,
}
/// Defines a struct for the accessible rectangle.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleRect {
    /// X coordinate of the upper left corner.
    pub leftTopX: i32,
    /// Y coordinate of the upper left corner.
    pub leftTopY: i32,
    /// X coordinate of the lower right corner.
    pub rightBottomX: i32,
    /// Y coordinate of the lower right corner.
    pub rightBottomY: i32,
}
/// Define a struct for the accessible range information.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleRangeInfo {
    /// Minimum value.
    pub min: f64,
    /// Maximum value.
    pub max: f64,
    /// Current value.
    pub current: f64,
}
/// Defines a struct for the accessible grid information.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleGridInfo {
    /// Number of rows.
    pub rowCount: i32,
    /// Number of columns.
    pub columnCount: i32,
    /// Selection mode. The value <b>0</b> indicates that only one row can be selected.
    pub selectionMode: i32,
}
/// Defines a struct for the accessible grid item information.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibleGridItemInfo {
    /// Whether it is a header.
    pub heading: bool,
    /// Whether it is selected.
    pub selected: bool,
    /// Column index.
    pub columnIndex: i32,
    /// Row index.
    pub rowIndex: i32,
    /// Column span.
    pub columnSpan: i32,
    /// Row span.
    pub rowSpan: i32,
}
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl ArkUI_AcessbilityErrorCode {
    /// Success.
    pub const ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL: ArkUI_AcessbilityErrorCode =
        ArkUI_AcessbilityErrorCode(0);
    /// Failure.
    pub const ARKUI_ACCESSIBILITY_NATIVE_RESULT_FAILED: ArkUI_AcessbilityErrorCode =
        ArkUI_AcessbilityErrorCode(-1);
    /// Invalid parameter.
    pub const ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER: ArkUI_AcessbilityErrorCode =
        ArkUI_AcessbilityErrorCode(-2);
    /// Out of memory.
    pub const ARKUI_ACCESSIBILITY_NATIVE_RESULT_OUT_OF_MEMORY: ArkUI_AcessbilityErrorCode =
        ArkUI_AcessbilityErrorCode(-3);
}
#[repr(transparent)]
/// Enumerates the accessibility error codes.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_AcessbilityErrorCode(pub ::core::ffi::c_int);
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl ArkUI_AccessibilitySearchMode {
    /// Search for current nodes.
    pub const ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_CURRENT:
        ArkUI_AccessibilitySearchMode = ArkUI_AccessibilitySearchMode(0);
    /// Search for parent nodes.
    pub const ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_PREDECESSORS:
        ArkUI_AccessibilitySearchMode = ArkUI_AccessibilitySearchMode(1);
    /// Search for sibling nodes.
    pub const ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_SIBLINGS:
        ArkUI_AccessibilitySearchMode = ArkUI_AccessibilitySearchMode(2);
    /// Search for child nodes at the next level.
    pub const ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_CHILDREN:
        ArkUI_AccessibilitySearchMode = ArkUI_AccessibilitySearchMode(4);
    /// Search for all child nodes.
    pub const ARKUI_ACCESSIBILITY_NATIVE_SEARCH_MODE_PREFETCH_RECURSIVE_CHILDREN:
        ArkUI_AccessibilitySearchMode = ArkUI_AccessibilitySearchMode(8);
}
#[repr(transparent)]
/// Defines an enum for the accessibility search modes.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_AccessibilitySearchMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl ArkUI_AccessibilityFocusType {
    /// Invalid type.
    pub const ARKUI_ACCESSIBILITY_NATIVE_FOCUS_TYPE_INVALID: ArkUI_AccessibilityFocusType =
        ArkUI_AccessibilityFocusType(-1);
    /// Input focus type.
    pub const ARKUI_ACCESSIBILITY_NATIVE_FOCUS_TYPE_INPUT: ArkUI_AccessibilityFocusType =
        ArkUI_AccessibilityFocusType(1);
    /// Accessibility focus type.
    pub const ARKUI_ACCESSIBILITY_NATIVE_FOCUS_TYPE_ACCESSIBILITY: ArkUI_AccessibilityFocusType =
        ArkUI_AccessibilityFocusType(2);
}
#[repr(transparent)]
/// Defines an enum for the accessibility focus types.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_AccessibilityFocusType(pub ::core::ffi::c_int);
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl ArkUI_AccessibilityFocusMoveDirection {
    /// Invalid direction.
    pub const ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_INVALID: ArkUI_AccessibilityFocusMoveDirection =
        ArkUI_AccessibilityFocusMoveDirection(0);
    /// Up.
    pub const ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_UP: ArkUI_AccessibilityFocusMoveDirection =
        ArkUI_AccessibilityFocusMoveDirection(1);
    /// Down.
    pub const ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_DOWN: ArkUI_AccessibilityFocusMoveDirection =
        ArkUI_AccessibilityFocusMoveDirection(2);
    /// Left.
    pub const ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_LEFT: ArkUI_AccessibilityFocusMoveDirection =
        ArkUI_AccessibilityFocusMoveDirection(4);
    /// Right.
    pub const ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_RIGHT: ArkUI_AccessibilityFocusMoveDirection =
        ArkUI_AccessibilityFocusMoveDirection(8);
    /// Forward.
    pub const ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_FORWARD: ArkUI_AccessibilityFocusMoveDirection =
        ArkUI_AccessibilityFocusMoveDirection(16);
    /// Backward.
    pub const ARKUI_ACCESSIBILITY_NATIVE_DIRECTION_BACKWARD: ArkUI_AccessibilityFocusMoveDirection =
        ArkUI_AccessibilityFocusMoveDirection(32);
}
#[repr(transparent)]
/// Enumerates the directions for moving the accessibility focus.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct ArkUI_AccessibilityFocusMoveDirection(pub ::core::ffi::c_uint);
/// Defines a struct for the accessibility element information list.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct ArkUI_AccessibilityElementInfoList {
    _unused: [u8; 0],
}
/// Registers callbacks for the accessibility provider.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityProviderCallbacks {
    /// Called to obtain element information based on a specified node.
    ///
    /// # Arguments
    ///
    /// * `elementId` - Indicates the element ID.
    ///
    /// * `mode` - Indicates accessibility search mode.
    ///
    /// * `requestId` - Indicates the request ID.
    ///
    /// * `elementList` - Indicates accessibility elementInfo list.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findAccessibilityNodeInfosById: ::core::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            mode: ArkUI_AccessibilitySearchMode,
            requestId: i32,
            elementList: *mut ArkUI_AccessibilityElementInfoList,
        ) -> i32,
    >,
    /// Called to obtain element information based on a specified node and text content.
    ///
    /// # Arguments
    ///
    /// * `elementId` - Indicates the element ID.
    ///
    /// * `text` - Indicates accessibility text.
    ///
    /// * `requestId` - Indicates the request ID.
    ///
    /// * `elementList` - Indicates accessibility elementInfo list.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findAccessibilityNodeInfosByText: ::core::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            text: *const ::core::ffi::c_char,
            requestId: i32,
            elementList: *mut ArkUI_AccessibilityElementInfoList,
        ) -> i32,
    >,
    /// Called to obtain focused element information based on a specified node.
    ///
    /// # Arguments
    ///
    /// * `elementId` - Indicates the element ID.
    ///
    /// * `focusType` - Indicates focus type.
    ///
    /// * `requestId` - Indicates the request ID.
    ///
    /// * `elementInfo` - Indicates accessibility elementInfo.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findFocusedAccessibilityNode: ::core::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            focusType: ArkUI_AccessibilityFocusType,
            requestId: i32,
            elementInfo: *mut ArkUI_AccessibilityElementInfo,
        ) -> i32,
    >,
    /// Called to find the next focusable node based on the reference node.
    ///
    /// # Arguments
    ///
    /// * `elementId` - Indicates the element ID.
    ///
    /// * `direction` - Indicates direction.
    ///
    /// * `requestId` - Indicates the request ID.
    ///
    /// * `elementInfo` - Indicates accessibility elementInfo.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findNextFocusAccessibilityNode: ::core::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            direction: ArkUI_AccessibilityFocusMoveDirection,
            requestId: i32,
            elementInfo: *mut ArkUI_AccessibilityElementInfo,
        ) -> i32,
    >,
    /// Called to execute a specified action on a specified node.
    ///
    /// # Arguments
    ///
    /// * `elementId` - Indicates the element ID.
    ///
    /// * `action` - Indicates action.
    ///
    /// * `actionArguments` - Indicates action arguments.
    ///
    /// * `requestId` - Indicates the request ID.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub executeAccessibilityAction: ::core::option::Option<
        unsafe extern "C" fn(
            elementId: i64,
            action: ArkUI_Accessibility_ActionType,
            actionArguments: *mut ArkUI_AccessibilityActionArguments,
            requestId: i32,
        ) -> i32,
    >,
    /// Called to clear the focus state of the current focused node.
    ///
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_FAILED`] if the operation is failed.
    pub clearFocusedFocusAccessibilityNode: ::core::option::Option<unsafe extern "C" fn() -> i32>,
    /// Called to query the current cursor position of the specified node.
    ///
    /// # Arguments
    ///
    /// * `elementId` - Indicates the element ID.
    ///
    /// * `requestId` - Indicates the request ID.
    ///
    /// * `index` - Indicates index.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub getAccessibilityNodeCursorPosition: ::core::option::Option<
        unsafe extern "C" fn(elementId: i64, requestId: i32, index: *mut i32) -> i32,
    >,
}
/// Registers callbacks with instance for the accessibility provider.
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArkUI_AccessibilityProviderCallbacksWithInstance {
    /// Called to obtain element information based on a specified node.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// * `elementId` - The unique id of the component ID.
    ///
    /// * `mode` - Indicates accessibility search mode.
    ///
    /// * `requestId` - Matched the request and response. transfer it by callback only.
    ///
    /// * `elementList` - The all obtained accessibility elements list information.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findAccessibilityNodeInfosById: ::core::option::Option<
        unsafe extern "C" fn(
            instanceId: *const ::core::ffi::c_char,
            elementId: i64,
            mode: ArkUI_AccessibilitySearchMode,
            requestId: i32,
            elementList: *mut ArkUI_AccessibilityElementInfoList,
        ) -> i32,
    >,
    /// Called to obtain element information based on a specified node and text content.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// * `elementId` - The unique id of the component ID.
    ///
    /// * `text` - Filter for the child components to matched with the text.
    ///
    /// * `requestId` - Matched the request and response. transfer it by callback only.
    ///
    /// * `elementList` - The all obtained accessibility elements list information.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findAccessibilityNodeInfosByText: ::core::option::Option<
        unsafe extern "C" fn(
            instanceId: *const ::core::ffi::c_char,
            elementId: i64,
            text: *const ::core::ffi::c_char,
            requestId: i32,
            elementList: *mut ArkUI_AccessibilityElementInfoList,
        ) -> i32,
    >,
    /// Called to obtain focused element information based on a specified node.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// * `elementId` - The unique id of the component ID.
    ///
    /// * `focusType` - Indicates focus type.
    ///
    /// * `requestId` - Matched the request and response. transfer it by callback only.
    ///
    /// * `elementInfo` - The all obtained accessibility elements list information.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findFocusedAccessibilityNode: ::core::option::Option<
        unsafe extern "C" fn(
            instanceId: *const ::core::ffi::c_char,
            elementId: i64,
            focusType: ArkUI_AccessibilityFocusType,
            requestId: i32,
            elementInfo: *mut ArkUI_AccessibilityElementInfo,
        ) -> i32,
    >,
    /// Called to find the next focusable node based on the reference node.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// * `elementId` - The unique id of the component ID.
    ///
    /// * `direction` - Indicates direction.
    ///
    /// * `requestId` - Matched the request and response. transfer it by callback only.
    ///
    /// * `elementInfo` - The all obtained accessibility elements list information.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub findNextFocusAccessibilityNode: ::core::option::Option<
        unsafe extern "C" fn(
            instanceId: *const ::core::ffi::c_char,
            elementId: i64,
            direction: ArkUI_AccessibilityFocusMoveDirection,
            requestId: i32,
            elementInfo: *mut ArkUI_AccessibilityElementInfo,
        ) -> i32,
    >,
    /// Called to execute a specified action on a specified node.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// * `elementId` - The unique id of the component ID.
    ///
    /// * `action` - Indicates action.
    ///
    /// * `actionArguments` - Indicates action arguments.
    ///
    /// * `requestId` - Matched the request and response. transfer it by callback only.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub executeAccessibilityAction: ::core::option::Option<
        unsafe extern "C" fn(
            instanceId: *const ::core::ffi::c_char,
            elementId: i64,
            action: ArkUI_Accessibility_ActionType,
            actionArguments: *mut ArkUI_AccessibilityActionArguments,
            requestId: i32,
        ) -> i32,
    >,
    /// Called to clear the focus state of the current focused node.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_FAILED`] if the operation is failed.
    pub clearFocusedFocusAccessibilityNode:
        ::core::option::Option<unsafe extern "C" fn(instanceId: *const ::core::ffi::c_char) -> i32>,
    /// Called to query the current cursor position of the specified node.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// * `elementId` - The unique id of the component ID.
    ///
    /// * `requestId` - Matched the request and response. transfer it by callback only.
    ///
    /// * `index` - Indicates index.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    pub getAccessibilityNodeCursorPosition: ::core::option::Option<
        unsafe extern "C" fn(
            instanceId: *const ::core::ffi::c_char,
            elementId: i64,
            requestId: i32,
            index: *mut i32,
        ) -> i32,
    >,
}
extern "C" {
    /// Registers a callback for this <b>ArkUI_AccessibilityProvider</b> instance.
    ///
    /// # Arguments
    ///
    /// * `provider` - Indicates the pointer to the <b>ArkUI_AccessibilityProvider</b> instance.
    ///
    /// * `callbacks` - Indicates the pointer to the <b>GetAccessibilityNodeCursorPosition</b> callback.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityProviderRegisterCallback(
        provider: *mut ArkUI_AccessibilityProvider,
        callbacks: *mut ArkUI_AccessibilityProviderCallbacks,
    ) -> i32;
    /// Registers a callback with instance for this <b>ArkUI_AccessibilityProvider</b> instance.
    /// # Arguments
    ///
    /// * `instanceId` - Indicates ID of third-party framework instance.
    ///
    /// * `provider` - Indicates the pointer to the <b>ArkUI_AccessibilityProvider</b> instance.
    ///
    /// * `callbacks` - Indicates the pointer to the <b>ArkUI_AccessibilityProviderCallbacksWithInstance</b> callback.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_ArkUI_AccessibilityProviderRegisterCallbackWithInstance(
        instanceId: *const ::core::ffi::c_char,
        provider: *mut ArkUI_AccessibilityProvider,
        callbacks: *mut ArkUI_AccessibilityProviderCallbacksWithInstance,
    ) -> i32;
    /// Sends accessibility event information.
    ///
    /// # Arguments
    ///
    /// * `provider` - Indicates the pointer to the <b>ArkUI_AccessibilityProvider</b> instance.
    ///
    /// * `eventInfo` - Indicates the pointer to the accessibility event information.
    ///
    /// * `callback` - Indicates the pointer to the callback that is called after the event is sent.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_SendAccessibilityAsyncEvent(
        provider: *mut ArkUI_AccessibilityProvider,
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        callback: ::core::option::Option<unsafe extern "C" fn(errorCode: i32)>,
    );
    /// Adds and obtains the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `list` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfoList</b> object.
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AddAndGetAccessibilityElementInfo(
        list: *mut ArkUI_AccessibilityElementInfoList,
    ) -> *mut ArkUI_AccessibilityElementInfo;
    /// Sets the element ID for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `elementId` - Indicates the element ID.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetElementId(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        elementId: i32,
    ) -> i32;
    /// Sets the parent ID for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `parentId` - Indicates the parent ID.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetParentId(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        parentId: i32,
    ) -> i32;
    /// Sets the component type for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `componentType` - Indicates the component type.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetComponentType(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        componentType: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the component content for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `contents` - Indicates the component content.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetContents(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        contents: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the hint text for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `hintText` - Indicates the hint text.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetHintText(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        hintText: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the accessibility text for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `accessibilityText` - Indicates the accessibility text.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityText(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityText: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the accessibility description for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `accessibilityDescription` - Indicates the accessibility description.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityDescription(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityDescription: *const ::core::ffi::c_char,
    ) -> i32;
    /// Set the number of child nodes and child node IDs for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `childCount` - Indicates the number of child nodes.
    ///
    /// * `childNodeIds` - Indicates an array of child node IDs.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetChildNodeIds(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        childCount: i32,
        childNodeIds: *mut i64,
    ) -> i32;
    /// Sets the operation actions for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `operationCount` - Indicates the operation count.
    ///
    /// * `operationActions` - Indicates the operation actions.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetOperationActions(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        operationCount: i32,
        operationActions: *mut ArkUI_AccessibleAction,
    ) -> i32;
    /// Sets the screen area for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `screenRect` - Indicates the screen area.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetScreenRect(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        screenRect: *mut ArkUI_AccessibleRect,
    ) -> i32;
    /// Sets whether the element is checkable for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `checkable` - Indicates whether the element is checkable.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetCheckable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        checkable: bool,
    ) -> i32;
    /// Sets whether the element is checked for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `checked` - Indicates whether the element is checked.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetChecked(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        checked: bool,
    ) -> i32;
    /// Sets whether the element is focusable for an <b>ArkUI_AccessibilityElementInfo</b> object.
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `focusable` - Indicates whether the element is focusable.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetFocusable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        focusable: bool,
    ) -> i32;
    /// Sets whether the element is focused for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `isFocused` - Indicates whether the element is focused.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetFocused(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isFocused: bool,
    ) -> i32;
    /// Sets whether the element is visible for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `isVisible` - Indicates whether the element is visible.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetVisible(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isVisible: bool,
    ) -> i32;
    /// Sets the accessibility focus state for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `accessibilityFocused` - Indicates whether the element has accessibility focus.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityFocused(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityFocused: bool,
    ) -> i32;
    /// Sets whether the element is selected for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `selected` - Indicates whether the element is selected.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelected(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selected: bool,
    ) -> i32;
    /// Sets whether the element is clickable for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `clickable` - Indicates whether the element is clickable.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetClickable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        clickable: bool,
    ) -> i32;
    /// Sets whether the element is long clickable for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `longClickable` - Indicates whether the element is long clickable.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetLongClickable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        longClickable: bool,
    ) -> i32;
    /// Sets whether the element is enabled for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `isEnabled` - Indicates whether the element is enabled.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetEnabled(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isEnabled: bool,
    ) -> i32;
    /// Sets whether the element is a password for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `isPassword` - Indicates whether the element is a password.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetIsPassword(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isPassword: bool,
    ) -> i32;
    /// Sets whether the element is scrollable for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `scrollable` - Indicates whether the element is scrollable.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetScrollable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        scrollable: bool,
    ) -> i32;
    /// Sets whether the element is editable for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `editable` - Indicates whether the element is editable.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetEditable(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        editable: bool,
    ) -> i32;
    /// Sets whether the element is a hint for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `isHint` - Indicates whether the element is a hint.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetIsHint(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        isHint: bool,
    ) -> i32;
    /// Sets the range information for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `rangeInfo` - Indicates the range information.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetRangeInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        rangeInfo: *mut ArkUI_AccessibleRangeInfo,
    ) -> i32;
    /// Sets the grid information for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `gridInfo` - Indicates the grid information.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetGridInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        gridInfo: *mut ArkUI_AccessibleGridInfo,
    ) -> i32;
    /// Sets the grid item for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `gridItem` - Indicates the grid item.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetGridItemInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        gridItem: *mut ArkUI_AccessibleGridItemInfo,
    ) -> i32;
    /// Sets the starting index of the selected text for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `selectedTextStart` - Indicates the starting index of the selected text
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelectedTextStart(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selectedTextStart: i32,
    ) -> i32;
    /// Sets the end index of the selected text for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `selectedTextEnd` - Indicates the end index of the selected text
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetSelectedTextEnd(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        selectedTextEnd: i32,
    ) -> i32;
    /// Sets the index of the currently selected item for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `currentItemIndex` - Indicates the index of the currently selected item.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetCurrentItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        currentItemIndex: i32,
    ) -> i32;
    /// Sets the index of the first item for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `startItemIndex` - Indicates the index of the first item.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetStartItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        startItemIndex: i32,
    ) -> i32;
    /// Sets the index of the last item for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `endItemIndex` - Indicates the index of the last item.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetEndItemIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        endItemIndex: i32,
    ) -> i32;
    /// Sets the number of items for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `itemCount` - Indicates the number of items.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetItemCount(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        itemCount: i32,
    ) -> i32;
    /// Sets the offset for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `offset` - Indicates the scroll pixel offset relative to the top of the element.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityOffset(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        offset: i32,
    ) -> i32;
    /// Sets the accessibility group for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `accessibilityGroup` - Indicates the accessibility group.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityGroup(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityGroup: bool,
    ) -> i32;
    /// Sets the accessibility level for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `accessibilityLevel` - Indicates the accessibility level.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityLevel(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        accessibilityLevel: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the z-index for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `zIndex` - Indicates the z-index value.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetZIndex(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        zIndex: i32,
    ) -> i32;
    /// Sets the opacity for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `opacity` - Indicates the opacity.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetAccessibilityOpacity(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        opacity: f32,
    ) -> i32;
    /// Sets the background color for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `backgroundColor` - Indicates the background color.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetBackgroundColor(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        backgroundColor: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the background image for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `backgroundImage` - Indicates the backgroundImage.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetBackgroundImage(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        backgroundImage: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the blur effect for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `blur` - Indicates the blur effect.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetBlur(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        blur: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the hit test behavior for an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// * `hitTestBehavior` - Indicates the hit test behavior.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityElementInfoSetHitTestBehavior(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
        hitTestBehavior: *const ::core::ffi::c_char,
    ) -> i32;
    /// Creates an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns the <b>ArkUI_AccessibilityElementInfo</b> object, or NULL if it fails to create.
    /// The possible reason for failure is that the memory error occurred during object creation.
    ///
    /// Available since API-level: 13
    ///
    /// Version: 1.0
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_CreateAccessibilityElementInfo() -> *mut ArkUI_AccessibilityElementInfo;
    /// Destroys an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `elementInfo` - Indicates the pointer to the <b>ArkUI_AccessibilityElementInfo</b> object to destroy.
    ///
    /// Available since API-level: 13
    ///
    /// Version: 1.0
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_DestoryAccessibilityElementInfo(
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
    );
    /// Creates an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    ///
    /// # Returns
    ///
    /// * Returns the <b>ArkUI_AccessibilityEventInfo</b> object, or NULL if it fails to create.
    /// The possible reason for failure is that the memory error occurred during object creation.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_CreateAccessibilityEventInfo() -> *mut ArkUI_AccessibilityEventInfo;
    /// Destroys an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `eventInfo` - Indicates the pointer to the <b>ArkUI_AccessibilityEventInfo</b> object to destroy.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_DestoryAccessibilityEventInfo(eventInfo: *mut ArkUI_AccessibilityEventInfo);
    /// Sets the event type for an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `eventInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// * `eventType` - Indicates the event type.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityEventSetEventType(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        eventType: ArkUI_AccessibilityEventType,
    ) -> i32;
    /// Sets the text announced for accessibility for an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `eventInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// * `textAnnouncedForAccessibility` - Indicates the text announced for accessibility.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityEventSetTextAnnouncedForAccessibility(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        textAnnouncedForAccessibility: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the request focus ID for an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `eventInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// * `requestFocusId` - Indicates the request focus ID.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityEventSetRequestFocusId(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        requestFocusId: i32,
    ) -> i32;
    /// Sets the element information for an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// # Arguments
    ///
    /// * `eventInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityEventInfo</b> object.
    ///
    /// * `elementInfo` - Indicates the pointer to an <b>ArkUI_AccessibilityElementInfo</b> object.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_AccessibilityEventSetElementInfo(
        eventInfo: *mut ArkUI_AccessibilityEventInfo,
        elementInfo: *mut ArkUI_AccessibilityElementInfo,
    ) -> i32;
    /// Obtains the value of a key from an <b>ArkUI_AccessibilityActionArguments</b> object.
    ///
    /// # Arguments
    ///
    /// * `arguments` - Indicates the pointer to an <b>ArkUI_AccessibilityActionArguments</b> object.
    ///
    /// * `key` - Indicates the key.
    ///
    /// * `value` - Indicates the value.
    ///
    /// # Returns
    ///
    /// * Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_SUCCESSFUL`] if the operation is successful.
    /// Returns [`ARKUI_ACCESSIBILITY_NATIVE_RESULT_BAD_PARAMETER`] if a parameter is incorrect.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ArkUI_FindAccessibilityActionArgumentByKey(
        arguments: *mut ArkUI_AccessibilityActionArguments,
        key: *const ::core::ffi::c_char,
        value: *mut *mut ::core::ffi::c_char,
    ) -> i32;
}
