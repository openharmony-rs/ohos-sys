// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use ohos_sys_opaque_types::OH_UdmfData;

#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl Pasteboard_NotifyType {
    /// Change of the Pasteboard data in the local device.
    pub const LOCAL_DATA_CHANGE: Pasteboard_NotifyType = Pasteboard_NotifyType(1);
    /// Change of the Pasteboard data in the remote devices.
    pub const REMOTE_DATA_CHANGE: Pasteboard_NotifyType = Pasteboard_NotifyType(2);
}
#[repr(transparent)]
/// Enumerates the types of data changes that can be observed.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Pasteboard_NotifyType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
impl Pasteboard_FileConflictOptions {
    /// Overwrite when destUir has file with same name.
    pub const PASTEBOARD_OVERWRITE: Pasteboard_FileConflictOptions =
        Pasteboard_FileConflictOptions(0);
    /// Skip when destUir has file with same name.
    pub const PASTEBOARD_SKIP: Pasteboard_FileConflictOptions = Pasteboard_FileConflictOptions(1);
}
#[repr(transparent)]
/// Enumerates the types of file confilct options when getting data from the Pastedboard.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Pasteboard_FileConflictOptions(pub ::core::ffi::c_uint);
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
impl Pasteboard_ProgressIndicator {
    /// Getting data without system default progress indicator.
    pub const PASTEBOARD_NONE: Pasteboard_ProgressIndicator = Pasteboard_ProgressIndicator(0);
    /// Getting data with system default progress indicator.
    pub const PASTEBOARD_DEFAULT: Pasteboard_ProgressIndicator = Pasteboard_ProgressIndicator(1);
}
#[repr(transparent)]
/// Enumerates the types of progress indicator when getting data from the Pastedboard.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Pasteboard_ProgressIndicator(pub ::core::ffi::c_uint);
/// Represents the Pasteboard progress information.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[repr(C)]
pub struct Pasteboard_ProgressInfo {
    _unused: [u8; 0],
}
/// Defines the callback function used to return the progress information when getting PasteData.
///
/// # Arguments
///
/// * `progressInfo` - The progress information notified to Application.
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
pub type OH_Pasteboard_ProgressListener =
    ::core::option::Option<unsafe extern "C" fn(progressInfo: *mut Pasteboard_ProgressInfo)>;
/// Represents the pasteboard get data parameters when getting data from Pasteboard.
///
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[repr(C)]
pub struct Pasteboard_GetDataParams {
    _unused: [u8; 0],
}
/// Defines the callback function used to return the Pasteboard data changed.
///
/// # Arguments
///
/// * `context` - The context set by [`OH_PasteboardObserver_SetData`] function.
///
/// * `type` - The types of data changes. For details, see [`Pasteboard_NotifyType`].
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
pub type Pasteboard_Notify = ::core::option::Option<
    unsafe extern "C" fn(context: *mut ::core::ffi::c_void, type_: Pasteboard_NotifyType),
>;
/// Defines the callback function used free the context.
/// # Arguments
///
/// * `context` - Pointer to the context which is to be free.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
pub type Pasteboard_Finalize =
    ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void)>;
/// Defines the Pasteboard subscriber information
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct OH_PasteboardObserver {
    _unused: [u8; 0],
}
/// Represents the Pasteboard information.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct OH_Pasteboard {
    _unused: [u8; 0],
}
extern "C" {
    /// Creates a [`OH_PasteboardObserver`] instance.
    ///
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the [`OH_PasteboardObserver`] instance created if the operation is successful.
    /// Returns nullptr if the operation is failed.
    /// [`OH_PasteboardObserver.`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_PasteboardObserver_Create() -> *mut OH_PasteboardObserver;
    /// Destroy a [`OH_PasteboardObserver`] instance.
    ///
    /// # Arguments
    ///
    /// * `observer` - Pointer to the [`OH_PasteboardObserver`] instance to destroy.
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. For details, see [`PASTEBOARD_ErrCode`].
    /// Returns [`ERR_OK`] if the operation is successful.
    /// Returns [`ERR_INVALID_PARAMETER`] if invalid args are detected.
    /// [`OH_PasteboardObserver`] PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_PasteboardObserver_Destroy(
        observer: *mut OH_PasteboardObserver,
    ) -> ::core::ffi::c_int;
    /// Sets a callback function to return the Pasteboard data changed.
    ///
    /// # Arguments
    ///
    /// * `observer` - Pointer to the [`OH_PasteboardObserver`] instance.
    ///
    /// * `context` - Pointer to the context set, which is the first parameter in Pasteboard_Notify.
    ///
    /// * `callback` - Callback to set. For details, see [`Pasteboard_Notify`].
    ///
    /// * `finalize` - Optional callback that can free context when destroy observer.
    /// For details, see [`Pasteboard_Finalize`].
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. For details, see [`PASTEBOARD_ErrCode`].
    /// Returns [`ERR_OK`] if the operation is successful.
    /// Returns [`ERR_INVALID_PARAMETER`] if invalid args are detected.
    /// [`OH_PasteboardObserver`] Pasteboard_Notify PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_PasteboardObserver_SetData(
        observer: *mut OH_PasteboardObserver,
        context: *mut ::core::ffi::c_void,
        callback: Pasteboard_Notify,
        finalize: Pasteboard_Finalize,
    ) -> ::core::ffi::c_int;
    /// Creates a [`OH_Pasteboard`] instance.
    ///
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the [`OH_Pasteboard`] instance created if the operation is successful.
    /// Returns nullptr if the memory is not enough.
    /// [`OH_Pasteboard.`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_Create() -> *mut OH_Pasteboard;
    /// Destroy a [`OH_Pasteboard`] instance.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance to destroy.
    /// [`OH_Pasteboard.`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_Destroy(pasteboard: *mut OH_Pasteboard);
    /// Subscribes to the Pasteboard data change.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `type` - Event type to subscribe to.
    ///
    /// * `observer` - - Pointer to the observer information, which specifies the callback used to
    /// reporting the pasteboard data change. For details, see [`OH_PasteboardObserver`].
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. For details, [`PASTEBOARD_ErrCode`].
    /// Returns [`ERR_OK`] if the operation is successful.
    /// Returns [`ERR_INVALID_PARAMETER`] if invalid args are detected.
    /// [`OH_Pasteboard`] OH_PasteboardObserver PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_Subscribe(
        pasteboard: *mut OH_Pasteboard,
        type_: ::core::ffi::c_int,
        observer: *const OH_PasteboardObserver,
    ) -> ::core::ffi::c_int;
    /// Unsubscribes from the Pasteboard data change.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `type` - Event type to subscribe to.
    ///
    /// * `observer` - - Pointer to the observer information, which specifies the callback used to
    /// reporting the pasteboard data change. For details, see [`OH_PasteboardObserver`].
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. For details, [`PASTEBOARD_ErrCode`].
    /// Returns [`ERR_OK`] if the operation is successful.
    /// Returns [`ERR_INVALID_PARAMETER`] if invalid args are detected.
    /// [`OH_Pasteboard`] OH_PasteboardObserver PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_Unsubscribe(
        pasteboard: *mut OH_Pasteboard,
        type_: ::core::ffi::c_int,
        observer: *const OH_PasteboardObserver,
    ) -> ::core::ffi::c_int;
    /// Checks whether the Pasteboard data is from a remote device.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// # Returns
    ///
    /// * Returns a boolean value, which indicates whether the the data is from a remote device.
    /// The value `false` means Pasteboard data is not from a remote device.
    /// The value `true` means the opposite.
    /// [`OH_Pasteboard.`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_IsRemoteData(pasteboard: *mut OH_Pasteboard) -> bool;
    /// Obtains the source of Pasteboard data.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `source` - Pointer to the source data.
    ///
    /// * `len` - Length of the source data.
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. For details, see [`PASTEBOARD_ErrCode`].
    /// Returns [`ERR_OK`] if the operation is successful.
    /// Returns [`ERR_INVALID_PARAMETER`] if invalid args are detected.
    /// [`OH_Pasteboard`] PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_GetDataSource(
        pasteboard: *mut OH_Pasteboard,
        source: *mut ::core::ffi::c_char,
        len: ::core::ffi::c_uint,
    ) -> ::core::ffi::c_int;
    /// Checks whether the Pasteboard has the specified type of data.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `type` - Poniter to the type of data to check.
    ///
    /// # Returns
    ///
    /// * Returns a boolean value, which indicates whether the Pasteboard has the specified type of data.
    /// The value `true` means the Pasteboard has the specified type of data.
    /// The value `false` means the opposite.
    /// [`OH_Pasteboard.`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_HasType(
        pasteboard: *mut OH_Pasteboard,
        type_: *const ::core::ffi::c_char,
    ) -> bool;
    /// Checks whether there is data in the Pasteboard.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// # Returns
    ///
    /// * Returns a boolean value, which indicates whether there is data in the Pasteboard.
    /// The value `true` means there is data in Pasteboard.
    /// The value `false` means the opposite.
    /// [`OH_Pasteboard.`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_HasData(pasteboard: *mut OH_Pasteboard) -> bool;
    /// Obtains data from the Pasteboard.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `status` - The status code of the execution. For details, see [`PASTEBOARD_ErrCode`].
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the [`OH_UdmfData`] instance.
    /// [`OH_Pasteboard`] OH_UdmfData PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_GetData(
        pasteboard: *mut OH_Pasteboard,
        status: *mut ::core::ffi::c_int,
    ) -> *mut OH_UdmfData;
    /// Writes data to the Pasteboard.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `data` - Pointer to the [`OH_UdmfData`] instance.
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. For details, see [`PASTEBOARD_ErrCode`].
    /// Returns [`ERR_OK`] if the operation is successful.
    /// Returns [`ERR_INVALID_PARAMETER`] if invalid args are detected.
    /// [`OH_Pasteboard`] OH_UdmfData PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_SetData(
        pasteboard: *mut OH_Pasteboard,
        data: *mut OH_UdmfData,
    ) -> ::core::ffi::c_int;
    /// Clears the data in the Pastedboard.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution. For details, see [`PASTEBOARD_ErrCode`].
    /// Returns [`ERR_OK`] if the operation is successful.
    /// Returns [`ERR_INVALID_PARAMETER`] if invalid args are detected.
    /// [`OH_Pasteboard`] PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Pasteboard_ClearData(pasteboard: *mut OH_Pasteboard) -> ::core::ffi::c_int;
    /// Obtains all MIME types of Pasteboard data.
    ///
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `count` - Poniter to the count of MIME types.
    ///
    /// # Returns
    ///
    /// * Returns char array of MIME types in the Pasteboard.
    /// Returns nullptr if the operation is failed.
    /// [`OH_Pasteboard.`]
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_Pasteboard_GetMimeTypes(
        pasteboard: *mut OH_Pasteboard,
        count: *mut ::core::ffi::c_uint,
    ) -> *mut *mut ::core::ffi::c_char;
    /// Create a pointer to the instance of the [`Pasteboard_GetDataParams`].
    ///
    ///
    /// # Returns
    ///
    /// * If the operation is successful, a pointer to the instance of the [`Pasteboard_GetDataParams`]
    /// structure is returned. If the operation is failed, nullptr is returned.
    /// [`Pasteboard_GetDataParams`]
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_GetDataParams_Create() -> *mut Pasteboard_GetDataParams;
    /// Destroy a pointer that points to an instance of [`Pasteboard_GetDataParams`].
    ///
    /// # Arguments
    ///
    /// * `params` - Represents a pointer to an instance of [`Pasteboard_GetDataParams`].
    /// [`Pasteboard_GetDataParams`]
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_GetDataParams_Destroy(params: *mut Pasteboard_GetDataParams);
    /// Set the progress indicator to the [`Pasteboard_GetDataParams`].
    ///
    /// # Arguments
    ///
    /// * `params` - Represents a pointer to an instance of [`Pasteboard_GetDataParams`].
    ///
    /// * `progressIndicator` - Represents to the progress indicator.
    /// [`Pasteboard_GetDataParams`] Pasteboard_ProgressIndicator
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_GetDataParams_SetProgressIndicator(
        params: *mut Pasteboard_GetDataParams,
        progressIndicator: Pasteboard_ProgressIndicator,
    );
    /// Set the destination uri to the [`Pasteboard_GetDataParams`].
    ///
    /// # Arguments
    ///
    /// * `params` - Represents a pointer to an instance of [`Pasteboard_GetDataParams`].
    ///
    /// * `destUri` - Pointer to a destination uri.
    ///
    /// * `destUriLen` - Indicates the length of destination uri.
    /// [`Pasteboard_GetDataParams`]
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_GetDataParams_SetDestUri(
        params: *mut Pasteboard_GetDataParams,
        destUri: *const ::core::ffi::c_char,
        destUriLen: u32,
    );
    /// Set the file conflict options to the [`Pasteboard_GetDataParams`].
    ///
    /// # Arguments
    ///
    /// * `params` - Represents a pointer to an instance of [`Pasteboard_GetDataParams`].
    ///
    /// * `option` - Represents to the file conflict options.
    /// [`Pasteboard_GetDataParams`] Pasteboard_FileConflictOptions
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_GetDataParams_SetFileConflictOptions(
        params: *mut Pasteboard_GetDataParams,
        option: Pasteboard_FileConflictOptions,
    );
    /// Set the progress indicator to the [`Pasteboard_GetDataParams`].
    ///
    /// # Arguments
    ///
    /// * `params` - Represents a pointer to an instance of [`Pasteboard_GetDataParams`].
    ///
    /// * `listener` - Represents to the data progress listener.
    /// [`Pasteboard_GetDataParams`] OH_Pasteboard_ProgressListener
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_GetDataParams_SetProgressListener(
        params: *mut Pasteboard_GetDataParams,
        listener: OH_Pasteboard_ProgressListener,
    );
    /// Get the progress from the [`Pasteboard_ProgressInfo`].
    ///
    /// # Arguments
    ///
    /// * `progressInfo` - Represents a pointer to an instance of [`Pasteboard_ProgressInfo`].
    ///
    /// # Returns
    ///
    /// * Returns the progress.
    /// [`Pasteboard_ProgressInfo`]
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_ProgressInfo_GetProgress(
        progressInfo: *mut Pasteboard_ProgressInfo,
    ) -> ::core::ffi::c_int;
    /// Defines the cancel function used to cancel the progress when getting PasteData.
    ///
    /// # Arguments
    ///
    /// * `params` - Pointer to indicates the [`Pasteboard_GetDataParams`].
    /// [`Pasteboard_GetDataParams.`]
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_ProgressCancel(params: *mut Pasteboard_GetDataParams);
    /// Obtains data from the Pasteboard with system progress indicator.
    ///
    /// ohos.permission.READ_PASTEBOARD
    /// # Arguments
    ///
    /// * `pasteboard` - Pointer to the [`OH_Pasteboard`] instance.
    ///
    /// * `params` - Pointer to indicates the [`OH_Pasteboard_GetDataParams`].
    ///
    /// * `status` - The status code of the execution. For details, see [`PASTEBOARD_Errcode`].
    ///
    /// # Returns
    ///
    /// * Returns the pointer to the [`OH_PasteData`] instance.
    /// [`OH_Pasteboard`] OH_PasteData PASTEBOARD_ErrCode.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_Pasteboard_GetDataWithProgress(
        pasteboard: *mut OH_Pasteboard,
        params: *mut Pasteboard_GetDataParams,
        status: *mut ::core::ffi::c_int,
    ) -> *mut OH_UdmfData;
}
