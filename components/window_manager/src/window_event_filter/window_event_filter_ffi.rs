// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::display_manager_info::NativeDisplayManagerResult;
use crate::window_comm::WindowManagerResult;
#[cfg(feature = "api-12")]
use ohos_sys_opaque_types::Input_KeyEvent;

/// the callback funcation type when keyEvent was filter
/// # Arguments
///
/// * `keyEvent` - multimodal keyEvent
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type OH_NativeWindowManager_KeyEventFilter =
    ::core::option::Option<unsafe extern "C" fn(keyEvent: *mut Input_KeyEvent) -> bool>;
extern "C" {
    /// Registers a filter callback for the window ,the callback is called when the
    /// window is dispatched to the event
    ///
    /// # Arguments
    ///
    /// * `windowId` - windowId when window is created
    ///
    /// * `keyEventFilter` - key event callback ,called when the window is dispatched
    /// to the event
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindowManager_RegisterKeyEventFilter(
        windowId: i32,
        keyEventFilter: OH_NativeWindowManager_KeyEventFilter,
    ) -> WindowManagerResult;
    /// clear callback for the window
    ///
    /// # Arguments
    ///
    /// * `windowId` - windowId when window is created
    ///
    /// # Returns
    ///
    /// * Returns the status code of the execution.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindowManager_UnregisterKeyEventFilter(windowId: i32) -> WindowManagerResult;
}
