// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[cfg(feature = "api-17")]
use crate::window_comm::WindowManager_Rect;
use crate::window_comm::{
    WindowManager_AvoidArea, WindowManager_AvoidAreaType, WindowManager_WindowProperties,
};
use ohos_sys_opaque_types::OH_PixelmapNative;

extern "C" {
    /// Set whether to show status bar.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `enabled` - If true, the status bar is displayed. If false, the status bar is hidden.
    ///
    /// * `enableAnimation` - If true, the status bar is displayed and hidden with animation.
    /// If false, the status bar is displayed and hidden with no animation.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_DEVICE_NOT_SUPPORTED`] capability not supported.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowStatusBarEnabled(
        windowId: i32,
        enabled: bool,
        enableAnimation: bool,
    ) -> i32;
    /// Set status bar content color.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `color` - The color value to set, the format is ARGB.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_DEVICE_NOT_SUPPORTED`] capability not supported.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowStatusBarColor(windowId: i32, color: i32) -> i32;
    /// Set whether to show navigation bar.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `enabled` - If true, the navigation bar is displayed. If false, the navigation bar is hidden.
    ///
    /// * `enableAnimation` - If true, the navigation bar is displayed and hidden with animation.
    /// If false, the navigation bar is displayed and hidden with no animation.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_DEVICE_NOT_SUPPORTED`] capability not supported.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowNavigationBarEnabled(
        windowId: i32,
        enabled: bool,
        enableAnimation: bool,
    ) -> i32;
    /// Get the avoid area
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `type` - Type of the avoid area.
    ///
    /// * `avoidArea` - Indicates the pointer to a WindowManager_AvoidArea object.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful, return avoid area ptr in avoidArea.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_GetWindowAvoidArea(
        windowId: i32,
        type_: WindowManager_AvoidAreaType,
        avoidArea: *mut WindowManager_AvoidArea,
    ) -> i32;
    /// Checks whether the window is displayed.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `isShow` - Whether the window is displayed. The value true means that the window is displayed, and false means the opposite.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_IsWindowShown(windowId: i32, isShow: *mut bool) -> i32;
    /// Show window.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_ShowWindow(windowId: i32) -> i32;
    /// Set window touchable
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `isTouchable` - Indicates whether the specified window can be touched.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowTouchable(windowId: i32, isTouchable: bool) -> i32;
    /// Set focusable property of window.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `isFocusable` - Window can be focused or not.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowFocusable(windowId: i32, isFocusable: bool) -> i32;
    /// Sets the background color of window.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `color` - the specified color.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowBackgroundColor(
        windowId: i32,
        color: *const ::core::ffi::c_char,
    ) -> i32;
    /// Sets the brightness of window.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `brightness` - the specified brightness value.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowBrightness(windowId: i32, brightness: f32) -> i32;
    /// Sets whether keep screen on or not.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `isKeepScreenOn` - keep screen on if true, or not if false.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowKeepScreenOn(windowId: i32, isKeepScreenOn: bool) -> i32;
    /// Sets whether is private mode or not.
    ///
    /// `ohos.permission.PRIVACY_WINDOW`
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `isPrivacy` - In private mode if true, or not if false.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    /// [`WINDOW_MANAGER_ERRORCODE_NO_PERMISSION`] permission verification failed.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_SetWindowPrivacyMode(windowId: i32, isPrivacy: bool) -> i32;
    /// Get the properties of current window.
    ///
    /// # Arguments
    ///
    /// * `windowId` - WindowId when window is created.
    ///
    /// * `windowProperties` - Properties of current window.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful, return window properties ptr in windowProperties.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_GetWindowProperties(
        windowId: i32,
        windowProperties: *mut WindowManager_WindowProperties,
    ) -> i32;
    /// Obtains snapshot of window.
    ///
    /// # Arguments
    ///
    /// * `windowId` - windowId when window is created.
    ///
    /// * `pixelMap` - snapshot of window.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful, return pixel map ptr in pixelMap.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_STATE_ABNORMAL`] this window state is abnormal.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_WindowManager_Snapshot(windowId: i32, pixelMap: *mut OH_PixelmapNative) -> i32;
    /// Get layout info of all windows on the selected display.
    ///
    /// # Arguments
    ///
    /// * `displayId` - Indicate the id of display.
    ///
    /// * `windowLayoutInfoList` - Pointer to the layout information of the visible windows on the specified screen.
    ///
    /// * `windowLayoutInfoSize` - Pointer to the size of the array of layout information of the visible windows on the
    /// specified screen.
    ///
    /// # Returns
    ///
    /// * Returns the result code.
    /// [`OK`] the function call is successful, return Window layout info list.
    /// [`WINDOW_MANAGER_ERRORCODE_INVALID_PARAM`] parameter error.
    /// [`WINDOW_MANAGER_ERRORCODE_DEVICE_NOT_SUPPORTED`] capability not supported.
    /// [`WINDOW_MANAGER_ERRORCODE_SYSTEM_ABNORMAL`] the window manager service works abnormally.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_WindowManager_GetAllWindowLayoutInfoList(
        displayId: i64,
        windowLayoutInfoList: *mut *mut WindowManager_Rect,
        windowLayoutInfoSize: *mut usize,
    ) -> i32;
    /// Release the memory of window layout info list.
    ///
    /// # Arguments
    ///
    /// * `windowLayoutInfoList` - Pointer to the layout information of the visible windows on the specified screen.
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_WindowManager_ReleaseAllWindowLayoutInfoList(
        windowLayoutInfoList: *mut WindowManager_Rect,
    );
}
