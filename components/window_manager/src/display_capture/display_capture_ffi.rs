// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[cfg(feature = "api-12")]
use crate::display_manager_info::NativeDisplayManagerResult;
#[cfg(feature = "api-14")]
use crate::display_manager_info::NativeDisplayManager_DisplaysInfo;
#[cfg(feature = "api-14")]
use ohos_sys_opaque_types::OH_PixelmapNative;

extern "C" {
    /// Capture a screen pixelmap of the specified display.
    ///
    /// `ohos.permission.CUSTOM_SCREEN_CAPTURE`
    /// # Arguments
    ///
    /// * `displayId` - The ID of the display to be captured.
    ///
    /// * `pixelMap` - The output pixel map of the captured display.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful.
    /// { DISPLAY_MANAGER_ERROR_NO_PERMISSION } If no permission.
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_DEVICE_NOT_SUPPORTED } If device not support.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_NativeDisplayManager_CaptureScreenPixelmap(
        displayId: u32,
        pixelMap: *mut *mut OH_PixelmapNative,
    ) -> NativeDisplayManagerResult;
}
