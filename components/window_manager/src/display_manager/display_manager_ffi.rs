// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::display_manager_info::NativeDisplayManagerResult;
use crate::display_manager_info::NativeDisplayManager_CutoutInfo;
#[cfg(feature = "api-14")]
use crate::display_manager_info::NativeDisplayManager_DisplayInfo;
#[cfg(feature = "api-14")]
use crate::display_manager_info::NativeDisplayManager_DisplaysInfo;
use crate::display_manager_info::NativeDisplayManager_FoldDisplayMode;
use crate::display_manager_info::NativeDisplayManager_Orientation;
use crate::display_manager_info::NativeDisplayManager_Rotation;
use crate::window_comm::WindowManagerResult;

/// the callback function type when display change.
///
/// # Arguments
///
/// * `displayId` - change display id.
///
/// Required System Capabilities: SystemCapability.Window.SessionManager
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type OH_NativeDisplayManager_DisplayChangeCallback =
    ::core::option::Option<unsafe extern "C" fn(displayId: u64)>;
/// the callback function type when display fold change.
///
/// # Arguments
///
/// * `displayMode` - current fold display mode.
///
/// Required System Capabilities: SystemCapability.Window.SessionManager
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type OH_NativeDisplayManager_FoldDisplayModeChangeCallback =
    ::core::option::Option<unsafe extern "C" fn(displayMode: NativeDisplayManager_FoldDisplayMode)>;
extern "C" {
    /// Obtain the default display Id.
    ///
    /// # Arguments
    ///
    /// * `displayId` - Indicates the pointer to an <b>uint64_t</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayId(
        displayId: *mut u64,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display width.
    ///
    /// # Arguments
    ///
    /// * `displayWidth` - Indicates the pointer to an <b>int32_t</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayWidth(
        displayWidth: *mut i32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display height.
    ///
    /// # Arguments
    ///
    /// * `displayHeight` - Indicates the pointer to an <b>int32_t</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayHeight(
        displayHeight: *mut i32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display rotation.
    ///
    /// # Arguments
    ///
    /// * `displayRotation` - Indicates the pointer to an <b>NativeDisplayManager_Rotation</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayRotation(
        displayRotation: *mut NativeDisplayManager_Rotation,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display orientation.
    ///
    /// # Arguments
    ///
    /// * `displayOrientation` - Indicates the pointer to an <b>NativeDisplayManager_Orientation</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayOrientation(
        displayOrientation: *mut NativeDisplayManager_Orientation,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display virtualPixels.
    ///
    /// # Arguments
    ///
    /// * `virtualPixels` - Indicates the pointer to an <b>float</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayVirtualPixelRatio(
        virtualPixels: *mut f32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display refreshRate.
    ///
    /// # Arguments
    ///
    /// * `refreshRate` - Indicates the pointer to an <b>uint32_t</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayRefreshRate(
        refreshRate: *mut u32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display densityDpi.
    ///
    /// # Arguments
    ///
    /// * `densityDpi` - Indicates the pointer to an <b>int32_t</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityDpi(
        densityDpi: *mut i32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display densityPixels.
    ///
    /// # Arguments
    ///
    /// * `densityPixels` - Indicates the pointer to an <b>float</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityPixels(
        densityPixels: *mut f32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display scaledDensity.
    ///
    /// # Arguments
    ///
    /// * `scaledDensity` - Indicates the pointer to an <b>float</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayScaledDensity(
        scaledDensity: *mut f32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display xDpi.
    ///
    /// # Arguments
    ///
    /// * `xDpi` - Indicates the pointer to an <b>float</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityXdpi(
        xDpi: *mut f32,
    ) -> NativeDisplayManagerResult;
    /// Obtain the default display yDpi.
    ///
    /// # Arguments
    ///
    /// * `yDpi` - Indicates the pointer to an <b>float</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetDefaultDisplayDensityYdpi(
        yDpi: *mut f32,
    ) -> NativeDisplayManagerResult;
    /// Create the cutout info of the device.
    ///
    /// # Arguments
    ///
    /// * `cutoutInfo` - Indicates the pointer to an <b>NativeDisplayManager_CutoutInfo</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_CreateDefaultDisplayCutoutInfo(
        cutoutInfo: *mut *mut NativeDisplayManager_CutoutInfo,
    ) -> NativeDisplayManagerResult;
    /// Destroy an <b>NativeDisplayManager_CutoutInfo</b> object and reclaims the memory occupied by the object.
    ///
    /// # Arguments
    ///
    /// * `cutoutInfo` - Indicates the pointer to an <b>NativeDisplayManager_CutoutInfo</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_DestroyDefaultDisplayCutoutInfo(
        cutoutInfo: *mut NativeDisplayManager_CutoutInfo,
    ) -> NativeDisplayManagerResult;
    /// Check whether the device is foldable.
    ///
    ///
    /// # Returns
    ///
    /// * { bool } true means the device is foldable.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_IsFoldable() -> bool;
    /// Get the display mode of the foldable device.
    ///
    /// # Arguments
    ///
    /// * `displayMode` - Indicates the pointer to an <b>NativeDisplayManager_FoldDisplayMode</b> object.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_DEVICE_NOT_SUPPORTED } device not support.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_GetFoldDisplayMode(
        displayMode: *mut NativeDisplayManager_FoldDisplayMode,
    ) -> NativeDisplayManagerResult;
    /// Register the callback for display change listener.
    ///
    /// # Arguments
    ///
    /// * `displayChangeCallback` - display change callback.
    ///
    /// * `listenerIndex` - Indicates the pointer to an <b>uint32_t</b> object. used in unregister call.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_RegisterDisplayChangeListener(
        displayChangeCallback: OH_NativeDisplayManager_DisplayChangeCallback,
        listenerIndex: *mut u32,
    ) -> NativeDisplayManagerResult;
    /// Unregister the callback for display changes listener.
    ///
    /// # Arguments
    ///
    /// * `listenerIndex` - display changed listener index.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.WindowManager.WindowManager.Core
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_UnregisterDisplayChangeListener(
        listenerIndex: u32,
    ) -> NativeDisplayManagerResult;
    /// Register the callback for display mode change listener.
    ///
    /// # Arguments
    ///
    /// * `displayModeChangeCallback` - display mode change callback.
    ///
    /// * `listenerIndex` - Indicates the pointer to an <b>uint32_t</b> object. used in unregister call.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_DEVICE_NOT_SUPPORTED } device not support.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_RegisterFoldDisplayModeChangeListener(
        displayModeChangeCallback: OH_NativeDisplayManager_FoldDisplayModeChangeCallback,
        listenerIndex: *mut u32,
    ) -> NativeDisplayManagerResult;
    /// Unregister the callback for display mode change listener.
    ///
    /// # Arguments
    ///
    /// * `listenerIndex` - display mode change listener index.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_DEVICE_NOT_SUPPORTED } device not support.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeDisplayManager_UnregisterFoldDisplayModeChangeListener(
        listenerIndex: u32,
    ) -> NativeDisplayManagerResult;
    /// Create all displays.
    ///
    /// # Arguments
    ///
    /// * `allDisplays` - Output parameter for all displays information.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful.
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_NativeDisplayManager_CreateAllDisplays(
        allDisplays: *mut *mut NativeDisplayManager_DisplaysInfo,
    ) -> NativeDisplayManagerResult;
    /// Destroy all displays.
    ///
    /// # Arguments
    ///
    /// * `allDisplays` - all displays to be free.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_NativeDisplayManager_DestroyAllDisplays(
        allDisplays: *mut NativeDisplayManager_DisplaysInfo,
    );
    /// Create display information by display id.
    ///
    /// # Arguments
    ///
    /// * `displayId` - The display id.
    ///
    /// * `displayInfo` - The pointer to the display information.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful.
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_NativeDisplayManager_CreateDisplayById(
        displayId: u32,
        displayInfo: *mut *mut NativeDisplayManager_DisplayInfo,
    ) -> NativeDisplayManagerResult;
    /// Destroy the display information.
    ///
    /// # Arguments
    ///
    /// * `displayInfo` - the target display to be free.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_NativeDisplayManager_DestroyDisplay(
        displayInfo: *mut NativeDisplayManager_DisplayInfo,
    );
    /// Create a primary display.
    ///
    /// # Arguments
    ///
    /// * `displayInfo` - The information of the created display.
    ///
    /// # Returns
    ///
    /// * { DISPLAY_MANAGER_OK } If the operation is successful.
    /// { DISPLAY_MANAGER_ERROR_INVALID_PARAM } If Parameter error.
    /// { DISPLAY_MANAGER_ERROR_SYSTEM_ABNORMAL } If display manager service works abnormally.
    ///
    /// Required System Capabilities: SystemCapability.Window.SessionManager.Core
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub fn OH_NativeDisplayManager_CreatePrimaryDisplay(
        displayInfo: *mut *mut NativeDisplayManager_DisplayInfo,
    ) -> NativeDisplayManagerResult;
}
