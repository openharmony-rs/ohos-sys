// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[allow(unused_imports)]
use crate::averrors::OH_AVErrCode;

/// Forward declaration of OH_AVFormat.
///
///
/// Available since API-level: 9
#[repr(C)]
pub struct OH_AVFormat {
    _unused: [u8; 0],
}
impl OH_AVPixelFormat {
    /// yuv 420 planar.
    pub const AV_PIXEL_FORMAT_YUVI420: OH_AVPixelFormat = OH_AVPixelFormat(1);
    /// NV12. yuv 420 semiplanar.
    pub const AV_PIXEL_FORMAT_NV12: OH_AVPixelFormat = OH_AVPixelFormat(2);
    /// NV21. yvu 420 semiplanar.
    pub const AV_PIXEL_FORMAT_NV21: OH_AVPixelFormat = OH_AVPixelFormat(3);
    /// format from surface.
    pub const AV_PIXEL_FORMAT_SURFACE_FORMAT: OH_AVPixelFormat = OH_AVPixelFormat(4);
    /// RGBA8888
    pub const AV_PIXEL_FORMAT_RGBA: OH_AVPixelFormat = OH_AVPixelFormat(5);
}
#[repr(transparent)]
/// Enumerates AVPixel Format.
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.Core
///
/// Available since API-level: 9
///
/// Version: 1.0
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AVPixelFormat(pub ::core::ffi::c_uint);
extern "C" {
    /// an OH_AVFormat handle pointer to read and write data
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    ///
    /// # Returns
    ///
    /// * Returns a pointer to an OH_AVFormat instance
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_Create() -> *mut OH_AVFormat;
    /// an audio OH_AVFormat handle pointer to read and write data
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `mimeType` - mime type
    ///
    /// * `sampleRate` - sample rate
    ///
    /// * `channelCount` - channel count
    ///
    /// # Returns
    ///
    /// * Returns a pointer to an OH_AVFormat instance if the execution is successful, otherwise nullptr
    /// Possible failure causes: 1. mimeType is nullptr. 2. new format is nullptr.
    ///
    /// Available since API-level: 10
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_CreateAudioFormat(
        mimeType: *const ::core::ffi::c_char,
        sampleRate: i32,
        channelCount: i32,
    ) -> *mut OH_AVFormat;
    /// an video OH_AVFormat handle pointer to read and write data
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `mimeType` - mime type
    ///
    /// * `width` - width
    ///
    /// * `height` - height
    ///
    /// # Returns
    ///
    /// * Returns a pointer to an OH_AVFormat instance if the execution is successful, otherwise nullptr
    /// Possible failure causes: 1. mimeType is nullptr. 2. new format is nullptr.
    ///
    /// Available since API-level: 10
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_CreateVideoFormat(
        mimeType: *const ::core::ffi::c_char,
        width: i32,
        height: i32,
    ) -> *mut OH_AVFormat;
    /// Destroy the specified OH_AVFormat handle resource
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// # Returns
    ///
    /// * void
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_Destroy(format: *mut OH_AVFormat);
    /// Copy OH_AVFormat handle resource
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `to` - OH_AVFormat handle pointer to receive data
    ///
    /// * `from` - pointer to the OH_AVFormat handle of the copied data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_Copy(to: *mut OH_AVFormat, from: *mut OH_AVFormat) -> bool;
    /// Write Int data to OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - key to write data
    ///
    /// * `value` - written data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_SetIntValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        value: i32,
    ) -> bool;
    /// Write Long data to OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - key to write data
    ///
    /// * `value` - written data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_SetLongValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        value: i64,
    ) -> bool;
    /// Write Float data to OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - key to write data
    ///
    /// * `value` - written data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_SetFloatValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        value: f32,
    ) -> bool;
    /// Write Double data to OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - key to write data
    ///
    /// * `value` - written data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_SetDoubleValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        value: f64,
    ) -> bool;
    /// Write String data to OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - key to write data
    ///
    /// * `value` - written data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. value is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_SetStringValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        value: *const ::core::ffi::c_char,
    ) -> bool;
    /// Write a block of data of a specified length to OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - key to write data
    ///
    /// * `addr` - written data addr
    ///
    /// * `size` - written data length
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. addr is nullptr. 5. size is zero.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_SetBuffer(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        addr: *const u8,
        size: usize,
    ) -> bool;
    /// Read Int data from OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - read key value
    ///
    /// * `out` - read data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. out is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_GetIntValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        out: *mut i32,
    ) -> bool;
    /// Read Long data from OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - read key value
    ///
    /// * `out` - read data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. out is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_GetLongValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        out: *mut i64,
    ) -> bool;
    /// Read Float data from OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - read key value
    ///
    /// * `out` - read data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. out is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_GetFloatValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        out: *mut f32,
    ) -> bool;
    /// Read Double data from OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - read key value
    ///
    /// * `out` - read data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. out is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_GetDoubleValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        out: *mut f64,
    ) -> bool;
    /// Read String data from OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - read key value
    ///
    /// * `out` - The read string pointer, the data life cycle pointed to is updated with GetString,
    /// and Format is destroyed. If the caller needs to hold it for a long time, it must copy the memory
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. out is nullptr. 5. malloc out string nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_GetStringValue(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        out: *mut *const ::core::ffi::c_char,
    ) -> bool;
    /// Read a block of data of specified length from OH_AVFormat
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// * `key` - Key value for reading and writing data
    ///
    /// * `addr` - The life cycle is held by the format, with the destruction of the format,
    /// if the caller needs to hold it for a long time, it must copy the memory
    ///
    /// * `size` - Length of read and write data
    ///
    /// # Returns
    ///
    /// * The return value is TRUE for success, FALSE for failure
    /// Possible failure causes: 1. input format is nullptr. 2. input format's magic error. 3. key is nullptr.
    /// 4. addr is nullptr. 5. size is nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_GetBuffer(
        format: *mut OH_AVFormat,
        key: *const ::core::ffi::c_char,
        addr: *mut *mut u8,
        size: *mut usize,
    ) -> bool;
    /// Output the information contained in OH_AVFormat as a string.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Core
    /// # Arguments
    ///
    /// * `format` - pointer to an OH_AVFormat instance
    ///
    /// # Returns
    ///
    /// * Returns a string consisting of key and data for success, nullptr for failure
    /// Possible failure causes: 1. input format is nullptr. 2. malloc dump info nullptr.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_AVFormat_DumpInfo(format: *mut OH_AVFormat) -> *const ::core::ffi::c_char;
}
