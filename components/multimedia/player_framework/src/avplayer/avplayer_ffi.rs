// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[allow(unused_imports)]
use crate::averrors::OH_AVErrCode;
use crate::avplayer_base::{
    AVPlaybackSpeed, AVPlayerCallback, AVPlayerSeekMode, AVPlayerState, OH_AVPlayer,
};
#[cfg(feature = "api-12")]
use crate::avplayer_base::{OH_AVPlayerOnErrorCallback, OH_AVPlayerOnInfoCallback};
use ohos_sys_opaque_types::OHNativeWindow;

/// MediaKeySession field.
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct MediaKeySession {
    _unused: [u8; 0],
}
/// DRM_MediaKeySystemInfo field.
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct DRM_MediaKeySystemInfo {
    _unused: [u8; 0],
}
/// Call back will be invoked when updating DRM information.
/// # Arguments
///
/// * `player` - Player instance.
///
/// * `mediaKeySystemInfo` - DRM information.
///
/// # Returns
///
/// * void
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type Player_MediaKeySystemInfoCallback = ::core::option::Option<
    unsafe extern "C" fn(player: *mut OH_AVPlayer, mediaKeySystemInfo: *mut DRM_MediaKeySystemInfo),
>;
extern "C" {
    /// Create a player
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// # Returns
    ///
    /// * Returns a pointer to an OH_AVPlayer instance for success, nullptr for failure
    /// Possible failure causes: 1. failed to PlayerFactory::CreatePlayer. 2. failed to new PlayerObject.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Create() -> *mut OH_AVPlayer;
    /// Sets the playback source for the player. The corresponding source can be http url
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `url` - Indicates the playback source.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr, url is null or player setUrlSource failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SetURLSource(
        player: *mut OH_AVPlayer,
        url: *const ::core::ffi::c_char,
    ) -> OH_AVErrCode;
    /// Sets the playback media file descriptor source for the player.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `fd` - Indicates the file descriptor of media source.
    ///
    /// * `offset` - Indicates the offset of media source in file descriptor.
    ///
    /// * `size` - Indicates the size of media source.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player setFdSource failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SetFDSource(
        player: *mut OH_AVPlayer,
        fd: i32,
        offset: i64,
        size: i64,
    ) -> OH_AVErrCode;
    /// Prepares the playback environment and buffers media data asynchronous.
    ///
    /// This function must be called after [`SetSource`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player Prepare failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Prepare(player: *mut OH_AVPlayer) -> OH_AVErrCode;
    /// Start playback.
    ///
    /// This function must be called after [`Prepare`]. If the player state is <b>Prepared</b>,
    /// this function is called to start playback.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player Play failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Play(player: *mut OH_AVPlayer) -> OH_AVErrCode;
    /// Pauses playback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player Pause failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Pause(player: *mut OH_AVPlayer) -> OH_AVErrCode;
    /// Stop playback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player Stop failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Stop(player: *mut OH_AVPlayer) -> OH_AVErrCode;
    /// Restores the player to the initial state.
    ///
    /// After the function is called, add a playback source by calling [`SetSource`],
    /// call [`Play`] to start playback again after [`Prepare`] is called.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player Reset failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Reset(player: *mut OH_AVPlayer) -> OH_AVErrCode;
    /// Releases player resources async
    ///
    /// Asynchronous release guarantees the performance
    /// but cannot ensure whether the surfacebuffer is released.
    /// The caller needs to ensure the life cycle security of the surface
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player Release failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Release(player: *mut OH_AVPlayer) -> OH_AVErrCode;
    /// Releases player resources sync
    ///
    /// Synchronous release ensures effective release of surfacebuffer
    /// but this interface will take a long time (when the engine is not idle state)
    /// requiring the caller to design an asynchronous mechanism by itself
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player ReleaseSync failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_ReleaseSync(player: *mut OH_AVPlayer) -> OH_AVErrCode;
    /// Sets the volume of the player.
    ///
    /// This function can be used during playback or pause. The value <b>0</b> indicates no sound,
    /// and <b>1</b> indicates the original volume. If no audio device is started or no audio
    /// stream exists, the value <b>-1</b> is returned.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `leftVolume` - Indicates the target volume of the left audio channel to set,
    /// ranging from 0 to 1. each step is 0.01.
    ///
    /// * `rightVolume` - Indicates the target volume of the right audio channel to set,
    /// ranging from 0 to 1. each step is 0.01.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player SetVolume failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SetVolume(
        player: *mut OH_AVPlayer,
        leftVolume: f32,
        rightVolume: f32,
    ) -> OH_AVErrCode;
    /// Changes the playback position.
    ///
    /// This function can be used during play or pause.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `mSeconds` - Indicates the target playback position, accurate to milliseconds.
    ///
    /// * `mode` - Indicates the player seek mode. For details, see [`AVPlayerSeekMode`].
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player Seek failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_Seek(
        player: *mut OH_AVPlayer,
        mSeconds: i32,
        mode: AVPlayerSeekMode,
    ) -> OH_AVErrCode;
    /// Obtains the playback position, accurate to millisecond.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `currentTime` - Indicates the playback position.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player GetCurrentTime failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_GetCurrentTime(
        player: *mut OH_AVPlayer,
        currentTime: *mut i32,
    ) -> OH_AVErrCode;
    /// get the video width.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `videoWidth` - The video width
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_GetVideoWidth(
        player: *mut OH_AVPlayer,
        videoWidth: *mut i32,
    ) -> OH_AVErrCode;
    /// get the video height.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `videoHeight` - The video height
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_GetVideoHeight(
        player: *mut OH_AVPlayer,
        videoHeight: *mut i32,
    ) -> OH_AVErrCode;
    /// set the player playback rate
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `speed` - the rate mode [`AVPlaybackSpeed`] which can set.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player SetPlaybackSpeed failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SetPlaybackSpeed(
        player: *mut OH_AVPlayer,
        speed: AVPlaybackSpeed,
    ) -> OH_AVErrCode;
    /// get the current player playback rate
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `speed` - the rate mode [`AVPlaybackSpeed`] which can get.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player GetPlaybackSpeed failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_GetPlaybackSpeed(
        player: *mut OH_AVPlayer,
        speed: *mut AVPlaybackSpeed,
    ) -> OH_AVErrCode;
    /// set the bit rate use for hls player
    ///
    /// the playback bitrate expressed in bits per second, expressed in bits per second,
    /// which is only valid for HLS protocol network flow. By default,
    /// the player will select the appropriate bit rate and speed according to the network connection.
    /// report the effective bit rate linked list by "INFO_TYPE_BITRATE_COLLECT"
    /// set and select the specified bit rate, and select the bit rate that is less than and closest
    /// to the specified bit rate for playback. When ready, read it to query the currently selected bit rate.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `bitRate` - the bit rate, The unit is bps.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player SelectBitRate failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SelectBitRate(player: *mut OH_AVPlayer, bitRate: u32) -> OH_AVErrCode;
    /// Method to set the surface.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `window` - A pointer to a OHNativeWindow instance, see [`OHNativeWindow`]
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr, input window is nullptr,
    /// or player SetVideoSurface failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SetVideoSurface(
        player: *mut OH_AVPlayer,
        window: *mut OHNativeWindow,
    ) -> OH_AVErrCode;
    /// Obtains the total duration of media files, accurate to milliseconds.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `duration` - Indicates the total duration of media files.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player GetDuration failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_GetDuration(player: *mut OH_AVPlayer, duration: *mut i32) -> OH_AVErrCode;
    /// get current playback state.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `state` - the current playback state
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_GetState(
        player: *mut OH_AVPlayer,
        state: *mut AVPlayerState,
    ) -> OH_AVErrCode;
    /// Checks whether the player is playing.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Returns true if the playback is playing; Return false if not or input player is nullptr.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_IsPlaying(player: *mut OH_AVPlayer) -> bool;
    /// Returns the value whether single looping is enabled or not .
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// # Returns
    ///
    /// * Returns true if the playback is single looping; Return false if not or input player is nullptr.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_IsLooping(player: *mut OH_AVPlayer) -> bool;
    /// Enables single looping of the media playback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `loop` - The switch to set loop
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player SetLooping failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SetLooping(player: *mut OH_AVPlayer, loop_: bool) -> OH_AVErrCode;
    /// Method to set player callback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `callback` - object pointer.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr, callback.onInfo or callback.onError is null,
    /// or player SetPlayerCallback failed.
    ///
    /// Available since API-level: 11
    ///
    /// **Deprecated** since 12
    /// [`OH_AVPlayer_SetPlayerOnInfoCallback`] [`OH_AVPlayer_SetPlayerOnErrorCallback`]
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    #[deprecated(since = "12")]
    pub fn OH_AVPlayer_SetPlayerCallback(
        player: *mut OH_AVPlayer,
        callback: AVPlayerCallback,
    ) -> OH_AVErrCode;
    /// Select audio or subtitle track.
    ///
    /// By default, the first audio stream with data is played, and the subtitle track is not played.
    /// After the settings take effect, the original track will become invalid. Please set subtitles
    /// in prepared/playing/paused/completed state and set audio tracks in prepared state.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `index` - Track index
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player SelectTrack failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_SelectTrack(player: *mut OH_AVPlayer, index: i32) -> OH_AVErrCode;
    /// Deselect the current audio or subtitle track.
    ///
    /// After audio is deselected, the default track will be played, and after subtitles are deselected,
    /// they will not be played. Please set subtitles in prepared/playing/paused/completed state and set
    /// audio tracks in prepared state.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `index` - Track index
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player DeselectTrack failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_DeselectTrack(player: *mut OH_AVPlayer, index: i32) -> OH_AVErrCode;
    /// Obtain the currently effective track index.
    ///
    /// Please get it in the prepared/playing/paused/completed state.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `trackType` - Media type.
    ///
    /// * `index` - Track index
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player GetCurrentTrack failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVPlayer_GetCurrentTrack(
        player: *mut OH_AVPlayer,
        trackType: i32,
        index: *mut i32,
    ) -> OH_AVErrCode;
    /// Method to set player media key system info callback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `callback` - object pointer.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr, MediaKeySystemInfoCallback is null
    /// player SetDrmSystemInfoCallback failed, SetDrmSystemInfoCallback failed or SetDrmSystemInfoCallback failed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVPlayer_SetMediaKeySystemInfoCallback(
        player: *mut OH_AVPlayer,
        callback: Player_MediaKeySystemInfoCallback,
    ) -> OH_AVErrCode;
    /// Obtains media key system info to create media key session.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `mediaKeySystemInfo` - Media key system info.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or no memory.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVPlayer_GetMediaKeySystemInfo(
        player: *mut OH_AVPlayer,
        mediaKeySystemInfo: *mut DRM_MediaKeySystemInfo,
    ) -> OH_AVErrCode;
    /// Set decryption info.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance
    ///
    /// * `mediaKeySession` - A media key session instance with decryption function.
    ///
    /// * `secureVideoPath` - Require secure decoder or not.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is nullptr or player SetDecryptConfig failed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVPlayer_SetDecryptionConfig(
        player: *mut OH_AVPlayer,
        mediaKeySession: *mut MediaKeySession,
        secureVideoPath: bool,
    ) -> OH_AVErrCode;
    /// Method to set player information notify callback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance.
    ///
    /// * `callback` - Pointer to callback function, nullptr indicates unregister callback.
    ///
    /// * `userData` - Pointer to user specific data.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is null or player SetOnInfoCallback failed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVPlayer_SetOnInfoCallback(
        player: *mut OH_AVPlayer,
        callback: OH_AVPlayerOnInfoCallback,
        userData: *mut ::core::ffi::c_void,
    ) -> OH_AVErrCode;
    /// Method to set player error callback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    /// # Arguments
    ///
    /// * `player` - Pointer to an OH_AVPlayer instance.
    ///
    /// * `callback` - Pointer to callback function, nullptr indicates unregister callback.
    ///
    /// * `userData` - Pointer to user specific data.
    ///
    /// # Returns
    ///
    /// * Function result code.
    /// [`AV_ERR_OK`] if the execution is successful.
    /// [`AV_ERR_INVALID_VAL`] if input player is null or player SetOnErrorCallback failed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVPlayer_SetOnErrorCallback(
        player: *mut OH_AVPlayer,
        callback: OH_AVPlayerOnErrorCallback,
        userData: *mut ::core::ffi::c_void,
    ) -> OH_AVErrCode;
}
