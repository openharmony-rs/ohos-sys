// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[cfg(feature = "api-11")]
use crate::avbuffer::OH_AVBuffer;
use crate::avbuffer_info::OH_AVCodecBufferAttr;
#[allow(unused_imports)]
use crate::averrors::OH_AVErrCode;
use crate::avformat::OH_AVFormat;
use crate::avmemory::OH_AVMemory;

/// Forward declaration of OH_AVCodec.
///
///
/// Available since API-level: 9
#[repr(C)]
pub struct OH_AVCodec {
    _unused: [u8; 0],
}
/// When an error occurs in the running of the OH_AVCodec instance, the function pointer will be called
/// to report specific error information.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `codec` - OH_AVCodec instance
///
/// * `errorCode` - specific error code
///
/// * `userData` - User specific data
///
/// Available since API-level: 9
pub type OH_AVCodecOnError = ::core::option::Option<
    unsafe extern "C" fn(
        codec: *mut OH_AVCodec,
        errorCode: i32,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// When the output stream changes, the function pointer will be called to report the new stream description
/// information. It should be noted that the life cycle of the OH_AVFormat pointer
/// is only valid when the function pointer is called, and it is forbidden to continue to access after the call ends.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `codec` - OH_AVCodec instance
///
/// * `format` - New output stream description information
///
/// * `userData` - User specific data
///
/// Available since API-level: 9
pub type OH_AVCodecOnStreamChanged = ::core::option::Option<
    unsafe extern "C" fn(
        codec: *mut OH_AVCodec,
        format: *mut OH_AVFormat,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// When OH_AVCodec needs new input data during the running process,
/// the function pointer will be called and carry an available Buffer to fill in the new input data.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `codec` - OH_AVCodec instance
///
/// * `index` - The index corresponding to the newly available input buffer.
///
/// * `data` - New available input buffer.
///
/// * `userData` - User specific data
///
/// **Deprecated** since 11
/// OH_AVCodecOnNeedInputBuffer
///
/// Available since API-level: 9
#[deprecated(since = "11")]
pub type OH_AVCodecOnNeedInputData = ::core::option::Option<
    unsafe extern "C" fn(
        codec: *mut OH_AVCodec,
        index: u32,
        data: *mut OH_AVMemory,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// When new output data is generated during the operation of OH_AVCodec, the function pointer will be
/// called and carry a Buffer containing the new output data. It should be noted that the life cycle of the
/// OH_AVCodecBufferAttr pointer is only valid when the function pointer is called. , which prohibits continued
/// access after the call ends.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `codec` - OH_AVCodec instance
///
/// * `index` - The index corresponding to the new output Buffer.
///
/// * `data` - Buffer containing the new output data
///
/// * `attr` - The description of the new output Buffer, please refer to [`OH_AVCodecBufferAttr`]
///
/// * `userData` - specified data
///
/// **Deprecated** since 11
/// OH_AVCodecOnNewOutputBuffer
///
/// Available since API-level: 9
#[deprecated(since = "11")]
pub type OH_AVCodecOnNewOutputData = ::core::option::Option<
    unsafe extern "C" fn(
        codec: *mut OH_AVCodec,
        index: u32,
        data: *mut OH_AVMemory,
        attr: *mut OH_AVCodecBufferAttr,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// When OH_AVCodec needs new input data during the running process,
/// the function pointer will be called and carry an available Buffer to fill in the new input data.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `codec` - OH_AVCodec instance
///
/// * `index` - The index corresponding to the newly available input buffer.
///
/// * `buffer` - New available input buffer.
///
/// * `userData` - User specific data
///
/// Available since API-level: 11
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
pub type OH_AVCodecOnNeedInputBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        codec: *mut OH_AVCodec,
        index: u32,
        buffer: *mut OH_AVBuffer,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// When new output data is generated during the operation of OH_AVCodec, the function pointer will be
/// called and carry a Buffer containing the new output data.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `codec` - OH_AVCodec instance
///
/// * `index` - The index corresponding to the new output Buffer.
///
/// * `buffer` - Buffer containing the new output buffer.
///
/// * `userData` - specified data
///
/// Available since API-level: 11
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
pub type OH_AVCodecOnNewOutputBuffer = ::core::option::Option<
    unsafe extern "C" fn(
        codec: *mut OH_AVCodec,
        index: u32,
        buffer: *mut OH_AVBuffer,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// A collection of all asynchronous callback function pointers in OH_AVCodec. Register an instance of this
/// structure to the OH_AVCodec instance, and process the information reported through the callback to ensure the
/// normal operation of OH_AVCodec.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `onError` - Monitor OH_AVCodec operation errors, refer to [`OH_AVCodecOnError`]
///
/// * `onStreamChanged` - Monitor codec stream information, refer to [`OH_AVCodecOnStreamChanged`]
///
/// * `onNeedInputData` - Monitoring codec requires input data, refer to [`OH_AVCodecOnNeedInputData`]
///
/// * `onNeedOutputData` - Monitor codec to generate output data, refer to [`OH_AVCodecOnNewOutputData`]
///
/// **Deprecated** since 11
/// OH_AVCodecCallback
///
/// Available since API-level: 9
#[deprecated(since = "11")]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_AVCodecAsyncCallback {
    pub onError: OH_AVCodecOnError,
    pub onStreamChanged: OH_AVCodecOnStreamChanged,
    pub onNeedInputData: OH_AVCodecOnNeedInputData,
    pub onNeedOutputData: OH_AVCodecOnNewOutputData,
}
/// A collection of all asynchronous callback function pointers in OH_AVCodec. Register an instance of this
/// structure to the OH_AVCodec instance, and process the information reported through the callback to ensure the
/// normal operation of OH_AVCodec.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `onError` - Monitor OH_AVCodec operation errors, refer to [`OH_AVCodecOnError`]
///
/// * `onStreamChanged` - Monitor codec stream information, refer to [`OH_AVCodecOnStreamChanged`]
///
/// * `onNeedInputBuffer` - Monitoring codec requires input buffer, refer to [`OH_AVCodecOnNeedInputBuffer`]
///
/// * `onNewOutputBuffer` - Monitor codec to generate output buffer, refer to [`OH_AVCodecOnNewOutputBuffer`]
///
/// Available since API-level: 11
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_AVCodecCallback {
    pub onError: OH_AVCodecOnError,
    pub onStreamChanged: OH_AVCodecOnStreamChanged,
    pub onNeedInputBuffer: OH_AVCodecOnNeedInputBuffer,
    pub onNewOutputBuffer: OH_AVCodecOnNewOutputBuffer,
}
/// the function pointer will be called to get sequence media data.
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
/// # Arguments
///
/// * `data` - OH_AVBuffer buffer to fill
///
/// * `length` - expected to read size;
///
/// * `pos` - current read offset
///
/// # Returns
///
/// * Actual size of data read to the buffer.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type OH_AVDataSourceReadAt = ::core::option::Option<
    unsafe extern "C" fn(data: *mut OH_AVBuffer, length: i32, pos: i64) -> i32,
>;
/// User customized data source.
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_AVDataSource {
    /// Total size of the data source.
    pub size: i64,
    /// Callback interface for reading data from datasource.
    pub readAt: OH_AVDataSourceReadAt,
}
impl OH_MediaType {
    pub const MEDIA_TYPE_AUD: OH_MediaType = OH_MediaType(0);
    pub const MEDIA_TYPE_VID: OH_MediaType = OH_MediaType(1);
    /// track is subtitle.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const MEDIA_TYPE_SUBTITLE: OH_MediaType = OH_MediaType(2);
}
#[repr(transparent)]
/// Media type.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 9
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_MediaType(pub ::core::ffi::c_uint);
impl OH_AACProfile {
    pub const AAC_PROFILE_LC: OH_AACProfile = OH_AACProfile(0);
    /// High-Efficiency AAC profile, contain the audio object types: AAC LC, SBR
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const AAC_PROFILE_HE: OH_AACProfile = OH_AACProfile(3);
    /// High-Efficiency AAC v2 profile, contain the audio object types: AAC LC, SBR, PS
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub const AAC_PROFILE_HE_V2: OH_AACProfile = OH_AACProfile(4);
}
#[repr(transparent)]
/// AAC Profile
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 9
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AACProfile(pub ::core::ffi::c_uint);
impl OH_AVCProfile {
    pub const AVC_PROFILE_BASELINE: OH_AVCProfile = OH_AVCProfile(0);
    pub const AVC_PROFILE_HIGH: OH_AVCProfile = OH_AVCProfile(4);
    pub const AVC_PROFILE_MAIN: OH_AVCProfile = OH_AVCProfile(8);
}
#[repr(transparent)]
/// AVC Profile
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 9
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AVCProfile(pub ::core::ffi::c_uint);
impl OH_HEVCProfile {
    pub const HEVC_PROFILE_MAIN: OH_HEVCProfile = OH_HEVCProfile(0);
    pub const HEVC_PROFILE_MAIN_10: OH_HEVCProfile = OH_HEVCProfile(1);
    pub const HEVC_PROFILE_MAIN_STILL: OH_HEVCProfile = OH_HEVCProfile(2);
    ///
    /// **Deprecated** since 14
    #[deprecated(since = "14")]
    pub const HEVC_PROFILE_MAIN_10_HDR10: OH_HEVCProfile = OH_HEVCProfile(3);
    ///
    /// **Deprecated** since 14
    #[deprecated(since = "14")]
    pub const HEVC_PROFILE_MAIN_10_HDR10_PLUS: OH_HEVCProfile = OH_HEVCProfile(4);
}
#[repr(transparent)]
/// HEVC Profile
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_HEVCProfile(pub ::core::ffi::c_uint);
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
impl OH_VVCProfile {
    /// Main 10 profile
    pub const VVC_PROFILE_MAIN_10: OH_VVCProfile = OH_VVCProfile(1);
    /// Main 12 profile
    pub const VVC_PROFILE_MAIN_12: OH_VVCProfile = OH_VVCProfile(2);
    /// Main 12 Intra profile
    pub const VVC_PROFILE_MAIN_12_INTRA: OH_VVCProfile = OH_VVCProfile(10);
    /// Multilayer Main 10 profile
    pub const VVC_PROFILE_MULTI_MAIN_10: OH_VVCProfile = OH_VVCProfile(17);
    /// Main 10 4:4:4 profile
    pub const VVC_PROFILE_MAIN_10_444: OH_VVCProfile = OH_VVCProfile(33);
    /// Main 12 4:4:4 profile
    pub const VVC_PROFILE_MAIN_12_444: OH_VVCProfile = OH_VVCProfile(34);
    /// Main 16 4:4:4 profile
    pub const VVC_PROFILE_MAIN_16_444: OH_VVCProfile = OH_VVCProfile(36);
    /// Main 12 4:4:4 Intra profile
    pub const VVC_PROFILE_MAIN_12_444_INTRA: OH_VVCProfile = OH_VVCProfile(42);
    /// Main 16 4:4:4 Intra profile
    pub const VVC_PROFILE_MAIN_16_444_INTRA: OH_VVCProfile = OH_VVCProfile(44);
    /// Multilayer Main 10 4:4:4 profile
    pub const VVC_PROFILE_MULTI_MAIN_10_444: OH_VVCProfile = OH_VVCProfile(49);
    /// Main 10 Still Picture profile
    pub const VVC_PROFILE_MAIN_10_STILL: OH_VVCProfile = OH_VVCProfile(65);
    /// Main 12 Still Picture profile
    pub const VVC_PROFILE_MAIN_12_STILL: OH_VVCProfile = OH_VVCProfile(66);
    /// Main 10 4:4:4 Still Picture profile
    pub const VVC_PROFILE_MAIN_10_444_STILL: OH_VVCProfile = OH_VVCProfile(97);
    /// Main 12 4:4:4 Still Picture profile
    pub const VVC_PROFILE_MAIN_12_444_STILL: OH_VVCProfile = OH_VVCProfile(98);
    /// Main 16 4:4:4 Still Picture profile
    pub const VVC_PROFILE_MAIN_16_444_STILL: OH_VVCProfile = OH_VVCProfile(100);
}
#[repr(transparent)]
/// Profile: A specified subset of the syntax of VVC.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_VVCProfile(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl OH_MPEG2Profile {
    /// Simple profile
    pub const MPEG2_PROFILE_SIMPLE: OH_MPEG2Profile = OH_MPEG2Profile(0);
    /// Main profile
    pub const MPEG2_PROFILE_MAIN: OH_MPEG2Profile = OH_MPEG2Profile(1);
    /// SNR scalable profile
    pub const MPEG2_PROFILE_SNR_SCALABLE: OH_MPEG2Profile = OH_MPEG2Profile(2);
    /// Spatially scalable profile
    pub const MPEG2_PROFILE_SPATIALLY_SCALABLE: OH_MPEG2Profile = OH_MPEG2Profile(3);
    /// High profile
    pub const MPEG2_PROFILE_HIGH: OH_MPEG2Profile = OH_MPEG2Profile(4);
    /// 4:2:2 profile
    pub const MPEG2_PROFILE_422: OH_MPEG2Profile = OH_MPEG2Profile(5);
}
#[repr(transparent)]
/// MPEG2 Profile
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_MPEG2Profile(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl OH_MPEG4Profile {
    /// Simple profile
    pub const MPEG4_PROFILE_SIMPLE: OH_MPEG4Profile = OH_MPEG4Profile(0);
    /// Simple scalable profile
    pub const MPEG4_PROFILE_SIMPLE_SCALABLE: OH_MPEG4Profile = OH_MPEG4Profile(1);
    /// Core profile
    pub const MPEG4_PROFILE_CORE: OH_MPEG4Profile = OH_MPEG4Profile(2);
    /// Main profile
    pub const MPEG4_PROFILE_MAIN: OH_MPEG4Profile = OH_MPEG4Profile(3);
    /// N-Bit profile
    pub const MPEG4_PROFILE_N_BIT: OH_MPEG4Profile = OH_MPEG4Profile(4);
    /// Hybrid profile
    pub const MPEG4_PROFILE_HYBRID: OH_MPEG4Profile = OH_MPEG4Profile(5);
    /// Basic animated texture profile
    pub const MPEG4_PROFILE_BASIC_ANIMATED_TEXTURE: OH_MPEG4Profile = OH_MPEG4Profile(6);
    /// Scalable texture profile
    pub const MPEG4_PROFILE_SCALABLE_TEXTURE: OH_MPEG4Profile = OH_MPEG4Profile(7);
    /// Simple FA profile
    pub const MPEG4_PROFILE_SIMPLE_FA: OH_MPEG4Profile = OH_MPEG4Profile(8);
    /// Advanced real time simple profile
    pub const MPEG4_PROFILE_ADVANCED_REAL_TIME_SIMPLE: OH_MPEG4Profile = OH_MPEG4Profile(9);
    /// Core scalable profile
    pub const MPEG4_PROFILE_CORE_SCALABLE: OH_MPEG4Profile = OH_MPEG4Profile(10);
    /// Advanced coding efficiency profile
    pub const MPEG4_PROFILE_ADVANCED_CODING_EFFICIENCY: OH_MPEG4Profile = OH_MPEG4Profile(11);
    /// Advanced core profile
    pub const MPEG4_PROFILE_ADVANCED_CORE: OH_MPEG4Profile = OH_MPEG4Profile(12);
    /// Advanced scalable texture profile
    pub const MPEG4_PROFILE_ADVANCED_SCALABLE_TEXTURE: OH_MPEG4Profile = OH_MPEG4Profile(13);
    /// Advanced simple profile
    pub const MPEG4_PROFILE_ADVANCED_SIMPLE: OH_MPEG4Profile = OH_MPEG4Profile(17);
}
#[repr(transparent)]
/// MPEG4 Profile
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_MPEG4Profile(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl OH_H263Profile {
    /// Baseline profile
    pub const H263_PROFILE_BASELINE: OH_H263Profile = OH_H263Profile(0);
    /// Version 1 backward compatibility profile
    pub const H263_PROFILE_VERSION_1_BACKWARD_COMPATIBILITY: OH_H263Profile = OH_H263Profile(2);
}
#[repr(transparent)]
/// H263 Profile
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_H263Profile(pub ::core::ffi::c_uint);
impl OH_AVOutputFormat {
    pub const AV_OUTPUT_FORMAT_DEFAULT: OH_AVOutputFormat = OH_AVOutputFormat(0);
    pub const AV_OUTPUT_FORMAT_MPEG_4: OH_AVOutputFormat = OH_AVOutputFormat(2);
    pub const AV_OUTPUT_FORMAT_M4A: OH_AVOutputFormat = OH_AVOutputFormat(6);
    /// The muxer output amr file format.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const AV_OUTPUT_FORMAT_AMR: OH_AVOutputFormat = OH_AVOutputFormat(8);
    /// The muxer output mp3 file format.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const AV_OUTPUT_FORMAT_MP3: OH_AVOutputFormat = OH_AVOutputFormat(9);
    /// The muxer output wav file format.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const AV_OUTPUT_FORMAT_WAV: OH_AVOutputFormat = OH_AVOutputFormat(10);
    /// The muxer output aac file format.
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub const AV_OUTPUT_FORMAT_AAC: OH_AVOutputFormat = OH_AVOutputFormat(11);
}
#[repr(transparent)]
/// Enumerates the muxer output file format
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AVOutputFormat(pub ::core::ffi::c_uint);
impl OH_AVSeekMode {
    pub const SEEK_MODE_NEXT_SYNC: OH_AVSeekMode = OH_AVSeekMode(0);
    pub const SEEK_MODE_PREVIOUS_SYNC: OH_AVSeekMode = OH_AVSeekMode(1);
    pub const SEEK_MODE_CLOSEST_SYNC: OH_AVSeekMode = OH_AVSeekMode(2);
}
#[repr(transparent)]
/// Seek Mode
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AVSeekMode(pub ::core::ffi::c_uint);
impl OH_ScalingMode {
    ///
    /// **Deprecated** since 14
    /// OH_SCALING_MODE_SCALE_TO_WINDOW_V2
    #[deprecated(since = "14")]
    pub const SCALING_MODE_SCALE_TO_WINDOW: OH_ScalingMode = OH_ScalingMode(1);
    ///
    /// **Deprecated** since 14
    /// OH_SCALING_MODE_SCALE_CROP_V2
    #[deprecated(since = "14")]
    pub const SCALING_MODE_SCALE_CROP: OH_ScalingMode = OH_ScalingMode(2);
}
#[repr(transparent)]
/// Scaling Mode
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// **Deprecated** since 14
/// OHScalingModeV2
///
/// Available since API-level: 10
#[deprecated(since = "14")]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_ScalingMode(pub ::core::ffi::c_uint);
impl OH_BitsPerSample {
    pub const SAMPLE_U8: OH_BitsPerSample = OH_BitsPerSample(0);
    pub const SAMPLE_S16LE: OH_BitsPerSample = OH_BitsPerSample(1);
    pub const SAMPLE_S24LE: OH_BitsPerSample = OH_BitsPerSample(2);
    pub const SAMPLE_S32LE: OH_BitsPerSample = OH_BitsPerSample(3);
    pub const SAMPLE_F32LE: OH_BitsPerSample = OH_BitsPerSample(4);
    pub const SAMPLE_U8P: OH_BitsPerSample = OH_BitsPerSample(5);
    pub const SAMPLE_S16P: OH_BitsPerSample = OH_BitsPerSample(6);
    pub const SAMPLE_S24P: OH_BitsPerSample = OH_BitsPerSample(7);
    pub const SAMPLE_S32P: OH_BitsPerSample = OH_BitsPerSample(8);
    pub const SAMPLE_F32P: OH_BitsPerSample = OH_BitsPerSample(9);
    pub const INVALID_WIDTH: OH_BitsPerSample = OH_BitsPerSample(-1);
}
#[repr(transparent)]
/// enum Audio Bits Per Coded Sample
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_BitsPerSample(pub ::core::ffi::c_int);
impl OH_ColorPrimary {
    pub const COLOR_PRIMARY_BT709: OH_ColorPrimary = OH_ColorPrimary(1);
    pub const COLOR_PRIMARY_UNSPECIFIED: OH_ColorPrimary = OH_ColorPrimary(2);
    pub const COLOR_PRIMARY_BT470_M: OH_ColorPrimary = OH_ColorPrimary(4);
    pub const COLOR_PRIMARY_BT601_625: OH_ColorPrimary = OH_ColorPrimary(5);
    pub const COLOR_PRIMARY_BT601_525: OH_ColorPrimary = OH_ColorPrimary(6);
    pub const COLOR_PRIMARY_SMPTE_ST240: OH_ColorPrimary = OH_ColorPrimary(7);
    pub const COLOR_PRIMARY_GENERIC_FILM: OH_ColorPrimary = OH_ColorPrimary(8);
    pub const COLOR_PRIMARY_BT2020: OH_ColorPrimary = OH_ColorPrimary(9);
    pub const COLOR_PRIMARY_SMPTE_ST428: OH_ColorPrimary = OH_ColorPrimary(10);
    pub const COLOR_PRIMARY_P3DCI: OH_ColorPrimary = OH_ColorPrimary(11);
    pub const COLOR_PRIMARY_P3D65: OH_ColorPrimary = OH_ColorPrimary(12);
}
#[repr(transparent)]
/// Color Primary
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_ColorPrimary(pub ::core::ffi::c_uint);
impl OH_TransferCharacteristic {
    pub const TRANSFER_CHARACTERISTIC_BT709: OH_TransferCharacteristic =
        OH_TransferCharacteristic(1);
    pub const TRANSFER_CHARACTERISTIC_UNSPECIFIED: OH_TransferCharacteristic =
        OH_TransferCharacteristic(2);
    pub const TRANSFER_CHARACTERISTIC_GAMMA_2_2: OH_TransferCharacteristic =
        OH_TransferCharacteristic(4);
    pub const TRANSFER_CHARACTERISTIC_GAMMA_2_8: OH_TransferCharacteristic =
        OH_TransferCharacteristic(5);
    pub const TRANSFER_CHARACTERISTIC_BT601: OH_TransferCharacteristic =
        OH_TransferCharacteristic(6);
    pub const TRANSFER_CHARACTERISTIC_SMPTE_ST240: OH_TransferCharacteristic =
        OH_TransferCharacteristic(7);
    pub const TRANSFER_CHARACTERISTIC_LINEAR: OH_TransferCharacteristic =
        OH_TransferCharacteristic(8);
    pub const TRANSFER_CHARACTERISTIC_LOG: OH_TransferCharacteristic = OH_TransferCharacteristic(9);
    pub const TRANSFER_CHARACTERISTIC_LOG_SQRT: OH_TransferCharacteristic =
        OH_TransferCharacteristic(10);
    pub const TRANSFER_CHARACTERISTIC_IEC_61966_2_4: OH_TransferCharacteristic =
        OH_TransferCharacteristic(11);
    pub const TRANSFER_CHARACTERISTIC_BT1361: OH_TransferCharacteristic =
        OH_TransferCharacteristic(12);
    pub const TRANSFER_CHARACTERISTIC_IEC_61966_2_1: OH_TransferCharacteristic =
        OH_TransferCharacteristic(13);
    pub const TRANSFER_CHARACTERISTIC_BT2020_10BIT: OH_TransferCharacteristic =
        OH_TransferCharacteristic(14);
    pub const TRANSFER_CHARACTERISTIC_BT2020_12BIT: OH_TransferCharacteristic =
        OH_TransferCharacteristic(15);
    pub const TRANSFER_CHARACTERISTIC_PQ: OH_TransferCharacteristic = OH_TransferCharacteristic(16);
    pub const TRANSFER_CHARACTERISTIC_SMPTE_ST428: OH_TransferCharacteristic =
        OH_TransferCharacteristic(17);
    pub const TRANSFER_CHARACTERISTIC_HLG: OH_TransferCharacteristic =
        OH_TransferCharacteristic(18);
}
#[repr(transparent)]
/// Transfer Characteristic
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_TransferCharacteristic(pub ::core::ffi::c_uint);
impl OH_MatrixCoefficient {
    pub const MATRIX_COEFFICIENT_IDENTITY: OH_MatrixCoefficient = OH_MatrixCoefficient(0);
    pub const MATRIX_COEFFICIENT_BT709: OH_MatrixCoefficient = OH_MatrixCoefficient(1);
    pub const MATRIX_COEFFICIENT_UNSPECIFIED: OH_MatrixCoefficient = OH_MatrixCoefficient(2);
    pub const MATRIX_COEFFICIENT_FCC: OH_MatrixCoefficient = OH_MatrixCoefficient(4);
    pub const MATRIX_COEFFICIENT_BT601_625: OH_MatrixCoefficient = OH_MatrixCoefficient(5);
    pub const MATRIX_COEFFICIENT_BT601_525: OH_MatrixCoefficient = OH_MatrixCoefficient(6);
    pub const MATRIX_COEFFICIENT_SMPTE_ST240: OH_MatrixCoefficient = OH_MatrixCoefficient(7);
    pub const MATRIX_COEFFICIENT_YCGCO: OH_MatrixCoefficient = OH_MatrixCoefficient(8);
    pub const MATRIX_COEFFICIENT_BT2020_NCL: OH_MatrixCoefficient = OH_MatrixCoefficient(9);
    pub const MATRIX_COEFFICIENT_BT2020_CL: OH_MatrixCoefficient = OH_MatrixCoefficient(10);
    pub const MATRIX_COEFFICIENT_SMPTE_ST2085: OH_MatrixCoefficient = OH_MatrixCoefficient(11);
    pub const MATRIX_COEFFICIENT_CHROMATICITY_NCL: OH_MatrixCoefficient = OH_MatrixCoefficient(12);
    pub const MATRIX_COEFFICIENT_CHROMATICITY_CL: OH_MatrixCoefficient = OH_MatrixCoefficient(13);
    pub const MATRIX_COEFFICIENT_ICTCP: OH_MatrixCoefficient = OH_MatrixCoefficient(14);
}
#[repr(transparent)]
/// Matrix Coefficient
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_MatrixCoefficient(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_AVCLevel {
    pub const AVC_LEVEL_1: OH_AVCLevel = OH_AVCLevel(0);
    pub const AVC_LEVEL_1b: OH_AVCLevel = OH_AVCLevel(1);
    pub const AVC_LEVEL_11: OH_AVCLevel = OH_AVCLevel(2);
    pub const AVC_LEVEL_12: OH_AVCLevel = OH_AVCLevel(3);
    pub const AVC_LEVEL_13: OH_AVCLevel = OH_AVCLevel(4);
    pub const AVC_LEVEL_2: OH_AVCLevel = OH_AVCLevel(5);
    pub const AVC_LEVEL_21: OH_AVCLevel = OH_AVCLevel(6);
    pub const AVC_LEVEL_22: OH_AVCLevel = OH_AVCLevel(7);
    pub const AVC_LEVEL_3: OH_AVCLevel = OH_AVCLevel(8);
    pub const AVC_LEVEL_31: OH_AVCLevel = OH_AVCLevel(9);
    pub const AVC_LEVEL_32: OH_AVCLevel = OH_AVCLevel(10);
    pub const AVC_LEVEL_4: OH_AVCLevel = OH_AVCLevel(11);
    pub const AVC_LEVEL_41: OH_AVCLevel = OH_AVCLevel(12);
    pub const AVC_LEVEL_42: OH_AVCLevel = OH_AVCLevel(13);
    pub const AVC_LEVEL_5: OH_AVCLevel = OH_AVCLevel(14);
    pub const AVC_LEVEL_51: OH_AVCLevel = OH_AVCLevel(15);
    pub const AVC_LEVEL_52: OH_AVCLevel = OH_AVCLevel(16);
    pub const AVC_LEVEL_6: OH_AVCLevel = OH_AVCLevel(17);
    pub const AVC_LEVEL_61: OH_AVCLevel = OH_AVCLevel(18);
    pub const AVC_LEVEL_62: OH_AVCLevel = OH_AVCLevel(19);
}
#[repr(transparent)]
/// AVC Level.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AVCLevel(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_HEVCLevel {
    pub const HEVC_LEVEL_1: OH_HEVCLevel = OH_HEVCLevel(0);
    pub const HEVC_LEVEL_2: OH_HEVCLevel = OH_HEVCLevel(1);
    pub const HEVC_LEVEL_21: OH_HEVCLevel = OH_HEVCLevel(2);
    pub const HEVC_LEVEL_3: OH_HEVCLevel = OH_HEVCLevel(3);
    pub const HEVC_LEVEL_31: OH_HEVCLevel = OH_HEVCLevel(4);
    pub const HEVC_LEVEL_4: OH_HEVCLevel = OH_HEVCLevel(5);
    pub const HEVC_LEVEL_41: OH_HEVCLevel = OH_HEVCLevel(6);
    pub const HEVC_LEVEL_5: OH_HEVCLevel = OH_HEVCLevel(7);
    pub const HEVC_LEVEL_51: OH_HEVCLevel = OH_HEVCLevel(8);
    pub const HEVC_LEVEL_52: OH_HEVCLevel = OH_HEVCLevel(9);
    pub const HEVC_LEVEL_6: OH_HEVCLevel = OH_HEVCLevel(10);
    pub const HEVC_LEVEL_61: OH_HEVCLevel = OH_HEVCLevel(11);
    pub const HEVC_LEVEL_62: OH_HEVCLevel = OH_HEVCLevel(12);
}
#[repr(transparent)]
/// HEVC Level.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_HEVCLevel(pub ::core::ffi::c_uint);
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
impl OH_VVCLevel {
    /// VVC level 1.0
    pub const VVC_LEVEL_1: OH_VVCLevel = OH_VVCLevel(16);
    /// VVC level 2.0
    pub const VVC_LEVEL_2: OH_VVCLevel = OH_VVCLevel(32);
    /// VVC level 2.1
    pub const VVC_LEVEL_21: OH_VVCLevel = OH_VVCLevel(35);
    /// VVC level 3.0
    pub const VVC_LEVEL_3: OH_VVCLevel = OH_VVCLevel(48);
    /// VVC level 3.1
    pub const VVC_LEVEL_31: OH_VVCLevel = OH_VVCLevel(51);
    /// VVC level 4.0
    pub const VVC_LEVEL_4: OH_VVCLevel = OH_VVCLevel(64);
    /// VVC level 4.1
    pub const VVC_LEVEL_41: OH_VVCLevel = OH_VVCLevel(67);
    /// VVC level 5.0
    pub const VVC_LEVEL_5: OH_VVCLevel = OH_VVCLevel(80);
    /// VVC level 5.1
    pub const VVC_LEVEL_51: OH_VVCLevel = OH_VVCLevel(83);
    /// VVC level 5.2
    pub const VVC_LEVEL_52: OH_VVCLevel = OH_VVCLevel(86);
    /// VVC level 6.0
    pub const VVC_LEVEL_6: OH_VVCLevel = OH_VVCLevel(96);
    /// VVC level 6.1
    pub const VVC_LEVEL_61: OH_VVCLevel = OH_VVCLevel(99);
    /// VVC level 6.2
    pub const VVC_LEVEL_62: OH_VVCLevel = OH_VVCLevel(102);
    /// VVC level 6.3
    pub const VVC_LEVEL_63: OH_VVCLevel = OH_VVCLevel(105);
    /// VVC level 15.5
    pub const VVC_LEVEL_155: OH_VVCLevel = OH_VVCLevel(255);
}
#[repr(transparent)]
/// VVC Level: A defined set of constraints on the values that may be taken by the syntax elements and variables
/// of VVC, or the value of a transform coefficient prior to scaling.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 15
#[cfg(feature = "api-15")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_VVCLevel(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl OH_MPEG2Level {
    /// Low level
    pub const MPEG2_LEVEL_LOW: OH_MPEG2Level = OH_MPEG2Level(0);
    /// Main level
    pub const MPEG2_LEVEL_MAIN: OH_MPEG2Level = OH_MPEG2Level(1);
    /// High 1440 level
    pub const MPEG2_LEVEL_HIGH_1440: OH_MPEG2Level = OH_MPEG2Level(2);
    /// High level
    pub const MPEG2_LEVEL_HIGH: OH_MPEG2Level = OH_MPEG2Level(3);
}
#[repr(transparent)]
/// MPEG2 Level.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_MPEG2Level(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl OH_MPEG4Level {
    /// 0 level
    pub const MPEG4_LEVEL_0: OH_MPEG4Level = OH_MPEG4Level(0);
    /// 0B level
    pub const MPEG4_LEVEL_0B: OH_MPEG4Level = OH_MPEG4Level(1);
    /// 1 level
    pub const MPEG4_LEVEL_1: OH_MPEG4Level = OH_MPEG4Level(2);
    /// 2 level
    pub const MPEG4_LEVEL_2: OH_MPEG4Level = OH_MPEG4Level(3);
    /// 3 level
    pub const MPEG4_LEVEL_3: OH_MPEG4Level = OH_MPEG4Level(4);
    /// 3B level
    pub const MPEG4_LEVEL_3B: OH_MPEG4Level = OH_MPEG4Level(5);
    /// 4 level
    pub const MPEG4_LEVEL_4: OH_MPEG4Level = OH_MPEG4Level(6);
    /// 4A level
    pub const MPEG4_LEVEL_4A: OH_MPEG4Level = OH_MPEG4Level(7);
    /// 5 level
    pub const MPEG4_LEVEL_5: OH_MPEG4Level = OH_MPEG4Level(8);
    /// 6 level
    pub const MPEG4_LEVEL_6: OH_MPEG4Level = OH_MPEG4Level(9);
}
#[repr(transparent)]
/// MPEG4 Level.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_MPEG4Level(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl OH_H263Level {
    /// 10 level
    pub const H263_LEVEL_10: OH_H263Level = OH_H263Level(0);
    /// 20 level
    pub const H263_LEVEL_20: OH_H263Level = OH_H263Level(1);
    /// 30 level
    pub const H263_LEVEL_30: OH_H263Level = OH_H263Level(2);
    /// 40 level
    pub const H263_LEVEL_40: OH_H263Level = OH_H263Level(3);
    /// 45 level
    pub const H263_LEVEL_45: OH_H263Level = OH_H263Level(4);
    /// 50 level
    pub const H263_LEVEL_50: OH_H263Level = OH_H263Level(5);
    /// 60 level
    pub const H263_LEVEL_60: OH_H263Level = OH_H263Level(6);
    /// 70 level
    pub const H263_LEVEL_70: OH_H263Level = OH_H263Level(7);
}
#[repr(transparent)]
/// H263 Level.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_H263Level(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_TemporalGopReferenceMode {
    /// Refer to latest short-term reference frame.
    pub const ADJACENT_REFERENCE: OH_TemporalGopReferenceMode = OH_TemporalGopReferenceMode(0);
    /// Refer to latest long-term reference frame.
    pub const JUMP_REFERENCE: OH_TemporalGopReferenceMode = OH_TemporalGopReferenceMode(1);
    /// Uniformly scaled reference structure, which has even distribution of video frames after drop the highest
    /// enhance layer. The temporal group of pictures must be power of 2.
    pub const UNIFORMLY_SCALED_REFERENCE: OH_TemporalGopReferenceMode =
        OH_TemporalGopReferenceMode(2);
}
#[repr(transparent)]
/// The reference mode in temporal group of picture.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_TemporalGopReferenceMode(pub ::core::ffi::c_uint);
impl OH_BitrateMode {
    /// Constant Bit rate mode.
    pub const BITRATE_MODE_CBR: OH_BitrateMode = OH_BitrateMode(0);
    /// Variable Bit rate mode.
    pub const BITRATE_MODE_VBR: OH_BitrateMode = OH_BitrateMode(1);
    /// Constant Quality mode.
    pub const BITRATE_MODE_CQ: OH_BitrateMode = OH_BitrateMode(2);
}
#[repr(transparent)]
/// The bitrate mode of encoder.
///
/// Change the location of the header file, since 14.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_BitrateMode(pub ::core::ffi::c_uint);
extern "C" {
    /// Enumerates the mime types of video avc codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_AVCODEC_MIMETYPE_VIDEO_AVC: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio aac codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_AAC: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio flac codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_FLAC: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio vorbis codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_VORBIS: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio mp3 codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_MPEG: *const ::core::ffi::c_char;
    /// Enumerates the mime types of video hevc codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_AVCODEC_MIMETYPE_VIDEO_HEVC: *const ::core::ffi::c_char;
    /// Enumerates the mime types of video mpeg4 muxer.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// **Deprecated** since 11
    ///
    /// Available since API-level: 10
    #[deprecated(since = "11")]
    pub static mut OH_AVCODEC_MIMETYPE_VIDEO_MPEG4: *const ::core::ffi::c_char;
    /// Enumerates the mime types of cover jpg muxer.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_AVCODEC_MIMETYPE_IMAGE_JPG: *const ::core::ffi::c_char;
    /// Enumerates the mime types of cover png muxer.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_AVCODEC_MIMETYPE_IMAGE_PNG: *const ::core::ffi::c_char;
    /// Enumerates the mime types of cover bmp muxer.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_AVCODEC_MIMETYPE_IMAGE_BMP: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio vivid codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_VIVID: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio amrnb codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_AMR_NB: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio amrwb codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_AMR_WB: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio opus codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_OPUS: *const ::core::ffi::c_char;
    /// Enumerates the mime types of audio g711mu codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_G711MU: *const ::core::ffi::c_char;
    /// Enumerates the mime type of audio ape codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_APE: *const ::core::ffi::c_char;
    /// Enumerates the MIME type of versatile video coding.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_AVCODEC_MIMETYPE_VIDEO_VVC: *const ::core::ffi::c_char;
    /// Enumerates the mime type of subtitle srt.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_AVCODEC_MIMETYPE_SUBTITLE_SRT: *const ::core::ffi::c_char;
    /// Enumerates the mime type of subtitle webvtt.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_AVCODEC_MIMETYPE_SUBTITLE_WEBVTT: *const ::core::ffi::c_char;
    /// Enumerates the mime type of audio raw stream.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub static mut OH_AVCODEC_MIMETYPE_AUDIO_RAW: *const ::core::ffi::c_char;
    /// Enumerates the MIME type of video mpeg2 codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub static mut OH_AVCODEC_MIMETYPE_VIDEO_MPEG2: *const ::core::ffi::c_char;
    /// Enumerates the MIME type of video mpeg4 part2 codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub static mut OH_AVCODEC_MIMETYPE_VIDEO_MPEG4_PART2: *const ::core::ffi::c_char;
    /// Enumerates the MIME type of video h263 codec.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub static mut OH_AVCODEC_MIMETYPE_VIDEO_H263: *const ::core::ffi::c_char;
    /// Key for timeStamp in surface's extraData, value type is int64_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// **Deprecated** since 14
    ///
    /// Available since API-level: 9
    #[deprecated(since = "14")]
    pub static mut OH_ED_KEY_TIME_STAMP: *const ::core::ffi::c_char;
    /// Key for endOfStream in surface's extraData, value type is bool.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// **Deprecated** since 14
    ///
    /// Available since API-level: 9
    #[deprecated(since = "14")]
    pub static mut OH_ED_KEY_EOS: *const ::core::ffi::c_char;
    /// Key for track type, value type is int32_t, see [`OH_MediaType`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_TRACK_TYPE: *const ::core::ffi::c_char;
    /// Key for codec mime type, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_CODEC_MIME: *const ::core::ffi::c_char;
    /// Key for file duration in microseconds, value type is int64_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_DURATION: *const ::core::ffi::c_char;
    /// Key for bitrate, value type is int64_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_BITRATE: *const ::core::ffi::c_char;
    /// Key for max input size, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_MAX_INPUT_SIZE: *const ::core::ffi::c_char;
    /// Key for video width, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_WIDTH: *const ::core::ffi::c_char;
    /// Key for video height, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_HEIGHT: *const ::core::ffi::c_char;
    /// Key for video pixel format, value type is int32_t, see [`OH_AVPixelFormat`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_PIXEL_FORMAT: *const ::core::ffi::c_char;
    /// key for audio raw format, value type is int32_t , see [`OH_BitsPerSample`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_AUDIO_SAMPLE_FORMAT: *const ::core::ffi::c_char;
    /// Key for video frame rate, value type is double.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_FRAME_RATE: *const ::core::ffi::c_char;
    /// video encode bitrate mode, the value type is int32_t, see [`OH_VideoEncodeBitrateMode`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_VIDEO_ENCODE_BITRATE_MODE: *const ::core::ffi::c_char;
    /// encode profile, the value type is int32_t. see [`OH_AVCProfile`], [`OH_HEVCProfile`],
    /// [`OH_AACProfile`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_PROFILE: *const ::core::ffi::c_char;
    /// Key for audio channel count, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_AUD_CHANNEL_COUNT: *const ::core::ffi::c_char;
    /// Key for audio sample rate, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_AUD_SAMPLE_RATE: *const ::core::ffi::c_char;
    /// Key for the interval of key frame. value type is int32_t, the unit is milliseconds. A negative value means no
    /// key frames are requested after the first frame. A zero value means a stream containing all key frames is requested.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_I_FRAME_INTERVAL: *const ::core::ffi::c_char;
    /// Key of the surface rotation angle. value type is int32_t: should be {0, 90, 180, 270}, default is 0.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 9
    pub static mut OH_MD_KEY_ROTATION: *const ::core::ffi::c_char;
    /// Key for video YUV value range flag, value type is bool, true for full range, false for limited range.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_RANGE_FLAG: *const ::core::ffi::c_char;
    /// Key for video color primaries, value type is int32_t, see [`OH_ColorPrimary`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_COLOR_PRIMARIES: *const ::core::ffi::c_char;
    /// Key for video transfer characteristics, value type is int32_t, see [`OH_TransferCharacteristic`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_TRANSFER_CHARACTERISTICS: *const ::core::ffi::c_char;
    /// Key for video matrix coefficients, value type is int32_t, see [`OH_MatrixCoefficient`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_MATRIX_COEFFICIENTS: *const ::core::ffi::c_char;
    /// Key for the request an I-Frame immediately, value type is bool.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_REQUEST_I_FRAME: *const ::core::ffi::c_char;
    /// Key for the desired encoding quality, value type is int32_t, this key is only.
    /// supported for encoders that are configured in constant quality mode.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_QUALITY: *const ::core::ffi::c_char;
    /// Key of the codec specific data. value type is a uint8_t pointer.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_CODEC_CONFIG: *const ::core::ffi::c_char;
    /// source format Key for title, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_TITLE: *const ::core::ffi::c_char;
    /// source format Key for artist, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_ARTIST: *const ::core::ffi::c_char;
    /// source format Key for album, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_ALBUM: *const ::core::ffi::c_char;
    /// source format Key for album artist, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_ALBUM_ARTIST: *const ::core::ffi::c_char;
    /// source format Key for date, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_DATE: *const ::core::ffi::c_char;
    /// source format Key for comment, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_COMMENT: *const ::core::ffi::c_char;
    /// source format Key for genre, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_GENRE: *const ::core::ffi::c_char;
    /// source format Key for copyright, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_COPYRIGHT: *const ::core::ffi::c_char;
    /// source format Key for language, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_LANGUAGE: *const ::core::ffi::c_char;
    /// source format Key for description, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_DESCRIPTION: *const ::core::ffi::c_char;
    /// source format Key for lyrics, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_LYRICS: *const ::core::ffi::c_char;
    /// source format Key for track count, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_TRACK_COUNT: *const ::core::ffi::c_char;
    /// Key for the desired encoding channel layout, value type is int64_t, this key is only supported for encoders.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_CHANNEL_LAYOUT: *const ::core::ffi::c_char;
    /// Key for bits per coded sample, value type is int32_t, supported for flac encoder,
    /// see [`OH_BitsPerSample`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_BITS_PER_CODED_SAMPLE: *const ::core::ffi::c_char;
    /// Key for the aac format, value type is int32_t, supported for aac decoder.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_AAC_IS_ADTS: *const ::core::ffi::c_char;
    /// Key for aac sbr mode, value type is int32_t, supported for aac encoder.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_SBR: *const ::core::ffi::c_char;
    /// Key for flac compliance level, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_COMPLIANCE_LEVEL: *const ::core::ffi::c_char;
    /// Key for vorbis identification header, value type is a uint8_t pointer, supported only for vorbis decoder.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_IDENTIFICATION_HEADER: *const ::core::ffi::c_char;
    /// Key for vorbis setup header, value type is a uint8_t pointer, supported only for vorbis decoder.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_KEY_SETUP_HEADER: *const ::core::ffi::c_char;
    /// Key for video scale type, value type is int32_t, see [`OH_ScalingMode`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// **Deprecated** since 14
    /// OH_NativeWindow_NativeWindowSetScalingModeV2
    ///
    /// Available since API-level: 10
    #[deprecated(since = "14")]
    pub static mut OH_MD_KEY_SCALING_MODE: *const ::core::ffi::c_char;
    /// Key for max input buffer count, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_MAX_INPUT_BUFFER_COUNT: *const ::core::ffi::c_char;
    /// Key for max output buffer count, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 10
    pub static mut OH_MD_MAX_OUTPUT_BUFFER_COUNT: *const ::core::ffi::c_char;
    /// Key for audio codec compression level, value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_MD_KEY_AUDIO_COMPRESSION_LEVEL: *const ::core::ffi::c_char;
    /// Key of the video is hdr vivid. value type is bool.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_MD_KEY_VIDEO_IS_HDR_VIVID: *const ::core::ffi::c_char;
    /// Key for number of audio objects. value type is int32_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_MD_KEY_AUDIO_OBJECT_NUMBER: *const ::core::ffi::c_char;
    /// Key for meta data of audio vivid. value type is a uint8_t pointer.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub static mut OH_MD_KEY_AUDIO_VIVID_METADATA: *const ::core::ffi::c_char;
    /// Key for querying the maximum long-term reference count of video encoder, value type is int32_t.
    /// You should query the count through interface [`OH_AVCapability_GetFeatureProperties`]
    /// with enum [`VIDEO_ENCODER_LONG_TERM_REFERENCE`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_FEATURE_PROPERTY_KEY_VIDEO_ENCODER_MAX_LTR_FRAME_COUNT:
        *const ::core::ffi::c_char;
    /// Key for enable the temporal scalability mode, value type is int32_t (0 or 1): 1 is enabled, 0 otherwise.
    /// The default value is 0. To query supported, you should use the interface [`OH_AVCapability_IsFeatureSupported`]
    /// with enum [`VIDEO_ENCODER_TEMPORAL_SCALABILITY`]. This is an optional key that applies only to video encoder.
    /// It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_ENABLE_TEMPORAL_SCALABILITY: *const ::core::ffi::c_char;
    /// Key for describing the temporal group of picture size, value type is int32_t. It takes effect only when
    /// temporal level scale is enable. This is an optional key that applies only to video encoder. It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_TEMPORAL_GOP_SIZE: *const ::core::ffi::c_char;
    /// Key for describing the reference mode in temporal group of picture, value type is int32_t, see enum
    /// [`OH_TemporalGopReferenceMode`]. It takes effect only when temporal level sacle is enabled.
    /// This is an optional key that applies only to video encoder. It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_TEMPORAL_GOP_REFERENCE_MODE: *const ::core::ffi::c_char;
    /// Key for describing the count of used long-term reference frames, value type is int32_t, must be within the
    /// supported range. To get supported range, you should query wthether the capability is supported through the interface
    /// [`OH_AVCapability_GetFeatureProperties`] with enum [`VIDEO_ENCODER_LONG_TERM_REFERENCE`], otherwise, not set
    /// the key. This is an optional key that applies only to video encoder. It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_LTR_FRAME_COUNT: *const ::core::ffi::c_char;
    /// Key for describing mark this frame as a long term reference frame, value type is int32_t (0 or 1): 1 is mark,
    /// 0 otherwise. It takes effect only when the number of used long term reference frames is configured. This is an
    /// optional key that applies only to video encoder input loop. It takes effect immediately.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_PER_FRAME_MARK_LTR: *const ::core::ffi::c_char;
    /// Key for describing the long term reference frame poc referenced by this frame, value type is int32_t. This is
    /// an optional key that applies only to video encoder input loop. It takes effect immediately.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_PER_FRAME_USE_LTR: *const ::core::ffi::c_char;
    /// Key for indicating this frame is a long-term reference frame, value type is int32_t (0 or 1): 1 is LTR,
    /// 0 otherwise. This is an optional key that applies only to video encoder output loop.
    /// It indicates the attribute of the frame.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_PER_FRAME_IS_LTR: *const ::core::ffi::c_char;
    /// Key for describing the frame poc, value type is int32_t. This is an optional key that applies only to video
    /// encoder output loop. It indicates the attribute of the frame.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_PER_FRAME_POC: *const ::core::ffi::c_char;
    /// Key for describing the top-coordinate (y) of the crop rectangle, value type is int32_t. This is the top-most
    /// row included in the crop frame, where row indices start at 0.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_CROP_TOP: *const ::core::ffi::c_char;
    /// Key for describing the bottom-coordinate (y) of the crop rectangle, value type is int32_t. This is the
    /// bottom-most row included in the crop frame, where row indices start at 0.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_CROP_BOTTOM: *const ::core::ffi::c_char;
    /// Key for describing the left-coordinate (x) of the crop rectangle, value type is int32_t.
    /// This is the left-most column included in the crop frame, where column indices start at 0.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_CROP_LEFT: *const ::core::ffi::c_char;
    /// Key for describing the right-coordinate (x) of the crop rectangle, value type is int32_t. This is the
    /// right-most column included in the crop frame, where column indices start at 0.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_CROP_RIGHT: *const ::core::ffi::c_char;
    /// Key for describing the stride of the video buffer layout, value type is int32_t. Stride (or row increment) is
    /// the difference between the index of a pixel and that of the pixel directly underneath. For YUV 420 formats, the
    /// stride corresponds to the Y plane; the stride of the U and V planes can be calculated based on the color format,
    /// though it is generally undefined and depends on the device and release.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_STRIDE: *const ::core::ffi::c_char;
    /// Key for describing the plane height of a multi-planar (YUV) video buffer layout, value type is int32_t.
    /// Slice height (or plane height/vertical stride) is the number of rows that must be skipped to get from
    /// the top of the Y plane to the top of the U plane in the buffer. In essence the offset of the U plane
    /// is sliceHeight * stride. The height of the U/V planes can be calculated based on the color format,
    /// though it is generally undefined and depends on the device and release.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_SLICE_HEIGHT: *const ::core::ffi::c_char;
    /// Key for describing the valid picture width of the video, value type is int32_t.
    /// Get the value from an OH_AVFormat instance, which obtained by calling [`OH_VideoDecoder_GetOutputDescription`]
    /// or [`OH_AVCodecOnStreamChanged`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_PIC_WIDTH: *const ::core::ffi::c_char;
    /// Key for describing the valid picture height of the video, value type is int32_t.
    /// Get the value from an OH_AVFormat instance, which obtained by calling [`OH_VideoDecoder_GetOutputDescription`]
    /// or [`OH_AVCodecOnStreamChanged`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_PIC_HEIGHT: *const ::core::ffi::c_char;
    /// Key to enable the low latency mode, value type is int32_t (0 or 1):1 is enabled, 0 otherwise.
    /// If enabled, the video encoder or video decoder doesn't hold input and output data more than required by
    /// the codec standards. This is an optional key that applies only to video encoder or video decoder.
    /// It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENABLE_LOW_LATENCY: *const ::core::ffi::c_char;
    /// Key for describing the maximum quantization parameter allowed for video encoder, value type is int32_t.
    /// It is used in configure/setparameter or takes effect immediately with the frame.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_QP_MAX: *const ::core::ffi::c_char;
    /// Key for describing the minimum quantization parameter allowed for video encoder, value type is int32_t.
    /// It is used in configure/setparameter or takes effect immediately with the frame.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_QP_MIN: *const ::core::ffi::c_char;
    /// Key for describing the video frame averge quantization parameter, value type is int32_t.
    /// This is a part of a video encoder statistics export feature. This value is emitted from video encoder for a video
    /// frame.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_QP_AVERAGE: *const ::core::ffi::c_char;
    /// Key for describing video frame mean squared error, value type is double.
    /// This is a part of a video encoder statistics export feature. This value is emitted from video encoder for a video
    /// frame.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_MSE: *const ::core::ffi::c_char;
    /// Key for decoding timestamp of the buffer in microseconds, value type is int64_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_DECODING_TIMESTAMP: *const ::core::ffi::c_char;
    /// Key for duration of the buffer in microseconds, value type is int64_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_BUFFER_DURATION: *const ::core::ffi::c_char;
    /// Key for sample aspect ratio, value type is double.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_SAR: *const ::core::ffi::c_char;
    /// Key for start time of the first frame in the media file in microseconds, value type is int64_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_START_TIME: *const ::core::ffi::c_char;
    /// Key for start time of track in microseconds, value type is int64_t.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_TRACK_START_TIME: *const ::core::ffi::c_char;
    /// Key for setting the output color space of video decoder. The value type is int32_t.
    /// The supported value is [`OH_COLORSPACE_BT709_LIMIT`], see [`OH_NativeBuffer_ColorSpace`]. It is used in
    /// [`OH_VideoDecoder_Configure`]. If the color space conversion capability is supported and this key is configured,
    /// the video decoder will automatically transcode an HDR Vivid video to an SDR video with color space BT709.
    /// If color space conversion capability is not supported, [`OH_VideoDecoder_Configure`] returns
    /// [`AV_ERR_VIDEO_UNSUPPORTED_COLOR_SPACE_CONVERSION`].
    /// If the input video is not an HDR vivid video, an error [`AV_ERR_VIDEO_UNSUPPORTED_COLOR_SPACE_CONVERSION`] will
    /// be reported by callback function [`OH_AVCodecOnError`].
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_MD_KEY_VIDEO_DECODER_OUTPUT_COLOR_SPACE: *const ::core::ffi::c_char;
    /// Key for describing if enable VRR or not, value type is int32_t (0 or 1): 1 is enabled, 0 otherwise.
    /// This is an optional key that applies only to video decoder. It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub static mut OH_MD_KEY_VIDEO_DECODER_OUTPUT_ENABLE_VRR: *const ::core::ffi::c_char;
    /// Key for creation timestamp of a media file, value type is string.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 14
    #[cfg(feature = "api-14")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-14")))]
    pub static mut OH_MD_KEY_CREATION_TIME: *const ::core::ffi::c_char;
    /// Key applies only when configuring a video encoder in surface mode, value type is int32_t.
    /// If no new frame became available since the last frame submitted to the encoder,
    /// it will sumbit the previous frame repeatly in milliseconds. It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_REPEAT_PREVIOUS_FRAME_AFTER: *const ::core::ffi::c_char;
    /// Key for describing the maximum count that the frame previously submitted to the encoder will be
    /// repeated, in case no new frame has been available since, value type is int32_t. This key takes effect only when
    /// [`VIDEO_ENCODER_REPEAT_PREVIOUS_FRAME_AFTER`] is vaild. It is used in configure.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    ///
    /// Available since API-level: 18
    #[cfg(feature = "api-18")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-18")))]
    pub static mut OH_MD_KEY_VIDEO_ENCODER_REPEAT_PREVIOUS_MAX_COUNT: *const ::core::ffi::c_char;
}
