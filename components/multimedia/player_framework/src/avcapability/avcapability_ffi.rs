// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::avcodec_base::OH_BitrateMode;
#[allow(unused_imports)]
use crate::averrors::OH_AVErrCode;
#[cfg(feature = "api-12")]
use crate::avformat::OH_AVFormat;

/// Forward declaration of OH_AVCapability.
///
///
/// Available since API-level: 10
#[repr(C)]
pub struct OH_AVCapability {
    _unused: [u8; 0],
}
/// Range contain min and max value
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OH_AVRange {
    pub minVal: i32,
    pub maxVal: i32,
}
impl OH_AVCodecCategory {
    pub const HARDWARE: OH_AVCodecCategory = OH_AVCodecCategory(0);
    pub const SOFTWARE: OH_AVCodecCategory = OH_AVCodecCategory(1);
}
#[repr(transparent)]
/// The codec category
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 10
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AVCodecCategory(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_AVCapabilityFeature {
    /// Feature for codec supports temporal scalability. It is only used in video encoder.
    pub const VIDEO_ENCODER_TEMPORAL_SCALABILITY: OH_AVCapabilityFeature =
        OH_AVCapabilityFeature(0);
    /// Feature for codec supports long-term reference. It is only used in video encoder.
    pub const VIDEO_ENCODER_LONG_TERM_REFERENCE: OH_AVCapabilityFeature = OH_AVCapabilityFeature(1);
    /// Feature for codec supports low latency. It is used in video encoder and video decoder.
    pub const VIDEO_LOW_LATENCY: OH_AVCapabilityFeature = OH_AVCapabilityFeature(2);
}
#[repr(transparent)]
/// The enum of optional features that can be used in specific codec seenarios.
///
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct OH_AVCapabilityFeature(pub ::core::ffi::c_uint);
extern "C" {
    /// Get a system-recommended codec's capability.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `mime` - Mime type
    ///
    /// * `isEncoder` - True for encoder, false for decoder
    ///
    /// # Returns
    ///
    /// * Returns a capability instance if an existing codec matches,
    /// if the specified mime type doesn't match any existing codec, returns NULL.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCodec_GetCapability(
        mime: *const ::core::ffi::c_char,
        isEncoder: bool,
    ) -> *mut OH_AVCapability;
    /// Get a codec's capability within the specified category. By specifying the category,
    /// the matched codec is limited to either hardware codecs or software codecs.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `mime` - Mime type
    ///
    /// * `isEncoder` - True for encoder, false for decoder
    ///
    /// * `category` - The codec category
    ///
    /// # Returns
    ///
    /// * Returns a capability instance if an existing codec matches,
    /// if the specified mime type doesn't match any existing codec, returns NULL
    ///
    /// Available since API-level: 10
    pub fn OH_AVCodec_GetCapabilityByCategory(
        mime: *const ::core::ffi::c_char,
        isEncoder: bool,
        category: OH_AVCodecCategory,
    ) -> *mut OH_AVCapability;
    /// Check if the capability instance is describing a hardware codec.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// # Returns
    ///
    /// * Returns true if the capability instance is describing a hardware codec,
    /// false if the capability instance is describing a software codec
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_IsHardware(capability: *mut OH_AVCapability) -> bool;
    /// Get the codec name.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// # Returns
    ///
    /// * Returns codec name string
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetName(capability: *mut OH_AVCapability) -> *const ::core::ffi::c_char;
    /// Get the supported max instance number of the codec.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// # Returns
    ///
    /// * Returns the max supported codec instance number
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetMaxSupportedInstances(capability: *mut OH_AVCapability) -> i32;
    /// Get the encoder's supported bitrate range.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Encoder capability pointer. If a decoder capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `bitrateRange` - Output parameter. Encoder bitrate range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the bitrateRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetEncoderBitrateRange(
        capability: *mut OH_AVCapability,
        bitrateRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Check if the encoder supports the specific bitrate mode.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Encoder capability pointer. If a decoder capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `bitrateMode` - Bitrate mode
    ///
    /// # Returns
    ///
    /// * Returns true if the bitrate mode is supported, false if the bitrate mode is not supported
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_IsEncoderBitrateModeSupported(
        capability: *mut OH_AVCapability,
        bitrateMode: OH_BitrateMode,
    ) -> bool;
    /// Get the encoder's supported quality range.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Encoder capability pointer. If a decoder capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `qualityRange` - Output parameter. Encoder quality range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the qualityRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetEncoderQualityRange(
        capability: *mut OH_AVCapability,
        qualityRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Get the encoder's supported encoder complexity range.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Encoder capability pointer. If a decoder capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `complexityRange` - Output parameter. Encoder complexity range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the complexityRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetEncoderComplexityRange(
        capability: *mut OH_AVCapability,
        complexityRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Get the audio codec's supported sample rates.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Audio codec capability pointer. If a video codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `sampleRates` - Output parameter. A pointer to the sample rates array
    ///
    /// * `sampleRateNum` - Output parameter. The element number of the sample rates array
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, the sampleRates is nullptr, or sampleRateNum is nullptr.
    /// [`AV_ERR_UNKNOWN`], unknown error.
    /// [`AV_ERR_NO_MEMORY`], internal use memory malloc failed.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetAudioSupportedSampleRates(
        capability: *mut OH_AVCapability,
        sampleRates: *mut *const i32,
        sampleRateNum: *mut u32,
    ) -> OH_AVErrCode;
    /// Get the audio codec's supported audio channel count range.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Audio codec capability pointer. If a video codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `channelCountRange` - Output parameter. Audio channel count range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the channelCountRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetAudioChannelCountRange(
        capability: *mut OH_AVCapability,
        channelCountRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Get the video codec's supported video width alignment.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `widthAlignment` - Output parameter. Video width alignment
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the widthAlignment is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoWidthAlignment(
        capability: *mut OH_AVCapability,
        widthAlignment: *mut i32,
    ) -> OH_AVErrCode;
    /// Get the video codec's supported video height alignment.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `heightAlignment` - Output parameter. Video height alignment
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the heightAlignment is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoHeightAlignment(
        capability: *mut OH_AVCapability,
        heightAlignment: *mut i32,
    ) -> OH_AVErrCode;
    /// Get the video codec's supported video width range for a specific height.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `height` - Vertical pixel number of the video
    ///
    /// * `widthRange` - Output parameter. Video width range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, the height is not within the supported range
    /// obtained through [`OH_AVCapability_GetVideoHeightRange`], or the widthRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoWidthRangeForHeight(
        capability: *mut OH_AVCapability,
        height: i32,
        widthRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Get the video codec's supported video height range for a specific width.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `width` - Horizontal pixel number of the video
    ///
    /// * `heightRange` - Output parameter. Video height range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, the width is not within the supported range
    /// obtained through [`OH_AVCapability_GetVideoWidthRange`], or the heightRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoHeightRangeForWidth(
        capability: *mut OH_AVCapability,
        width: i32,
        heightRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Get the video codec's supported video width range.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `widthRange` - Output parameter. Video width range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the widthRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoWidthRange(
        capability: *mut OH_AVCapability,
        widthRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Get the video codec's supported video height range.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `heightRange` - Output parameter. Video height range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the heightRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoHeightRange(
        capability: *mut OH_AVCapability,
        heightRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Check if the video codec supports the specific video size.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `width` - Horizontal pixel number of the video
    ///
    /// * `height` - Vertical pixel number of the video
    ///
    /// # Returns
    ///
    /// * Returns true if the video size is supported, false if the video size is not supported
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_IsVideoSizeSupported(
        capability: *mut OH_AVCapability,
        width: i32,
        height: i32,
    ) -> bool;
    /// Get the video codec's supported video frame rate range.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `frameRateRange` - Output parameter. Video frame rate range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, or the frameRateRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoFrameRateRange(
        capability: *mut OH_AVCapability,
        frameRateRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Get the Video codec's supported video frame rate range for a specified video size.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `width` - Horizontal pixel number of the video
    ///
    /// * `height` - Vertical pixel number of the video
    ///
    /// * `frameRateRange` - Output parameter. Frame rate range
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, the combination of width and height is
    /// not supported, or the frameRateRange is nullptr.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoFrameRateRangeForSize(
        capability: *mut OH_AVCapability,
        width: i32,
        height: i32,
        frameRateRange: *mut OH_AVRange,
    ) -> OH_AVErrCode;
    /// Check if the video codec supports the specific combination of video size and frame rate.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `width` - Horizontal pixel number of the video
    ///
    /// * `height` - Vertical pixel number of the video
    ///
    /// * `frameRate` - Frame number per second
    ///
    /// # Returns
    ///
    /// * Returns true if the combination of video size and frame rate is supported,
    /// false if it is not supported
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_AreVideoSizeAndFrameRateSupported(
        capability: *mut OH_AVCapability,
        width: i32,
        height: i32,
        frameRate: i32,
    ) -> bool;
    /// Get the video codec's supported video pixel format.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Video codec capability pointer. If an audio codec capability pointer is given,
    /// undefined behavior occurs
    ///
    /// * `pixelFormats` - Output parameter. A pointer to the video pixel format array
    ///
    /// * `pixelFormatNum` - Output parameter. The element number of the pixel format array
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, the pixelFormats is nullptr,
    /// or the pixelFormatNum is nullptr.
    /// [`AV_ERR_UNKNOWN`], unknown error.
    /// [`AV_ERR_NO_MEMORY`], internal use memory malloc failed.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetVideoSupportedPixelFormats(
        capability: *mut OH_AVCapability,
        pixelFormats: *mut *const i32,
        pixelFormatNum: *mut u32,
    ) -> OH_AVErrCode;
    /// Get the codec's supported profiles.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// * `profiles` - Output parameter. A pointer to the profile array
    ///
    /// * `profileNum` - Output parameter. The element number of the profile array
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, the profiles is nullptr, or the profileNum is nullptr.
    /// [`AV_ERR_UNKNOWN`], unknown error.
    /// [`AV_ERR_NO_MEMORY`], internal use memory malloc failed.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetSupportedProfiles(
        capability: *mut OH_AVCapability,
        profiles: *mut *const i32,
        profileNum: *mut u32,
    ) -> OH_AVErrCode;
    /// Get codec's supported levels for a specific profile.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// * `profile` - Codec profile
    ///
    /// * `levels` - Output parameter. A pointer to the level array
    ///
    /// * `levelNum` - Output parameter. The element number of the level array
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`], the capability is invalid, the profile is not within the supported profile array
    /// obtained through [`OH_AVCapability_GetSupportedProfiles`], the levels is nullptr, or the levelNum is nullptr.
    /// [`AV_ERR_UNKNOWN`], unknown error.
    /// [`AV_ERR_NO_MEMORY`], internal use memory malloc failed.
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_GetSupportedLevelsForProfile(
        capability: *mut OH_AVCapability,
        profile: i32,
        levels: *mut *const i32,
        levelNum: *mut u32,
    ) -> OH_AVErrCode;
    /// Check if the codec supports the specific combination of the profile and level.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// * `profile` - Codec profile
    ///
    /// * `level` - Codec level
    ///
    /// # Returns
    ///
    /// * Returns true if the combination of profile and level is supported,
    /// false if it is not supported
    ///
    /// Available since API-level: 10
    pub fn OH_AVCapability_AreProfileAndLevelSupported(
        capability: *mut OH_AVCapability,
        profile: i32,
        level: i32,
    ) -> bool;
    /// Check if the codec supports the specified feature.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// * `feature` - Feature enum, refer to [`OH_AVCapabilityFeature`] for details
    ///
    /// # Returns
    ///
    /// * Returns true if the feature is supported, false if it is not supported
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVCapability_IsFeatureSupported(
        capability: *mut OH_AVCapability,
        feature: OH_AVCapabilityFeature,
    ) -> bool;
    /// Get the properties of the specified feature. It should be noted that the life cycle of the OH_AVFormat
    /// instance pointed to by the return value * needs to be manually released by the caller.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.CodecBase
    /// # Arguments
    ///
    /// * `capability` - Codec capability pointer
    ///
    /// * `feature` - Feature enum, refer to [`OH_AVCapabilityFeature`] for details
    ///
    /// # Returns
    ///
    /// * Returns a pointer to an OH_AVFormat instance
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVCapability_GetFeatureProperties(
        capability: *mut OH_AVCapability,
        feature: OH_AVCapabilityFeature,
    ) -> *mut OH_AVFormat;
}
