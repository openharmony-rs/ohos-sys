// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[allow(unused_imports)]
use crate::averrors::OH_AVErrCode;
#[cfg(feature = "api-12")]
use crate::avformat::OH_AVFormat;

#[repr(C)]
pub struct OH_AVPlayer {
    _unused: [u8; 0],
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl AVPlayerState {
    pub const AV_IDLE: AVPlayerState = AVPlayerState(0);
    pub const AV_INITIALIZED: AVPlayerState = AVPlayerState(1);
    pub const AV_PREPARED: AVPlayerState = AVPlayerState(2);
    pub const AV_PLAYING: AVPlayerState = AVPlayerState(3);
    pub const AV_PAUSED: AVPlayerState = AVPlayerState(4);
    pub const AV_STOPPED: AVPlayerState = AVPlayerState(5);
    pub const AV_COMPLETED: AVPlayerState = AVPlayerState(6);
    pub const AV_RELEASED: AVPlayerState = AVPlayerState(7);
    pub const AV_ERROR: AVPlayerState = AVPlayerState(8);
}
#[repr(transparent)]
/// Player States
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AVPlayerState(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl AVPlayerSeekMode {
    pub const AV_SEEK_NEXT_SYNC: AVPlayerSeekMode = AVPlayerSeekMode(0);
    pub const AV_SEEK_PREVIOUS_SYNC: AVPlayerSeekMode = AVPlayerSeekMode(1);
    /// Sync to frames closest to the time point.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const AV_SEEK_CLOSEST: AVPlayerSeekMode = AVPlayerSeekMode(2);
}
#[repr(transparent)]
/// Player Seek Mode
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AVPlayerSeekMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl AVPlaybackSpeed {
    pub const AV_SPEED_FORWARD_0_75_X: AVPlaybackSpeed = AVPlaybackSpeed(0);
    pub const AV_SPEED_FORWARD_1_00_X: AVPlaybackSpeed = AVPlaybackSpeed(1);
    pub const AV_SPEED_FORWARD_1_25_X: AVPlaybackSpeed = AVPlaybackSpeed(2);
    pub const AV_SPEED_FORWARD_1_75_X: AVPlaybackSpeed = AVPlaybackSpeed(3);
    pub const AV_SPEED_FORWARD_2_00_X: AVPlaybackSpeed = AVPlaybackSpeed(4);
    /// Video playback at 0.5x normal speed.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const AV_SPEED_FORWARD_0_50_X: AVPlaybackSpeed = AVPlaybackSpeed(5);
    /// Video playback at 1.5x normal speed.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const AV_SPEED_FORWARD_1_50_X: AVPlaybackSpeed = AVPlaybackSpeed(6);
    /// Video playback at 3.0x normal speed.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub const AV_SPEED_FORWARD_3_00_X: AVPlaybackSpeed = AVPlaybackSpeed(7);
    /// Video playback at 0.25x normal speed.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub const AV_SPEED_FORWARD_0_25_X: AVPlaybackSpeed = AVPlaybackSpeed(8);
    /// Video playback at 0.125x normal speed.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub const AV_SPEED_FORWARD_0_125_X: AVPlaybackSpeed = AVPlaybackSpeed(9);
}
#[repr(transparent)]
/// Playback Speed
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AVPlaybackSpeed(pub ::core::ffi::c_uint);
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl AVPlayerOnInfoType {
    pub const AV_INFO_TYPE_SEEKDONE: AVPlayerOnInfoType = AVPlayerOnInfoType(0);
    pub const AV_INFO_TYPE_SPEEDDONE: AVPlayerOnInfoType = AVPlayerOnInfoType(1);
    pub const AV_INFO_TYPE_BITRATEDONE: AVPlayerOnInfoType = AVPlayerOnInfoType(2);
    pub const AV_INFO_TYPE_EOS: AVPlayerOnInfoType = AVPlayerOnInfoType(3);
    pub const AV_INFO_TYPE_STATE_CHANGE: AVPlayerOnInfoType = AVPlayerOnInfoType(4);
    pub const AV_INFO_TYPE_POSITION_UPDATE: AVPlayerOnInfoType = AVPlayerOnInfoType(5);
    pub const AV_INFO_TYPE_MESSAGE: AVPlayerOnInfoType = AVPlayerOnInfoType(6);
    pub const AV_INFO_TYPE_VOLUME_CHANGE: AVPlayerOnInfoType = AVPlayerOnInfoType(7);
    pub const AV_INFO_TYPE_RESOLUTION_CHANGE: AVPlayerOnInfoType = AVPlayerOnInfoType(8);
    pub const AV_INFO_TYPE_BUFFERING_UPDATE: AVPlayerOnInfoType = AVPlayerOnInfoType(9);
    pub const AV_INFO_TYPE_BITRATE_COLLECT: AVPlayerOnInfoType = AVPlayerOnInfoType(10);
    pub const AV_INFO_TYPE_INTERRUPT_EVENT: AVPlayerOnInfoType = AVPlayerOnInfoType(11);
    pub const AV_INFO_TYPE_DURATION_UPDATE: AVPlayerOnInfoType = AVPlayerOnInfoType(12);
    pub const AV_INFO_TYPE_IS_LIVE_STREAM: AVPlayerOnInfoType = AVPlayerOnInfoType(13);
    pub const AV_INFO_TYPE_TRACKCHANGE: AVPlayerOnInfoType = AVPlayerOnInfoType(14);
    pub const AV_INFO_TYPE_TRACK_INFO_UPDATE: AVPlayerOnInfoType = AVPlayerOnInfoType(15);
    pub const AV_INFO_TYPE_SUBTITLE_UPDATE: AVPlayerOnInfoType = AVPlayerOnInfoType(16);
    /// Return the reason when the audio output device changes. When this info is reported, the extra param of
    /// [`OH_AVPlayerOnInfo`] is the same as [`OH_AudioStream_DeviceChangeReason`] in audio framework.
    pub const AV_INFO_TYPE_AUDIO_OUTPUT_DEVICE_CHANGE: AVPlayerOnInfoType = AVPlayerOnInfoType(17);
}
#[repr(transparent)]
/// Player OnInfo Type
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AVPlayerOnInfoType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl AVPlayerBufferingType {
    /// Indicates the buffer to start buffering.
    pub const AVPLAYER_BUFFERING_START: AVPlayerBufferingType = AVPlayerBufferingType(1);
    /// Indicates the buffer to end buffering and start playback.
    pub const AVPLAYER_BUFFERING_END: AVPlayerBufferingType = AVPlayerBufferingType(2);
    /// Indicates the current buffering percentage of the buffer.
    pub const AVPLAYER_BUFFERING_PERCENT: AVPlayerBufferingType = AVPlayerBufferingType(3);
    /// Indicates how long the buffer cache data can be played.
    pub const AVPLAYER_BUFFERING_CACHED_DURATION: AVPlayerBufferingType = AVPlayerBufferingType(4);
}
#[repr(transparent)]
/// Player Buffering Type
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AVPlayerBufferingType(pub ::core::ffi::c_uint);
/// Called when a player message or alarm is received.
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
/// # Arguments
///
/// * `player` - The pointer to an OH_AVPlayer instance.
///
/// * `type` - Indicates the information type. For details, see [`AVPlayerOnInfoType`].
///
/// * `extra` - Indicates other information, for example, the start time position of a playing file.
///
/// Available since API-level: 11
///
/// **Deprecated** since 12
/// [`OH_AVPlayerOnInfoCallback`]
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[deprecated(since = "12")]
pub type OH_AVPlayerOnInfo = ::core::option::Option<
    unsafe extern "C" fn(player: *mut OH_AVPlayer, type_: AVPlayerOnInfoType, extra: i32),
>;
/// Called when a player info event is received.
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
/// # Arguments
///
/// * `player` - The pointer to an OH_AVPlayer instance.
///
/// * `type` - Indicates the information type. For details, see [`AVPlayerOnInfoType`].
///
/// * `infoBody` - Indicates the information parameters, only valid in callback function.
///
/// * `userData` - Pointer to user specific data.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type OH_AVPlayerOnInfoCallback = ::core::option::Option<
    unsafe extern "C" fn(
        player: *mut OH_AVPlayer,
        type_: AVPlayerOnInfoType,
        infoBody: *mut OH_AVFormat,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// Called when an error occurred for versions above api9
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
/// # Arguments
///
/// * `player` - The pointer to an OH_AVPlayer instance.
///
/// * `errorCode` - Error code.
///
/// * `errorMsg` - Error message.
///
/// Available since API-level: 11
///
/// **Deprecated** since 12
/// [`OH_AVPlayerOnInfoCallback`] [`OH_AVPlayerOnError`]
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[deprecated(since = "12")]
pub type OH_AVPlayerOnError = ::core::option::Option<
    unsafe extern "C" fn(
        player: *mut OH_AVPlayer,
        errorCode: i32,
        errorMsg: *const ::core::ffi::c_char,
    ),
>;
/// Called when an error occurred.
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
/// # Arguments
///
/// * `player` - The pointer to an OH_AVPlayer instance.
///
/// * `errorCode` - Error code.
///
/// * `errorMsg` - Error message, only valid in callback function.
///
/// * `userData` - Pointer to user specific data.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type OH_AVPlayerOnErrorCallback = ::core::option::Option<
    unsafe extern "C" fn(
        player: *mut OH_AVPlayer,
        errorCode: i32,
        errorMsg: *const ::core::ffi::c_char,
        userData: *mut ::core::ffi::c_void,
    ),
>;
/// A collection of all callback function pointers in OH_AVPlayer. Register an instance of this
/// structure to the OH_AVPlayer instance, and process the information reported through the callback to ensure the
/// normal operation of OH_AVPlayer.
///
/// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
/// # Arguments
///
/// * `onInfo` - Monitor OH_AVPlayer operation information, refer to [`OH_AVPlayerOnInfo`]
///
/// * `onError` - Monitor OH_AVPlayer operation errors, refer to [`OH_AVPlayerOnError`]
///
/// Available since API-level: 11
///
/// **Deprecated** since 12
/// [`OH_AVPlayerOnInfoCallback`] [`OH_AVPlayerOnErrorCallback`]
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[deprecated(since = "12")]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AVPlayerCallback {
    pub onInfo: OH_AVPlayerOnInfo,
    pub onError: OH_AVPlayerOnError,
}
extern "C" {
    /// Key to get state, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_STATE: *const ::core::ffi::c_char;
    /// Key to get state change reason, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_STATE_CHANGE_REASON: *const ::core::ffi::c_char;
    /// Key to get volume, value type is float.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_VOLUME: *const ::core::ffi::c_char;
    /// Key to get bitrate count, value type is uint32_t array.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_BITRATE_ARRAY: *const ::core::ffi::c_char;
    /// Key to get audio interrupt type, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_AUDIO_INTERRUPT_TYPE: *const ::core::ffi::c_char;
    /// Key to get audio interrupt force, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_AUDIO_INTERRUPT_FORCE: *const ::core::ffi::c_char;
    /// Key to get audio interrupt hint, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_AUDIO_INTERRUPT_HINT: *const ::core::ffi::c_char;
    /// Key to get audio device change reason, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_AUDIO_DEVICE_CHANGE_REASON: *const ::core::ffi::c_char;
    /// Key to get buffering type, value type is AVPlayerBufferingType.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_BUFFERING_TYPE: *const ::core::ffi::c_char;
    /// Key to get buffering value, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_BUFFERING_VALUE: *const ::core::ffi::c_char;
    /// Key to get seek position, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_SEEK_POSITION: *const ::core::ffi::c_char;
    /// Key to get playback speed, value type is AVPlaybackSpeed.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_PLAYBACK_SPEED: *const ::core::ffi::c_char;
    /// Key to get bitrate, value type is uint32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_BITRATE: *const ::core::ffi::c_char;
    /// Key to get current position, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_CURRENT_POSITION: *const ::core::ffi::c_char;
    /// Key to get duration, value type is int64_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_DURATION: *const ::core::ffi::c_char;
    /// Key to get video width, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_VIDEO_WIDTH: *const ::core::ffi::c_char;
    /// Key to get video height, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_VIDEO_HEIGHT: *const ::core::ffi::c_char;
    /// Key to get message type, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_MESSAGE_TYPE: *const ::core::ffi::c_char;
    /// Key to get is live stream, value type is int32_t.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.AVPlayer
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub static mut OH_PLAYER_IS_LIVE_STREAM: *const ::core::ffi::c_char;
}
