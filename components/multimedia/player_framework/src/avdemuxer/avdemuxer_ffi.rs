// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[cfg(feature = "api-11")]
use crate::avbuffer::OH_AVBuffer;
use crate::avbuffer_info::OH_AVCodecBufferAttr;
use crate::avcodec_base::OH_AVSeekMode;
#[allow(unused_imports)]
use crate::averrors::OH_AVErrCode;
use crate::avmemory::OH_AVMemory;
use crate::avsource::OH_AVSource;

/// Forward declaration of OH_AVDemuxer.
///
///
/// Available since API-level: 10
#[repr(C)]
pub struct OH_AVDemuxer {
    _unused: [u8; 0],
}
/// Forward declaration of DRM_MediaKeySystemInfo.
///
///
/// Available since API-level: 11
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[repr(C)]
pub struct DRM_MediaKeySystemInfo {
    _unused: [u8; 0],
}
/// Callback for getting media key system information from media source.
///
/// **Deprecated** since 14
/// Demuxer_MediaKeySystemInfoCallback
///
/// Available since API-level: 11
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[deprecated(since = "14")]
pub type DRM_MediaKeySystemInfoCallback =
    ::core::option::Option<unsafe extern "C" fn(mediaKeySystemInfo: *mut DRM_MediaKeySystemInfo)>;
/// Call back will be invoked when updating DRM information.
/// # Arguments
///
/// * `demuxer` - Player OH_AVDemuxer.
///
/// * `mediaKeySystemInfo` - DRM information.
///
/// # Returns
///
/// * DRM_ERR_INVALID_VAL when the params checked failure, return DRM_ERR_OK when function called successfully.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type Demuxer_MediaKeySystemInfoCallback = ::core::option::Option<
    unsafe extern "C" fn(
        demuxer: *mut OH_AVDemuxer,
        mediaKeySystemInfo: *mut DRM_MediaKeySystemInfo,
    ),
>;
extern "C" {
    /// Creates an OH_AVDemuxer instance for getting samples from source.
    /// Free the resources of the instance by calling OH_AVDemuxer_Destroy.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `source` - Pointer to an OH_AVSource instance.
    ///
    /// # Returns
    ///
    /// * Returns a pointer to an OH_AVDemuxer instance if the execution is successful, otherwise returns nullptr.
    /// Possible failure causes:
    /// 1. source is invalid.
    ///
    /// Available since API-level: 10
    pub fn OH_AVDemuxer_CreateWithSource(source: *mut OH_AVSource) -> *mut OH_AVDemuxer;
    /// Destroy the OH_AVDemuxer instance and free the internal resources.
    /// The same instance can only be destroyed once. The destroyed instance
    /// should not be used before it is created again. It is recommended setting
    /// the instance pointer to NULL right after the instance is destroyed successfully.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance.
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`] demuxer is invalid.
    ///
    /// Available since API-level: 10
    pub fn OH_AVDemuxer_Destroy(demuxer: *mut OH_AVDemuxer) -> OH_AVErrCode;
    /// The specified track is selected and the demuxer will read samples from
    /// this track. Multiple tracks are selected by calling this interface multiple times
    /// with different track indexes. Only the selected tracks are valid when calling
    /// OH_AVDemuxer_ReadSample to read samples. The interface returns AV_ERR_OK and the
    /// track is selected only once if the same track is selected multiple times.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance.
    ///
    /// * `trackIndex` - The index of the selected track.
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`] demuxer is invalid, demuxer is not properly initialized,
    /// trackIndex is out of range, track is not supported to be read.
    ///
    /// Available since API-level: 10
    pub fn OH_AVDemuxer_SelectTrackByID(
        demuxer: *mut OH_AVDemuxer,
        trackIndex: u32,
    ) -> OH_AVErrCode;
    /// The specified selected track is unselected. The unselected track's sample
    /// can not be read from demuxer. Multiple selected tracks are unselected by calling
    /// this interface multiple times with different track indexes. The interface returns
    /// AV_ERR_OK and the track is unselected only once if the same track is unselected
    /// multiple times.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance.
    ///
    /// * `trackIndex` - The index of the unselected track.
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`] demuxer is invalid, demuxer is not properly initialized.
    ///
    /// Available since API-level: 10
    pub fn OH_AVDemuxer_UnselectTrackByID(
        demuxer: *mut OH_AVDemuxer,
        trackIndex: u32,
    ) -> OH_AVErrCode;
    /// Get the current encoded sample and sample-related information from the specified
    /// track. The track index must be selected before reading sample. The demuxer will advance
    /// automatically after calling this interface.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance.
    ///
    /// * `trackIndex` - The index of the track from which read an encoded sample.
    ///
    /// * `sample` - The OH_AVMemory handle pointer to the buffer storing the sample data.
    ///
    /// * `info` - The OH_AVCodecBufferAttr handle pointer to the buffer storing sample information.
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`] demuxer is invalid, demuxer is not properly initialized, sample is invalid,
    /// trackIndex is out of range.
    /// [`AV_ERR_OPERATE_NOT_PERMIT`] trackIndex has not been selected.
    /// [`AV_ERR_NO_MEMORY`] capability of sample is not enough to store all frame data.
    /// [`AV_ERR_UNKNOWN`] failed to read or parse frame from file.
    ///
    /// **Deprecated** since 11
    /// OH_AVDemuxer_ReadSampleBuffer
    ///
    /// Available since API-level: 10
    #[deprecated(since = "11")]
    pub fn OH_AVDemuxer_ReadSample(
        demuxer: *mut OH_AVDemuxer,
        trackIndex: u32,
        sample: *mut OH_AVMemory,
        info: *mut OH_AVCodecBufferAttr,
    ) -> OH_AVErrCode;
    /// Get the current encoded sample and sample-related information from the specified
    /// track. The track index must be selected before reading sample. The demuxer will advance
    /// automatically after calling this interface.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance.
    ///
    /// * `trackIndex` - The index of the track from which read an encoded sample.
    ///
    /// * `sample` - The OH_AVBuffer handle pointer to the buffer storing the sample data and corresponding attribute.
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`] demuxer is invalid, demuxer is not properly initialized, sample is invalid,
    /// trackIndex is out of range.
    /// [`AV_ERR_OPERATE_NOT_PERMIT`] trackIndex has not been selected.
    /// [`AV_ERR_NO_MEMORY`] capability of sample is not enough to store frame data.
    /// [`AV_ERR_UNKNOWN`] failed to read or parse frame from file.
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVDemuxer_ReadSampleBuffer(
        demuxer: *mut OH_AVDemuxer,
        trackIndex: u32,
        sample: *mut OH_AVBuffer,
    ) -> OH_AVErrCode;
    /// All selected tracks seek near to the requested time according to the seek mode.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance.
    ///
    /// * `millisecond` - The millisecond for seeking, the timestamp is the position of
    /// the file relative to the start of the file.
    ///
    /// * `mode` - The mode for seeking. See [`OH_AVSeekMode`].
    ///
    /// # Returns
    ///
    /// * Returns AV_ERR_OK if the execution is successful,
    /// otherwise returns a specific error code, refer to [`OH_AVErrCode`]
    /// [`AV_ERR_INVALID_VAL`] demuxer is invalid, demuxer is not properly initialized,
    /// millisecond is out of range.
    /// [`AV_ERR_OPERATE_NOT_PERMIT`] trackIndex has not been selected, resource is unseekable.
    /// [`AV_ERR_UNKNOWN`] failed to seek.
    ///
    /// Available since API-level: 10
    pub fn OH_AVDemuxer_SeekToTime(
        demuxer: *mut OH_AVDemuxer,
        millisecond: i64,
        mode: OH_AVSeekMode,
    ) -> OH_AVErrCode;
    /// Method to set player media key system info callback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance
    ///
    /// * `callback` - object pointer.
    ///
    /// # Returns
    ///
    /// * [`AV_ERR_OK`] 0 - Success
    /// [`AV_ERR_OPERATE_NOT_PERMIT`] 2 - If the demuxer engine is not inited or init failed.
    /// [`AV_ERR_INVALID_VAL`] 3 - If the demuxer instance is nullptr or invalid.
    ///
    /// **Deprecated** since 14
    /// OH_AVDemuxer_SetDemuxerMediaKeySystemInfoCallback
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    #[deprecated(since = "14")]
    pub fn OH_AVDemuxer_SetMediaKeySystemInfoCallback(
        demuxer: *mut OH_AVDemuxer,
        callback: DRM_MediaKeySystemInfoCallback,
    ) -> OH_AVErrCode;
    /// Method to set player media key system info callback.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance
    ///
    /// * `callback` - object pointer.
    ///
    /// # Returns
    ///
    /// * [`AV_ERR_OK`] 0 - Success
    /// [`AV_ERR_OPERATE_NOT_PERMIT`] 2 - If the demuxer engine is not inited or init failed.
    /// [`AV_ERR_INVALID_VAL`] 3 - If the demuxer instance is nullptr or invalid.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_AVDemuxer_SetDemuxerMediaKeySystemInfoCallback(
        demuxer: *mut OH_AVDemuxer,
        callback: Demuxer_MediaKeySystemInfoCallback,
    ) -> OH_AVErrCode;
    /// Obtains media key system info to create media key session.
    ///
    /// Required System Capabilities: SystemCapability.Multimedia.Media.Spliter
    /// # Arguments
    ///
    /// * `demuxer` - Pointer to an OH_AVDemuxer instance
    ///
    /// * `mediaKeySystemInfo` - Indicates the media key system info which ram space allocated by callee and
    /// released by caller.
    ///
    /// # Returns
    ///
    /// * [`AV_ERR_OK`] 0 - Success
    /// [`AV_ERR_OPERATE_NOT_PERMIT`] 2 - If the demuxer engine is not inited or init failed.
    /// [`AV_ERR_INVALID_VAL`] 3 - If the demuxer instance is nullptr or invalid
    /// or the mediaKeySystemInfo is nullptr.
    ///
    /// Available since API-level: 11
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_AVDemuxer_GetMediaKeySystemInfo(
        demuxer: *mut OH_AVDemuxer,
        mediaKeySystemInfo: *mut DRM_MediaKeySystemInfo,
    ) -> OH_AVErrCode;
}
