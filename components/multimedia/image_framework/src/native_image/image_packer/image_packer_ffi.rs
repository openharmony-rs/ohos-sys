/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_image::common::*;

/** @brief Define a ImagePacker struct type, used for ImagePacker pointer controls.

@since 12*/
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_ImagePackerNative {
    _unused: [u8; 0],
}
/** @brief Defines the image packing options.

@since 12*/
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_PackingOptions {
    _unused: [u8; 0],
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl IMAGE_PACKER_DYNAMIC_RANGE {
    pub const IMAGE_PACKER_DYNAMIC_RANGE_AUTO: IMAGE_PACKER_DYNAMIC_RANGE =
        IMAGE_PACKER_DYNAMIC_RANGE(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl IMAGE_PACKER_DYNAMIC_RANGE {
    pub const IMAGE_PACKER_DYNAMIC_RANGE_SDR: IMAGE_PACKER_DYNAMIC_RANGE =
        IMAGE_PACKER_DYNAMIC_RANGE(1);
}
#[repr(transparent)]
/** @brief Enumerates packing dynamic range.

@since 12*/
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct IMAGE_PACKER_DYNAMIC_RANGE(pub ::core::ffi::c_uint);
extern "C" {
    /** @brief Create a pointer for PackingOptions struct.

    @param options The PackingOptions pointer will be operated.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_Create(options: *mut *mut OH_PackingOptions) -> Image_ErrorCode;
    /** @brief Get mime type for OH_PackingOptions struct.

    @param options The OH_PackingOptions pointer will be operated.
    @param format the number of image format.The user can pass in a null pointer and zero size, we will allocate memory,
    but user must free memory after use.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_GetMimeType(
        options: *mut OH_PackingOptions,
        format: *mut Image_MimeType,
    ) -> Image_ErrorCode;
    /** @brief Set format number for OH_PackingOptions struct.

    @param options The OH_PackingOptions pointer will be operated.
    @param format the number of image format.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_SetMimeType(
        options: *mut OH_PackingOptions,
        format: *mut Image_MimeType,
    ) -> Image_ErrorCode;
    /** @brief Get quality for OH_PackingOptions struct.

    @param options The OH_PackingOptions pointer will be operated.
    @param quality The number of image quality.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_GetQuality(
        options: *mut OH_PackingOptions,
        quality: *mut u32,
    ) -> Image_ErrorCode;
    /** @brief Set quality number for OH_PackingOptions struct.

    @param options The OH_PackingOptions pointer will be operated.
    @param quality The number of image quality.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_SetQuality(
        options: *mut OH_PackingOptions,
        quality: u32,
    ) -> Image_ErrorCode;
    /** @brief Get needsPackProperties for OH_PackingOptions struct.

    @param options The OH_PackingOptions pointer will be operated.
    @param needsPackProperties Whether the image properties can be saved, like Exif.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_GetNeedsPackProperties(
        options: *mut OH_PackingOptions,
        needsPackProperties: *mut bool,
    ) -> Image_ErrorCode;
    /** @brief Set needsPackProperties for OH_PackingOptions struct.

    @param options The OH_PackingOptions pointer will be operated.
    @param needsPackProperties Whether the image properties can be saved, like Exif.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_SetNeedsPackProperties(
        options: *mut OH_PackingOptions,
        needsPackProperties: bool,
    ) -> Image_ErrorCode;
    /** @brief Get desiredDynamicRange for PackingOptions struct.

    @param options The PackingOptions pointer will be operated. Pointer connot be null.
    @param desiredDynamicRange The number of dynamic range {@link IMAGE_PACKER_DYNAMIC_RANGE}. Pointer connot be null.
    @return Returns {@link Image_ErrorCode} IMAGE_SUCCESS - The operation is successful.
    returns {@link Image_ErrorCode} IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_GetDesiredDynamicRange(
        options: *mut OH_PackingOptions,
        desiredDynamicRange: *mut i32,
    ) -> Image_ErrorCode;
    /** @brief Set desiredDynamicRange number for PackingOptions struct.

    @param options The PackingOptions pointer will be operated. Pointer connot be null.
    @param desiredDynamicRange The number of dynamic range {@link IMAGE_PACKER_DYNAMIC_RANGE}.
    @return Returns {@link Image_ErrorCode} IMAGE_SUCCESS - The operation is successful.
    returns {@link Image_ErrorCode} IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_SetDesiredDynamicRange(
        options: *mut OH_PackingOptions,
        desiredDynamicRange: i32,
    ) -> Image_ErrorCode;
    /** @brief delete OH_PackingOptions pointer.

    @param options The OH_PackingOptions pointer will be operated.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PackingOptions_Release(options: *mut OH_PackingOptions) -> Image_ErrorCode;
    /** @brief Create a pointer for OH_ImagePackerNative struct.

    @param options The OH_ImagePackerNative pointer will be operated.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImagePackerNative_Create(
        imagePacker: *mut *mut OH_ImagePackerNative,
    ) -> Image_ErrorCode;
    /** @brief Releases an imagePacker object.

    @param imagePacker A pointer to the image packer object to be released.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImagePackerNative_Release(imagePacker: *mut OH_ImagePackerNative) -> Image_ErrorCode;
}
