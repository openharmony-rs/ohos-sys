// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_image::common::*;
use ohos_sys_opaque_types::{
    napi_env, napi_value, OH_NativeBuffer, OH_NativeColorSpaceManager, OH_PixelmapNative,
};

#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl PIXELMAP_ALPHA_TYPE {
    pub const PIXELMAP_ALPHA_TYPE_UNKNOWN: PIXELMAP_ALPHA_TYPE = PIXELMAP_ALPHA_TYPE(0);
    pub const PIXELMAP_ALPHA_TYPE_OPAQUE: PIXELMAP_ALPHA_TYPE = PIXELMAP_ALPHA_TYPE(1);
    pub const PIXELMAP_ALPHA_TYPE_PREMULTIPLIED: PIXELMAP_ALPHA_TYPE = PIXELMAP_ALPHA_TYPE(2);
    pub const PIXELMAP_ALPHA_TYPE_UNPREMULTIPLIED: PIXELMAP_ALPHA_TYPE = PIXELMAP_ALPHA_TYPE(3);
}
#[repr(transparent)]
/// Define a pixelmap alpha type.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct PIXELMAP_ALPHA_TYPE(pub ::core::ffi::c_uint);
impl PIXEL_FORMAT {
    pub const PIXEL_FORMAT_UNKNOWN: PIXEL_FORMAT = PIXEL_FORMAT(0);
    pub const PIXEL_FORMAT_RGB_565: PIXEL_FORMAT = PIXEL_FORMAT(2);
    pub const PIXEL_FORMAT_RGBA_8888: PIXEL_FORMAT = PIXEL_FORMAT(3);
    pub const PIXEL_FORMAT_BGRA_8888: PIXEL_FORMAT = PIXEL_FORMAT(4);
    pub const PIXEL_FORMAT_RGB_888: PIXEL_FORMAT = PIXEL_FORMAT(5);
    pub const PIXEL_FORMAT_ALPHA_8: PIXEL_FORMAT = PIXEL_FORMAT(6);
    pub const PIXEL_FORMAT_RGBA_F16: PIXEL_FORMAT = PIXEL_FORMAT(7);
    pub const PIXEL_FORMAT_NV21: PIXEL_FORMAT = PIXEL_FORMAT(8);
    pub const PIXEL_FORMAT_NV12: PIXEL_FORMAT = PIXEL_FORMAT(9);
    pub const PIXEL_FORMAT_RGBA_1010102: PIXEL_FORMAT = PIXEL_FORMAT(10);
    pub const PIXEL_FORMAT_YCBCR_P010: PIXEL_FORMAT = PIXEL_FORMAT(11);
    pub const PIXEL_FORMAT_YCRCB_P010: PIXEL_FORMAT = PIXEL_FORMAT(12);
}
#[repr(transparent)]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct PIXEL_FORMAT(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_PixelmapNative_AntiAliasingLevel {
    /// Nearest-neighbor interpolation algorithm
    pub const OH_PixelmapNative_AntiAliasing_NONE: OH_PixelmapNative_AntiAliasingLevel =
        OH_PixelmapNative_AntiAliasingLevel(0);
    /// Bilinear interpolation algorithm
    pub const OH_PixelmapNative_AntiAliasing_LOW: OH_PixelmapNative_AntiAliasingLevel =
        OH_PixelmapNative_AntiAliasingLevel(1);
    /// Bilinear interpolation algorithm with mipmap linear filtering
    pub const OH_PixelmapNative_AntiAliasing_MEDIUM: OH_PixelmapNative_AntiAliasingLevel =
        OH_PixelmapNative_AntiAliasingLevel(2);
    /// Cubic interpolation algorithm
    pub const OH_PixelmapNative_AntiAliasing_HIGH: OH_PixelmapNative_AntiAliasingLevel =
        OH_PixelmapNative_AntiAliasingLevel(3);
}
#[repr(transparent)]
/// Defines the anti-aliasing level.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OH_PixelmapNative_AntiAliasingLevel(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Pixelmap_HdrMetadataKey {
    /// Indicate the types of metadata that image needs to use.
    pub const HDR_METADATA_TYPE: OH_Pixelmap_HdrMetadataKey = OH_Pixelmap_HdrMetadataKey(0);
    /// Static metadata key.
    pub const HDR_STATIC_METADATA: OH_Pixelmap_HdrMetadataKey = OH_Pixelmap_HdrMetadataKey(1);
    /// Dynamic metadata key.
    pub const HDR_DYNAMIC_METADATA: OH_Pixelmap_HdrMetadataKey = OH_Pixelmap_HdrMetadataKey(2);
    /// Gainmap metadata key.
    pub const HDR_GAINMAP_METADATA: OH_Pixelmap_HdrMetadataKey = OH_Pixelmap_HdrMetadataKey(3);
}
#[repr(transparent)]
/// Enumerates the HDR metadata types that need to be stored in Pixelmap.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OH_Pixelmap_HdrMetadataKey(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_Pixelmap_HdrMetadataType {
    /// No metadata.
    pub const HDR_METADATA_TYPE_NONE: OH_Pixelmap_HdrMetadataType = OH_Pixelmap_HdrMetadataType(0);
    /// Indicates that metadata will be used for the base image.
    pub const HDR_METADATA_TYPE_BASE: OH_Pixelmap_HdrMetadataType = OH_Pixelmap_HdrMetadataType(1);
    /// Indicates that metadata will be used for the gainmap image.
    pub const HDR_METADATA_TYPE_GAINMAP: OH_Pixelmap_HdrMetadataType =
        OH_Pixelmap_HdrMetadataType(2);
    /// Indicates that metadata will be used for the alternate image.
    pub const HDR_METADATA_TYPE_ALTERNATE: OH_Pixelmap_HdrMetadataType =
        OH_Pixelmap_HdrMetadataType(3);
}
#[repr(transparent)]
/// Value for HDR_METADATA_TYPE.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OH_Pixelmap_HdrMetadataType(pub ::core::ffi::c_uint);
/// Value for HDR_STATIC_METADATA.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_Pixelmap_HdrStaticMetadata {
    /// The X-coordinate of the primary colors. The length of the array is three. Store in the order of r, g, b.
    pub displayPrimariesX: [f32; 3usize],
    /// The Y-coordinate of the primary colors. The length of the array is three. Store in the order of r, g, b.
    pub displayPrimariesY: [f32; 3usize],
    /// The X-coordinate of the white point value.
    pub whitePointX: f32,
    /// The Y-coordinate of the white point value.
    pub whitePointY: f32,
    /// Max luminance.
    pub maxLuminance: f32,
    /// Min luminance.
    pub minLuminance: f32,
    /// Maximum brightness of displayed content.
    pub maxContentLightLevel: f32,
    /// Maximum average brightness of displayed content.
    pub maxFrameAverageLightLevel: f32,
}
/// Value for HDR_DYNAMIC_METADATA.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_Pixelmap_HdrDynamicMetadata {
    /// The value of dynamic metadata.
    pub data: *mut u8,
    /// The length of dynamic metadata.
    pub length: u32,
}
/// Value for HDR_GAINMAP_METADATA.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_Pixelmap_HdrGainmapMetadata {
    /// The version used by the writer.
    pub writerVersion: u16,
    /// The minimum version a parser needs to understand.
    pub miniVersion: u16,
    /// The number of gain map channels, with a value of 1 or 3.
    pub gainmapChannelNum: u8,
    /// Indicate whether to use the color space of the base image.
    pub useBaseColorFlag: bool,
    /// The baseline hdr headroom.
    pub baseHeadroom: f32,
    /// The alternate hdr headroom.
    pub alternateHeadroom: f32,
    /// The per-component max gain map values.
    pub gainmapMax: [f32; 3usize],
    /// The per-component min gain map values.
    pub gainmapMin: [f32; 3usize],
    /// The per-component gamma values.
    pub gamma: [f32; 3usize],
    /// The per-component baseline offset.
    pub baselineOffset: [f32; 3usize],
    /// The per-component alternate offset.
    pub alternateOffset: [f32; 3usize],
}
/// Value for HDR_METADATA_KEY. Corresponding relationship with HDR_METADATA_KEY.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_Pixelmap_HdrMetadataValue {
    /// The value corresponding to the HDR_METADATA_TYPE key
    pub type_: OH_Pixelmap_HdrMetadataType,
    /// The value corresponding to the HDR_STATIC_METADATA key
    pub staticMetadata: OH_Pixelmap_HdrStaticMetadata,
    /// The value corresponding to the HDR_DYNAMIC_METADATA key
    pub dynamicMetadata: OH_Pixelmap_HdrDynamicMetadata,
    /// The value corresponding to the HDR_GAINMAP_METADATA key
    pub gainmapMetadata: OH_Pixelmap_HdrGainmapMetadata,
}
/// Defines the options used for creating a pixel map.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_Pixelmap_InitializationOptions {
    _unused: [u8; 0],
}
/// Defines the pixel map information.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_Pixelmap_ImageInfo {
    _unused: [u8; 0],
}
extern "C" {
    /// Create a for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_Create(
        options: *mut *mut OH_Pixelmap_InitializationOptions,
    ) -> ImageResult;
    /// Get width number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `width` - the number of image width.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_GetWidth(
        options: *mut OH_Pixelmap_InitializationOptions,
        width: *mut u32,
    ) -> ImageResult;
    /// Set width number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `width` - the number of image width.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_SetWidth(
        options: *mut OH_Pixelmap_InitializationOptions,
        width: u32,
    ) -> ImageResult;
    /// Get height number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `height` - the number of image height.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_GetHeight(
        options: *mut OH_Pixelmap_InitializationOptions,
        height: *mut u32,
    ) -> ImageResult;
    /// Set height number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `height` - the number of image height.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_SetHeight(
        options: *mut OH_Pixelmap_InitializationOptions,
        height: u32,
    ) -> ImageResult;
    /// Get pixelFormat number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `pixelFormat` - the number of image pixelFormat.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_GetPixelFormat(
        options: *mut OH_Pixelmap_InitializationOptions,
        pixelFormat: *mut i32,
    ) -> ImageResult;
    /// Set pixelFormat number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `pixelFormat` - the number of image pixelFormat.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_SetPixelFormat(
        options: *mut OH_Pixelmap_InitializationOptions,
        pixelFormat: i32,
    ) -> ImageResult;
    /// Get pixelFormat number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `srcpixelFormat` - the number of image srcpixelFormat.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_GetSrcPixelFormat(
        options: *mut OH_Pixelmap_InitializationOptions,
        srcpixelFormat: *mut i32,
    ) -> ImageResult;
    /// Set pixelFormat number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `srcpixelFormat` - the number of image srcpixelFormat.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_SetSrcPixelFormat(
        options: *mut OH_Pixelmap_InitializationOptions,
        srcpixelFormat: i32,
    ) -> ImageResult;
    /// Get rowStride for InitializationOptions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOptions pointer will be operated.
    ///
    /// * `rowStride` - the rowStride of image buffer.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_SUCCESS - if the operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - if rowStride is null.
    /// returns [`Image_ErrorCode`] IMAGE_UNKNOWN_ERROR - inner unknown error, maybe options is released.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_GetRowStride(
        options: *mut OH_Pixelmap_InitializationOptions,
        rowStride: *mut i32,
    ) -> ImageResult;
    /// Set rowStride number for InitializationOptions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOptions pointer will be operated.
    ///
    /// * `rowStride` - the rowStride of image buffer.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_SUCCESS - if the operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - if rowStride does not match width.
    /// returns [`Image_ErrorCode`] IMAGE_UNKNOWN_ERROR - inner unknown error, maybe options is released.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_SetRowStride(
        options: *mut OH_Pixelmap_InitializationOptions,
        rowStride: i32,
    ) -> ImageResult;
    /// Get alphaType number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `alphaType` - the number of image alphaType.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_GetAlphaType(
        options: *mut OH_Pixelmap_InitializationOptions,
        alphaType: *mut i32,
    ) -> ImageResult;
    /// Set alphaType number for InitializationOtions struct.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// * `alphaType` - the number of image alphaType.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_SetAlphaType(
        options: *mut OH_Pixelmap_InitializationOptions,
        alphaType: i32,
    ) -> ImageResult;
    /// delete InitializationOtions pointer.
    ///
    /// # Arguments
    ///
    /// * `options` - The InitializationOtions pointer will be operated.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapInitializationOptions_Release(
        options: *mut OH_Pixelmap_InitializationOptions,
    ) -> ImageResult;
    /// Create imageinfo struct .
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_Create(info: *mut *mut OH_Pixelmap_ImageInfo) -> ImageResult;
    /// Get width number for imageinfo struct.
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated.
    ///
    /// * `width` - The number of imageinfo width.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_GetWidth(
        info: *mut OH_Pixelmap_ImageInfo,
        width: *mut u32,
    ) -> ImageResult;
    /// Get height number for imageinfo struct.
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated.
    ///
    /// * `height` - The number of imageinfo height.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_GetHeight(
        info: *mut OH_Pixelmap_ImageInfo,
        height: *mut u32,
    ) -> ImageResult;
    /// Get rowStride number for imageinfo struct.
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated.
    ///
    /// * `rowStride` - The number of imageinfo rowStride.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_GetRowStride(
        info: *mut OH_Pixelmap_ImageInfo,
        rowStride: *mut u32,
    ) -> ImageResult;
    /// Get pixelFormat number for imageinfo struct.
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated.
    ///
    /// * `pixelFormat` - The number of imageinfo pixelFormat.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_GetPixelFormat(
        info: *mut OH_Pixelmap_ImageInfo,
        pixelFormat: *mut i32,
    ) -> ImageResult;
    /// Get alphaType number for imageinfo struct.
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated.
    ///
    /// * `alphaType` - The number of imageinfo alphaType.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_GetAlphaType(
        info: *mut OH_Pixelmap_ImageInfo,
        alphaType: *mut i32,
    ) -> ImageResult;
    /// Get isHdr boolean for imageinfo struct.
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated. Pointer connot be null.
    ///
    /// * `isHdr` - Whether the image has a high dynamic range.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_SUCCESS - The operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_GetDynamicRange(
        info: *mut OH_Pixelmap_ImageInfo,
        isHdr: *mut bool,
    ) -> ImageResult;
    /// Delete imageinfo struct pointer.
    ///
    /// # Arguments
    ///
    /// * `info` - The imageinfo pointer will be operated.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapImageInfo_Release(info: *mut OH_Pixelmap_ImageInfo) -> ImageResult;
    /// Creates a <b>PixelMap</b> object.
    ///
    /// # Arguments
    ///
    /// * `data` - Color buffer in BGRA_8888 format.
    ///
    /// * `dataLength` - Color buffer size in BGRA_8888 format.
    ///
    /// * `options` - IPixel properties, including the alpha type, size, pixel format, and editable.
    ///
    /// * `pixelmap` - Pixelmap pointer for created.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_CreatePixelmap(
        data: *mut u8,
        dataLength: usize,
        options: *mut OH_Pixelmap_InitializationOptions,
        pixelmap: *mut *mut OH_PixelmapNative,
    ) -> ImageResult;
    /// Convert a native <b>PixelMap</b> object to <b>PixelMap</b> napi object.
    ///
    /// # Arguments
    ///
    /// * `env` - Indicates the NAPI environment pointer.
    ///
    /// * `pixelmapNative` - Indicates a pointer to the <b>PixelMap</b> object created at the native layer.
    ///
    /// * `pixelmapNapi` - the <b>PixelMap</b> pointer will be converted.
    ///
    /// # Returns
    ///
    /// * Image functions result code.
    /// [`IMAGE_SUCCESS`] if the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] pixelmapNative is nullptr
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_ConvertPixelmapNativeToNapi(
        env: napi_env,
        pixelmapNative: *mut OH_PixelmapNative,
        pixelmapNapi: *mut napi_value,
    ) -> ImageResult;
    /// Convert a <b>PixelMap</b> napi object to native <b>PixelMap</b> object.
    ///
    /// # Arguments
    ///
    /// * `env` - Indicates the NAPI environment pointer.
    ///
    /// * `pixelmapNapi` - Indicates napi <b>PixelMap</b> object.
    ///
    /// * `pixelmapNative` - Indicates native <b>PixelMap</b> pointer to created.
    ///
    /// # Returns
    ///
    /// * Image functions result code.
    /// [`IMAGE_SUCCESS`] if the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] pixelmapNative is nullptr, or pixelmapNapi is not a PixelMap
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_ConvertPixelmapNativeFromNapi(
        env: napi_env,
        pixelmapNapi: napi_value,
        pixelmapNative: *mut *mut OH_PixelmapNative,
    ) -> ImageResult;
    /// Reads data of this pixel map to an Buffer. If this pixel map is created in the BGRA_8888 format,
    /// the data read is the same as the original data.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `destination` - Buffer to which the image pixel map data will be written.
    ///
    /// * `bufferSize` - Buffer size to which the image pixel map data will be written.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_ReadPixels(
        pixelmap: *mut OH_PixelmapNative,
        destination: *mut u8,
        bufferSize: *mut usize,
    ) -> ImageResult;
    /// Reads image data in an Buffer and writes the data to a Pixelmap object.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `source` - Buffer from which the image data will be read.
    ///
    /// * `bufferSize` - Buffer size from which the image data will be read.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_WritePixels(
        pixelmap: *mut OH_PixelmapNative,
        source: *mut u8,
        bufferSize: usize,
    ) -> ImageResult;
    /// Get argb pixel buffer from pixelmap.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer to be operated.
    ///
    /// * `destination` - Buffer to which the image pixel map data will be written.
    ///
    /// * `bufferSize` - Buffer size to which the image pixel map data will be written.
    ///
    /// # Returns
    ///
    /// * Function result code:
    /// [`IMAGE_SUCCESS`] If the operation is successful.
    /// [`IMAGE_BAD_PARAMETER`] If invalid parameter, destination and bufferSize are incorrect.
    /// [`IMAGE_UNSUPPORTED_CONVERSION`] If format does not support conversion to argb or conversion failed.
    /// [`IMAGE_ALLOC_FAILED`] If device has no memory.
    /// [`IMAGE_COPY_FAILED`] If memory copy failed.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_PixelmapNative_GetArgbPixels(
        pixelmap: *mut OH_PixelmapNative,
        destination: *mut u8,
        bufferSize: *mut usize,
    ) -> ImageResult;
    /// Convert [`OH_PixelmapNative`] to standard dynamic range.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated. Pointer connot be null.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_SUCCESS - The operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    /// returns [`Image_ErrorCode`] IMAGE_UNSUPPORTED_OPERATION - Unsupported operation.Pixelmap can't be converted.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_ToSdr(pixelmap: *mut OH_PixelmapNative) -> ImageResult;
    /// Obtains pixel map information of this image.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `imageInfo` - Indicates the pointer to the image information.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_GetImageInfo(
        pixelmap: *mut OH_PixelmapNative,
        imageInfo: *mut OH_Pixelmap_ImageInfo,
    ) -> ImageResult;
    /// Sets an opacity rate for this image pixel map.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `rate` - Opacity rate to set. The value ranges from 0 to 1.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_Opacity(pixelmap: *mut OH_PixelmapNative, rate: f32) -> ImageResult;
    /// Scales this image based on the input width and height.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `scaleX` - Scaling ratio of the width.
    ///
    /// * `scaleY` - Scaling ratio of the height.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_Scale(
        pixelmap: *mut OH_PixelmapNative,
        scaleX: f32,
        scaleY: f32,
    ) -> ImageResult;
    /// Scales this image based on the input width and height with anti-aliasing.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `scaleX` - Scaling ratio of the width.
    ///
    /// * `scaleY` - Scaling ratio of the height.
    ///
    /// * `level` - The anti-aliasing algorithm to be used.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_SUCCESS - if the operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - if invalid parameter, x and y are incorrect.
    /// returns [`Image_ErrorCode`] IMAGE_TOO_LARGE - if image is too large.
    /// returns [`Image_ErrorCode`] IMAGE_ALLOC_FAILED - if device has no memory.
    /// returns [`Image_ErrorCode`] IMAGE_UNKNOWN_ERROR - inner unknown error, maybe source pixelmap is released.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_ScaleWithAntiAliasing(
        pixelmap: *mut OH_PixelmapNative,
        scaleX: f32,
        scaleY: f32,
        level: OH_PixelmapNative_AntiAliasingLevel,
    ) -> ImageResult;
    /// Translates this image based on the input coordinates.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `x` - The distance to be translate in the X direction.
    ///
    /// * `y` - The distance to be translate in the Y direction.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_Translate(
        pixelmap: *mut OH_PixelmapNative,
        x: f32,
        y: f32,
    ) -> ImageResult;
    /// Rotates this image based on the input angle.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `angle` - Angle to rotate.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_Rotate(pixelmap: *mut OH_PixelmapNative, angle: f32) -> ImageResult;
    /// Flips this image horizontally or vertically, or both.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `shouldFilpHorizontally` - Whether to flip the image horizontally.
    ///
    /// * `shouldFilpVertically` - Whether to flip the image vertically.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_Flip(
        pixelmap: *mut OH_PixelmapNative,
        shouldFilpHorizontally: bool,
        shouldFilpVertically: bool,
    ) -> ImageResult;
    /// Crops this image based on the input size.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// * `region` - Area size, read according to area.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_Crop(
        pixelmap: *mut OH_PixelmapNative,
        region: *mut Image_Region,
    ) -> ImageResult;
    /// Releases an <b>OH_Pixelmap</b> object.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer will be operated.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_Release(pixelmap: *mut OH_PixelmapNative) -> ImageResult;
    /// Converting images to alpha format
    ///
    /// # Arguments
    ///
    /// * `srcpixelmap` - The source pixel map pointer will be operated.
    ///
    /// * `dstpixelmap` - The destination pixel map pointer will be operated.
    ///
    /// * `isPremul` - Whether it is pre-multiplied, true for prediction, false for non-pre-multiplied.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_ConvertAlphaFormat(
        srcpixelmap: *mut OH_PixelmapNative,
        dstpixelmap: *mut OH_PixelmapNative,
        isPremul: bool,
    ) -> ImageResult;
    /// Create a empty <b>PixelMap</b> object.
    ///
    /// # Arguments
    ///
    /// * `options` - IPixel properties, including the alpha type, size, pixel format, and editable.
    ///
    /// * `pixelmap` - Pixelmap pointer for created.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_CreateEmptyPixelmap(
        options: *mut OH_Pixelmap_InitializationOptions,
        pixelmap: *mut *mut OH_PixelmapNative,
    ) -> ImageResult;
    /// Get metadata.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer to be operated.
    ///
    /// * `key` - Type of metadata.
    ///
    /// * `value` - Value of metadata.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_SUCCESS - if the operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - if invalid parameter, key and value are incorrect.
    /// returns [`Image_ErrorCode`] IMAGE_DMA_NOT_EXIST - if DMA memory does not exist.
    /// returns [`Image_ErrorCode`] IMAGE_COPY_FAILED - if memory copy failed.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_GetMetadata(
        pixelmap: *mut OH_PixelmapNative,
        key: OH_Pixelmap_HdrMetadataKey,
        value: *mut *mut OH_Pixelmap_HdrMetadataValue,
    ) -> ImageResult;
    /// Set metadata.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer to be operated.
    ///
    /// * `key` - Type of metadata.
    ///
    /// * `value` - Value of metadata.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_SUCCESS - if the operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - if invalid parameter, key and value are incorrect.
    /// returns [`Image_ErrorCode`] IMAGE_DMA_NOT_EXIST - if DMA memory does not exist.
    /// returns [`Image_ErrorCode`] IMAGE_COPY_FAILED - if memory copy failed.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_SetMetadata(
        pixelmap: *mut OH_PixelmapNative,
        key: OH_Pixelmap_HdrMetadataKey,
        value: *mut OH_Pixelmap_HdrMetadataValue,
    ) -> ImageResult;
    /// Get the native buffer from the PixelMap.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The PixelMap to get the native buffer from.
    ///
    /// * `nativeBuffer` - The native buffer to retrieve.
    ///
    /// # Returns
    ///
    /// * Returns [`Image_ErrorCode`] IMAGE_RESULT_SUCCESS - if the operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - if invalid parameter, pixelmap or nativeBuffer is null.
    /// returns [`Image_ErrorCode`] IMAGE_DMA_NOT_EXIST - if DMA memory dose not exist.
    /// returns [`Image_ErrorCode`] IMAGE_DMA_OPERATION_FAILED - if operations related to DMA memory has failed.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_PixelmapNative_GetNativeBuffer(
        pixelmap: *mut OH_PixelmapNative,
        nativeBuffer: *mut *mut OH_NativeBuffer,
    ) -> ImageResult;
    /// Get the native colorspace from the PixelMap.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The native pixelmap to get the native colorspace from.
    ///
    /// * `colorSpaceNative` - The native colorspace to retrieve.
    ///
    /// # Returns
    ///
    /// * Function result code:
    /// [`IMAGE_SUCCESS`] If the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] The param of pixelmap or colorSpaceNative is nullptr or invalid.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_PixelmapNative_GetColorSpaceNative(
        pixelmap: *mut OH_PixelmapNative,
        colorSpaceNative: *mut *mut OH_NativeColorSpaceManager,
    ) -> ImageResult;
    /// Set the native colorspace for the PixelMap.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The native pixelmap to set the native colorspace for.
    ///
    /// * `colorSpaceNative` - The native colorspace to set.
    ///
    /// # Returns
    ///
    /// * Function result code:
    /// [`IMAGE_SUCCESS`] If the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] The param of pixelmap or colorSpaceNative is nullptr or invalid.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_PixelmapNative_SetColorSpaceNative(
        pixelmap: *mut OH_PixelmapNative,
        colorSpaceNative: *mut OH_NativeColorSpaceManager,
    ) -> ImageResult;
    /// Set pixelmap memory name.
    ///
    /// # Arguments
    ///
    /// * `pixelmap` - The Pixelmap pointer to be operated.
    ///
    /// * `name` - The pointer of name that needs to be set.
    ///
    /// * `size` - The size of name size that needs to be set.
    ///
    /// # Returns
    ///
    /// * Function result code:
    /// [`IMAGE_SUCCESS`] If the operation is successful.
    /// [`IMAGE_BAD_PARAMETER`] If invalid parameter, name and size are incorrect.
    /// [`IMAGE_UNSUPPORTED_MEMORY_FORMAT`] If memory format is unsupported.
    /// [`OH_PixelmapNative`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_PixelmapNative_SetMemoryName(
        pixelmap: *mut OH_PixelmapNative,
        name: *mut ::core::ffi::c_char,
        size: *mut usize,
    ) -> ImageResult;
}
