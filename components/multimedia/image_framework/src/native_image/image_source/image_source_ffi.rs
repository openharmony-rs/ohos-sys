// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_image::common::*;
#[cfg(feature = "api-13")]
use crate::native_image::picture::{Image_AuxiliaryPictureType, OH_PictureNative};
use ohos_sys_opaque_types::OH_PixelmapNative;

/// Defines an image source object for the image interface.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_ImageSourceNative {
    _unused: [u8; 0],
}
/// Defines image source infomation
/// [`OH_ImageSourceInfo_Create`].
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_ImageSource_Info {
    _unused: [u8; 0],
}
/// Defines decoding options for picture
/// [`OH_DecodingOptionsForPicture_Create`].
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
pub struct OH_DecodingOptionsForPicture {
    _unused: [u8; 0],
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl IMAGE_DYNAMIC_RANGE {
    pub const IMAGE_DYNAMIC_RANGE_AUTO: IMAGE_DYNAMIC_RANGE = IMAGE_DYNAMIC_RANGE(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl IMAGE_DYNAMIC_RANGE {
    pub const IMAGE_DYNAMIC_RANGE_SDR: IMAGE_DYNAMIC_RANGE = IMAGE_DYNAMIC_RANGE(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl IMAGE_DYNAMIC_RANGE {
    pub const IMAGE_DYNAMIC_RANGE_HDR: IMAGE_DYNAMIC_RANGE = IMAGE_DYNAMIC_RANGE(2);
}
#[repr(transparent)]
/// Enumerates decoding dynamic range..
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct IMAGE_DYNAMIC_RANGE(pub ::core::ffi::c_uint);
/// Defines the options for decoding the image source.
/// It is used in [`OH_ImageSourceNative_CreatePixelmap`].
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct OH_DecodingOptions {
    _unused: [u8; 0],
}
extern "C" {
    /// Create a pointer for OH_ImageSource_Info struct.
    ///
    /// # Arguments
    ///
    /// `info` - The OH_ImageSource_Info pointer will be operated.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceInfo_Create(info: *mut *mut OH_ImageSource_Info) -> Image_ErrorCode;
    /// Get width number for OH_ImageSource_Info struct.
    ///
    /// # Arguments
    ///
    /// `info` - The OH_ImageSource_Info pointer will be operated.
    ///
    /// `width` - the number of image width.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceInfo_GetWidth(
        info: *mut OH_ImageSource_Info,
        width: *mut u32,
    ) -> Image_ErrorCode;
    /// Get height number for OH_ImageSource_Info struct.
    ///
    /// # Arguments
    ///
    /// `info` - The OH_ImageSource_Info pointer will be operated.
    ///
    /// `height` - the number of image height.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceInfo_GetHeight(
        info: *mut OH_ImageSource_Info,
        height: *mut u32,
    ) -> Image_ErrorCode;
    /// Get isHdr for OH_ImageSource_Info struct.
    ///
    /// # Arguments
    ///
    /// `info` - The OH_ImageSource_Info pointer will be operated. Pointer connot be null.
    ///
    /// `isHdr` - Whether the image has a high dynamic range.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`] IMAGE_SUCCESS - The operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceInfo_GetDynamicRange(
        info: *mut OH_ImageSource_Info,
        isHdr: *mut bool,
    ) -> Image_ErrorCode;
    /// delete OH_ImageSource_Info pointer.
    ///
    /// # Arguments
    ///
    /// `info` - The OH_ImageSource_Info pointer will be operated.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceInfo_Release(info: *mut OH_ImageSource_Info) -> Image_ErrorCode;
    /// Create a pointer for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_Create(options: *mut *mut OH_DecodingOptions) -> Image_ErrorCode;
    /// Get pixelFormat number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `pixelFormat` - the number of image pixelFormat.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_GetPixelFormat(
        options: *mut OH_DecodingOptions,
        pixelFormat: *mut i32,
    ) -> Image_ErrorCode;
    /// Set pixelFormat number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `pixelFormat` - the number of image pixelFormat.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_SetPixelFormat(
        options: *mut OH_DecodingOptions,
        pixelFormat: i32,
    ) -> Image_ErrorCode;
    /// Get index number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `index` - the number of image index.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_GetIndex(
        options: *mut OH_DecodingOptions,
        index: *mut u32,
    ) -> Image_ErrorCode;
    /// Set index number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `index` - the number of image index.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_SetIndex(
        options: *mut OH_DecodingOptions,
        index: u32,
    ) -> Image_ErrorCode;
    /// Get rotate number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `rotate` - the number of image rotate.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_GetRotate(
        options: *mut OH_DecodingOptions,
        rotate: *mut f32,
    ) -> Image_ErrorCode;
    /// Set rotate number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `rotate` - the number of image rotate.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_SetRotate(
        options: *mut OH_DecodingOptions,
        rotate: f32,
    ) -> Image_ErrorCode;
    /// Get desiredSize number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `desiredSize` - the number of image desiredSize.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_GetDesiredSize(
        options: *mut OH_DecodingOptions,
        desiredSize: *mut Image_Size,
    ) -> Image_ErrorCode;
    /// Set desiredSize number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `desiredSize` - the number of image desiredSize.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_SetDesiredSize(
        options: *mut OH_DecodingOptions,
        desiredSize: *mut Image_Size,
    ) -> Image_ErrorCode;
    /// Set desiredRegion number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `desiredRegion` - the number of image desiredRegion.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_GetDesiredRegion(
        options: *mut OH_DecodingOptions,
        desiredRegion: *mut Image_Region,
    ) -> Image_ErrorCode;
    /// Set desiredRegion number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// `desiredRegion` - the number of image desiredRegion.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_SetDesiredRegion(
        options: *mut OH_DecodingOptions,
        desiredRegion: *mut Image_Region,
    ) -> Image_ErrorCode;
    /// Set desiredDynamicRange number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated. Pointer connot be null.
    ///
    /// `desiredDynamicRange` - the number of desired dynamic range [`IMAGE_DYNAMIC_RANGE`]. Pointer connot be null.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`] IMAGE_SUCCESS - The operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_GetDesiredDynamicRange(
        options: *mut OH_DecodingOptions,
        desiredDynamicRange: *mut i32,
    ) -> Image_ErrorCode;
    /// Set desiredDynamicRange number for OH_DecodingOptions struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated. Pointer connot be null.
    ///
    /// `desiredDynamicRange` - the number of desired dynamic range [`IMAGE_DYNAMIC_RANGE`].
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`] IMAGE_SUCCESS - The operation is successful.
    /// returns [`Image_ErrorCode`] IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_SetDesiredDynamicRange(
        options: *mut OH_DecodingOptions,
        desiredDynamicRange: i32,
    ) -> Image_ErrorCode;
    /// delete OH_DecodingOptions pointer.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptions pointer will be operated.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_DecodingOptions_Release(options: *mut OH_DecodingOptions) -> Image_ErrorCode;
    /// Creates an ImageSource pointer.
    ///
    /// # Arguments
    ///
    /// `uri` - Indicates a pointer to the image source URI. Only a file URI or Base64 URI is accepted.
    ///
    /// `uriSize` - Indicates the length of the image source URI.
    ///
    /// `res` - Indicates a pointer to the <b>ImageSource</b> object created at the C++ native layer.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_CreateFromUri(
        uri: *mut ::core::ffi::c_char,
        uriSize: usize,
        res: *mut *mut OH_ImageSourceNative,
    ) -> Image_ErrorCode;
    /// Creates an void pointer
    ///
    /// # Arguments
    ///
    /// `fd` - Indicates the image source file descriptor.
    ///
    /// `res` - Indicates a void pointer to the <b>ImageSource</b> object created at the C++ native layer.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_CreateFromFd(
        fd: i32,
        res: *mut *mut OH_ImageSourceNative,
    ) -> Image_ErrorCode;
    /// Creates an void pointer
    ///
    /// # Arguments
    ///
    /// `data` - Indicates a pointer to the image source data. Only a formatted packet data or Base64 data is accepted.
    ///
    /// `dataSize` - Indicates the size of the image source data.
    ///
    /// `res` - Indicates a void pointer to the <b>ImageSource</b> object created at the C++ native layer.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_CreateFromData(
        data: *mut u8,
        dataSize: usize,
        res: *mut *mut OH_ImageSourceNative,
    ) -> Image_ErrorCode;
    /// Decodes an void pointer
    /// based on the specified [`OH_DecodingOptions`] struct.
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a void pointer(from ImageSource pointer convert).
    ///
    /// `options` - Indicates a pointer to the options for decoding the image source.
    /// For details, see [`OH_DecodingOptions`].
    ///
    /// `resPixMap` - Indicates a void pointer to the <b>Pixelmap</b> object obtained at the C++ native layer.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_CreatePixelmap(
        source: *mut OH_ImageSourceNative,
        options: *mut OH_DecodingOptions,
        pixelmap: *mut *mut OH_PixelmapNative,
    ) -> Image_ErrorCode;
    /// Decodes an void pointer
    /// the <b>Pixelmap</b> objects at the C++ native layer
    /// based on the specified [`OH_DecodingOptions`] struct.
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a void pointer(from ImageSource pointer convert).
    ///
    /// `options` - Indicates a pointer to the options for decoding the image source.
    /// For details, see [`OH_DecodingOptions`].
    ///
    /// `resVecPixMap` - Indicates a pointer array to the <b>Pixelmap</b> objects obtained at the C++ native layer.
    /// It cannot be a null pointer.
    ///
    /// `size` - Indicates a size of resVecPixMap. User can get size from [`OH_ImageSourceNative_GetFrameCount`].
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_CreatePixelmapList(
        source: *mut OH_ImageSourceNative,
        options: *mut OH_DecodingOptions,
        resVecPixMap: *mut *mut OH_PixelmapNative,
        size: usize,
    ) -> Image_ErrorCode;
    /// Create Picture pointer from ImageSource
    /// based on the specified [`OH_DecodingOptionsForPicture`] struct.
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a void pointer(from ImageSource pointer convert).
    ///
    /// `options` - Indicates a pointer to the options for decoding the image source.
    /// For details, see [`OH_DecodingOptionsForPicture`].
    ///
    /// `picture` - Indicates a void pointer to the <b>Picture</b> object obtained at the C++ native layer.
    ///
    /// # Returns
    ///
    /// Image functions result code.
    /// [`IMAGE_SUCCESS`] if the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] source is nullptr, or picture is nullptr.
    /// [`IMAGE_DECODE_FAILED`] decode failed.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_ImageSourceNative_CreatePicture(
        source: *mut OH_ImageSourceNative,
        options: *mut OH_DecodingOptionsForPicture,
        picture: *mut *mut OH_PictureNative,
    ) -> Image_ErrorCode;
    /// Obtains the delay time list from some <b>ImageSource</b> objects (such as GIF image sources).
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a void pointer(from ImageSource pointer convert).
    ///
    /// `delayTimeList` - Indicates a pointer to the delay time list obtained. It cannot be a null pointer.
    ///
    /// `size` - Indicates a size of delayTimeList. User can get size from [`OH_ImageSourceNative_GetFrameCount`].
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_GetDelayTimeList(
        source: *mut OH_ImageSourceNative,
        delayTimeList: *mut i32,
        size: usize,
    ) -> Image_ErrorCode;
    /// Obtains image source information from an <b>ImageSource</b> object by index.
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a void pointer(from ImageSource pointer convert).
    ///
    /// `index` - Indicates the index of the frame.
    ///
    /// `info` - Indicates a pointer to the image source information obtained.
    /// For details, see [`OH_ImageSource_Info`].
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_GetImageInfo(
        source: *mut OH_ImageSourceNative,
        index: i32,
        info: *mut OH_ImageSource_Info,
    ) -> Image_ErrorCode;
    /// Obtains the value of an image property from an <b>ImageSource</b> object.
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a void pointer(from ImageSource pointer convert).
    ///
    /// `key` - Indicates a pointer to the property. For details, see [`Image_String`]., key is an exif constant.
    /// Release after use ImageSource, see [`OH_ImageSourceNative_Release`].
    ///
    /// `value` - Indicates a pointer to the value obtained.The user can pass in a null pointer and zero size,
    /// we will allocate memory, but user must free memory after use.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_GetImageProperty(
        source: *mut OH_ImageSourceNative,
        key: *mut Image_String,
        value: *mut Image_String,
    ) -> Image_ErrorCode;
    /// Modifies the value of an image property of an <b>ImageSource</b> object.
    /// # Arguments
    ///
    /// `source` - Indicates a void pointer(from ImageSource pointer convert).
    ///
    /// `key` - Indicates a pointer to the property. For details, see [`Image_String`]., key is an exif constant.
    /// Release after use ImageSource, see [`OH_ImageSourceNative_Release`].
    ///
    /// `value` - Indicates a pointer to the new value of the property.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_ModifyImageProperty(
        source: *mut OH_ImageSourceNative,
        key: *mut Image_String,
        value: *mut Image_String,
    ) -> Image_ErrorCode;
    /// Obtains the number of frames from an <b>ImageSource</b> object.
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a pointer to the [`OH_ImageSource`] object at the C++ native layer.
    ///
    /// `res` - Indicates a pointer to the number of frames obtained.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_GetFrameCount(
        source: *mut OH_ImageSourceNative,
        frameCount: *mut u32,
    ) -> Image_ErrorCode;
    /// Releases an <b>ImageSourc</b> object.
    ///
    /// # Arguments
    ///
    /// `source` - Indicates a ImageSource pointer.
    ///
    /// # Returns
    ///
    /// Returns [`Image_ErrorCode`]
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ImageSourceNative_Release(source: *mut OH_ImageSourceNative) -> Image_ErrorCode;
    /// Create a pointer for OH_DecodingOptionsForPicture struct.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptionsForPicture pointer will be operated.
    ///
    /// # Returns
    ///
    /// Image functions result code.
    /// [`IMAGE_SUCCESS`] if the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] options is nullptr.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_DecodingOptionsForPicture_Create(
        options: *mut *mut OH_DecodingOptionsForPicture,
    ) -> Image_ErrorCode;
    /// Obtains the desired auxiliary pictures of decoding options.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptionsForPicture pointer will be operated.
    ///
    /// `desiredAuxiliaryPictures` - The desired auxiliary pictures in DecodingOptionsForPicture.
    ///
    /// `length` - The length of desired auxiliary pictures.
    ///
    /// # Returns
    ///
    /// Image functions result code.
    /// [`IMAGE_SUCCESS`] if the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] options is nullptr, desiredAuxiliaryPictures is nullptr,
    /// or length is invalid.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_DecodingOptionsForPicture_GetDesiredAuxiliaryPictures(
        options: *mut OH_DecodingOptionsForPicture,
        desiredAuxiliaryPictures: *mut *mut Image_AuxiliaryPictureType,
        length: *mut usize,
    ) -> Image_ErrorCode;
    /// Set decoding options desired auxiliary pictures.
    ///
    /// # Arguments
    ///
    /// `options` - The OH_DecodingOptionsForPicture pointer will be operated.
    ///
    /// `desiredAuxiliaryPictures` - The desired auxiliary pictures will be set.
    ///
    /// `length` - The length of desired auxiliary pictures.
    ///
    /// # Returns
    ///
    /// Image functions result code.
    /// [`IMAGE_SUCCESS`] if the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] options is nullptr, desiredAuxiliaryPictures is nullptr,
    /// or length is invalid.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_DecodingOptionsForPicture_SetDesiredAuxiliaryPictures(
        options: *mut OH_DecodingOptionsForPicture,
        desiredAuxiliaryPictures: *mut Image_AuxiliaryPictureType,
        length: usize,
    ) -> Image_ErrorCode;
    /// Releases an <b>DecodingOptionsForPicture</b> object.
    ///
    /// # Arguments
    ///
    /// `options` - Indicates a DecodingOptionsForPicture pointer.
    ///
    /// # Returns
    ///
    /// Image functions result code.
    /// [`IMAGE_SUCCESS`] if the execution is successful.
    /// [`IMAGE_BAD_PARAMETER`] options is nullptr.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_DecodingOptionsForPicture_Release(
        options: *mut OH_DecodingOptionsForPicture,
    ) -> Image_ErrorCode;
}
