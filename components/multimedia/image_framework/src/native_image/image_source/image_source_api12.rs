/* automatically generated by rust-bindgen 0.70.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::native_image::common::*;

/** @brief Defines an image source object for the image interface.

@since 12*/
#[repr(C)]
pub struct OH_ImageSourceNative {
    _unused: [u8; 0],
}
/** @brief Defines image source infomation
{@link OH_ImageSourceInfo_Create}.

@since 12*/
#[repr(C)]
pub struct OH_ImageSource_Info {
    _unused: [u8; 0],
}
impl IMAGE_DYNAMIC_RANGE {
    pub const IMAGE_DYNAMIC_RANGE_AUTO: IMAGE_DYNAMIC_RANGE = IMAGE_DYNAMIC_RANGE(0);
}
impl IMAGE_DYNAMIC_RANGE {
    pub const IMAGE_DYNAMIC_RANGE_SDR: IMAGE_DYNAMIC_RANGE = IMAGE_DYNAMIC_RANGE(1);
}
impl IMAGE_DYNAMIC_RANGE {
    pub const IMAGE_DYNAMIC_RANGE_HDR: IMAGE_DYNAMIC_RANGE = IMAGE_DYNAMIC_RANGE(2);
}
#[repr(transparent)]
/** @brief Enumerates decoding dynamic range..

@since 12*/
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct IMAGE_DYNAMIC_RANGE(pub ::core::ffi::c_uint);
/** @brief Defines the options for decoding the image source.
It is used in {@link OH_ImageSourceNative_CreatePixelmap}.

@since 12*/
#[repr(C)]
pub struct OH_DecodingOptions {
    _unused: [u8; 0],
}
extern "C" {
    /** @brief Create a pointer for OH_ImageSource_Info struct.

    @param info The OH_ImageSource_Info pointer will be operated.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceInfo_Create(info: *mut *mut OH_ImageSource_Info) -> Image_ErrorCode;
    /** @brief Get width number for OH_ImageSource_Info struct.

    @param info The OH_ImageSource_Info pointer will be operated.
    @param width the number of image width.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceInfo_GetWidth(
        info: *mut OH_ImageSource_Info,
        width: *mut u32,
    ) -> Image_ErrorCode;
    /** @brief Get height number for OH_ImageSource_Info struct.

    @param info The OH_ImageSource_Info pointer will be operated.
    @param height the number of image height.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceInfo_GetHeight(
        info: *mut OH_ImageSource_Info,
        height: *mut u32,
    ) -> Image_ErrorCode;
    /** @brief Get isHdr for OH_ImageSource_Info struct.

    @param info The OH_ImageSource_Info pointer will be operated. Pointer connot be null.
    @param isHdr Whether the image has a high dynamic range.
    @return Returns {@link Image_ErrorCode} IMAGE_SUCCESS - The operation is successful.
    returns {@link Image_ErrorCode} IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    @since 12*/
    pub fn OH_ImageSourceInfo_GetDynamicRange(
        info: *mut OH_ImageSource_Info,
        isHdr: *mut bool,
    ) -> Image_ErrorCode;
    /** @brief delete OH_ImageSource_Info pointer.

    @param info The OH_ImageSource_Info pointer will be operated.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceInfo_Release(info: *mut OH_ImageSource_Info) -> Image_ErrorCode;
    /** @brief Create a pointer for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_Create(options: *mut *mut OH_DecodingOptions) -> Image_ErrorCode;
    /** @brief Get pixelFormat number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param pixelFormat the number of image pixelFormat.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_GetPixelFormat(
        options: *mut OH_DecodingOptions,
        pixelFormat: *mut i32,
    ) -> Image_ErrorCode;
    /** @brief Set pixelFormat number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param pixelFormat the number of image pixelFormat.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_SetPixelFormat(
        options: *mut OH_DecodingOptions,
        pixelFormat: i32,
    ) -> Image_ErrorCode;
    /** @brief Get index number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param index the number of image index.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_GetIndex(
        options: *mut OH_DecodingOptions,
        index: *mut u32,
    ) -> Image_ErrorCode;
    /** @brief Set index number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param index the number of image index.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_SetIndex(
        options: *mut OH_DecodingOptions,
        index: u32,
    ) -> Image_ErrorCode;
    /** @brief Get rotate number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param rotate the number of image rotate.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_GetRotate(
        options: *mut OH_DecodingOptions,
        rotate: *mut f32,
    ) -> Image_ErrorCode;
    /** @brief Set rotate number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param rotate the number of image rotate.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_SetRotate(
        options: *mut OH_DecodingOptions,
        rotate: f32,
    ) -> Image_ErrorCode;
    /** @brief Get desiredSize number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param desiredSize the number of image desiredSize.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_GetDesiredSize(
        options: *mut OH_DecodingOptions,
        desiredSize: *mut Image_Size,
    ) -> Image_ErrorCode;
    /** @brief Set desiredSize number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param desiredSize the number of image desiredSize.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_SetDesiredSize(
        options: *mut OH_DecodingOptions,
        desiredSize: *mut Image_Size,
    ) -> Image_ErrorCode;
    /** @brief Set desiredRegion number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param desiredRegion the number of image desiredRegion.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_GetDesiredRegion(
        options: *mut OH_DecodingOptions,
        desiredRegion: *mut Image_Region,
    ) -> Image_ErrorCode;
    /** @brief Set desiredRegion number for OH_DecodingOptions struct.

    @param  options The OH_DecodingOptions pointer will be operated.
    @param desiredRegion the number of image desiredRegion.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_SetDesiredRegion(
        options: *mut OH_DecodingOptions,
        desiredRegion: *mut Image_Region,
    ) -> Image_ErrorCode;
    /** @brief Set desiredDynamicRange number for OH_DecodingOptions struct.

    @param options The OH_DecodingOptions pointer will be operated. Pointer connot be null.
    @param desiredDynamicRange the number of desired dynamic range {@link IMAGE_DYNAMIC_RANGE}. Pointer connot be null.
    @return Returns {@link Image_ErrorCode} IMAGE_SUCCESS - The operation is successful.
    returns {@link Image_ErrorCode} IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    @since 12*/
    pub fn OH_DecodingOptions_GetDesiredDynamicRange(
        options: *mut OH_DecodingOptions,
        desiredDynamicRange: *mut i32,
    ) -> Image_ErrorCode;
    /** @brief Set desiredDynamicRange number for OH_DecodingOptions struct.

    @param options The OH_DecodingOptions pointer will be operated. Pointer connot be null.
    @param desiredDynamicRange the number of desired dynamic range {@link IMAGE_DYNAMIC_RANGE}.
    @return Returns {@link Image_ErrorCode} IMAGE_SUCCESS - The operation is successful.
    returns {@link Image_ErrorCode} IMAGE_BAD_PARAMETER - Parameter error.Possible causes:Parameter verification failed.
    @since 12*/
    pub fn OH_DecodingOptions_SetDesiredDynamicRange(
        options: *mut OH_DecodingOptions,
        desiredDynamicRange: i32,
    ) -> Image_ErrorCode;
    /** @brief delete OH_DecodingOptions pointer.

    @param  options The OH_DecodingOptions pointer will be operated.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_DecodingOptions_Release(options: *mut OH_DecodingOptions) -> Image_ErrorCode;
    /** @brief Creates an ImageSource pointer.

    @param uri Indicates a pointer to the image source URI. Only a file URI or Base64 URI is accepted.
    @param uriSize Indicates the length of the image source URI.
    @param res Indicates a pointer to the <b>ImageSource</b> object created at the C++ native layer.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_CreateFromUri(
        uri: *mut ::core::ffi::c_char,
        uriSize: usize,
        res: *mut *mut OH_ImageSourceNative,
    ) -> Image_ErrorCode;
    /** @brief Creates an void pointer

    @param fd Indicates the image source file descriptor.
    @param res Indicates a void pointer to the <b>ImageSource</b> object created at the C++ native layer.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_CreateFromFd(
        fd: i32,
        res: *mut *mut OH_ImageSourceNative,
    ) -> Image_ErrorCode;
    /** @brief Creates an void pointer

    @param data Indicates a pointer to the image source data. Only a formatted packet data or Base64 data is accepted.
    @param dataSize Indicates the size of the image source data.
    @param res Indicates a void pointer to the <b>ImageSource</b> object created at the C++ native layer.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_CreateFromData(
        data: *mut u8,
        dataSize: usize,
        res: *mut *mut OH_ImageSourceNative,
    ) -> Image_ErrorCode;
    /** @brief Obtains the delay time list from some <b>ImageSource</b> objects (such as GIF image sources).

    @param source Indicates a void pointer(from ImageSource pointer convert).
    @param delayTimeList Indicates a pointer to the delay time list obtained. It cannot be a null pointer.
    @param size Indicates a size of delayTimeList. User can get size from {@link OH_ImageSourceNative_GetFrameCount}.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_GetDelayTimeList(
        source: *mut OH_ImageSourceNative,
        delayTimeList: *mut i32,
        size: usize,
    ) -> Image_ErrorCode;
    /** @brief Obtains image source information from an <b>ImageSource</b> object by index.

    @param source Indicates a void pointer(from ImageSource pointer convert).
    @param index Indicates the index of the frame.
    @param info Indicates a pointer to the image source information obtained.
    For details, see {@link OH_ImageSource_Info}.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_GetImageInfo(
        source: *mut OH_ImageSourceNative,
        index: i32,
        info: *mut OH_ImageSource_Info,
    ) -> Image_ErrorCode;
    /** @brief Obtains the value of an image property from an <b>ImageSource</b> object.

    @param source Indicates a void pointer(from ImageSource pointer convert).
    @param key Indicates a pointer to the property. For details, see {@link Image_String}., key is an exif constant.
    Release after use ImageSource, see {@link OH_ImageSourceNative_Release}.
    @param value Indicates a pointer to the value obtained.The user can pass in a null pointer and zero size,
    we will allocate memory, but user must free memory after use.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_GetImageProperty(
        source: *mut OH_ImageSourceNative,
        key: *mut Image_String,
        value: *mut Image_String,
    ) -> Image_ErrorCode;
    /** @brief Modifies the value of an image property of an <b>ImageSource</b> object.
    @param source Indicates a void pointer(from ImageSource pointer convert).
    @param key Indicates a pointer to the property. For details, see {@link Image_String}., key is an exif constant.
    Release after use ImageSource, see {@link OH_ImageSourceNative_Release}.
    @param value Indicates a pointer to the new value of the property.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_ModifyImageProperty(
        source: *mut OH_ImageSourceNative,
        key: *mut Image_String,
        value: *mut Image_String,
    ) -> Image_ErrorCode;
    /** @brief Obtains the number of frames from an <b>ImageSource</b> object.

    @param source Indicates a pointer to the {@link OH_ImageSource} object at the C++ native layer.
    @param res Indicates a pointer to the number of frames obtained.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_GetFrameCount(
        source: *mut OH_ImageSourceNative,
        frameCount: *mut u32,
    ) -> Image_ErrorCode;
    /** @brief Releases an <b>ImageSourc</b> object.

    @param source Indicates a ImageSource pointer.
    @return Returns {@link Image_ErrorCode}
    @since 12*/
    pub fn OH_ImageSourceNative_Release(source: *mut OH_ImageSourceNative) -> Image_ErrorCode;
}
