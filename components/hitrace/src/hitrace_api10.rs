/* automatically generated by rust-bindgen 0.69.4 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[link(name = "hitrace_ndk.z")]
extern "C" {}

extern "C" {
    /** @brief Marks the start of a synchronous trace task.

    The <b>OH_HiTrace_StartTrace</b> and <b>OH_HiTrace_FinishTrace</b> APIs must be used in pairs.
    The two APIs can be used in nested mode. The stack data structure is used for matching during trace data parsing.

    @param name Name of a trace task.

    @syscap SystemCapability.HiviewDFX.HiTrace
    @since 10*/
    pub fn OH_HiTrace_StartTrace(name: *const ::core::ffi::c_char);
}
extern "C" {
    /** @brief Marks the end of a synchronous trace task.

    This API must be used with <b>OH_HiTrace_StartTrace</b> in pairs. During trace data parsing, the system matches
    it with the <b>OH_HiTrace_StartTrace</b> API recently invoked in the service process.

    @syscap SystemCapability.HiviewDFX.HiTrace
    @since 10*/
    pub fn OH_HiTrace_FinishTrace();
}
extern "C" {
    /** @brief Marks the start of an asynchronous trace task.

    This API is called to implement performance trace in asynchronous manner. The start and end of an asynchronous
    trace task do not occur in sequence. Therefore, a unique <b>taskId</b> is required to ensure proper data parsing.
    It is passed as an input parameter for the asynchronous API.
    This API is used with <b>OH_HiTrace_FinishAsyncTrace</b> in pairs. The two APIs that have the same name and
    task ID together form an asynchronous timeslice trace task.
    If multiple trace tasks with the same name need to be performed at the same time or a trace task needs to be
    performed multiple times concurrently, different task IDs must be specified in <b>OH_HiTrace_StartTrace</b>.
    If the trace tasks with the same name are not performed at the same time, the same taskId can be used.

    @param name Name of the asynchronous trace task.
    @param taskId ID of the asynchronous trace task. The start and end of an asynchronous trace task do not occur in
    sequence. Therefore, the start and end of an asynchronous trace need to be matched based on the task name and the
    unique task ID together.

    @syscap SystemCapability.HiviewDFX.HiTrace
    @since 10*/
    pub fn OH_HiTrace_StartAsyncTrace(name: *const ::core::ffi::c_char, taskId: i32);
}
extern "C" {
    /** @brief Marks the end of an asynchronous trace task.

    This API is called in the callback function after an asynchronous trace is complete.
    It is used with <b>OH_HiTrace_StartAsyncTrace</b> in pairs. Its name and task ID must be the same as those of
    <b>OH_HiTrace_StartAsyncTrace</b>.

    @param name Name of the asynchronous trace task.
    @param taskId ID of the asynchronous trace task. The start and end of an asynchronous trace task do not occur in
    sequence. Therefore, the start and end of an asynchronous trace need to be matched based on the task name and the
    unique task ID together.

    @syscap SystemCapability.HiviewDFX.HiTrace
    @since 10*/
    pub fn OH_HiTrace_FinishAsyncTrace(name: *const ::core::ffi::c_char, taskId: i32);
}
extern "C" {
    /** @brief Traces the value change of an integer variable based on its name.

    This API can be executed for multiple times to trace the value change of a given integer variable at different
    time points.

    @param name Name of the integer variable. It does not need to be the same as the real variable name.
    @param count Integer value. Generally, an integer variable can be passed.

    @syscap SystemCapability.HiviewDFX.HiTrace
    @since 10*/
    pub fn OH_HiTrace_CountTrace(name: *const ::core::ffi::c_char, count: i64);
}
