/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::cursor_info::InputMethod_CursorInfo;
use crate::text_avoid_info::InputMethod_TextAvoidInfo;
use crate::types::*;

#[repr(C)]
pub struct InputMethod_TextConfig {
    _unused: [u8; 0],
}
extern "C" {
    /** @brief Create a new {@link InputMethod_TextConfig} instance.

    @return If the creation succeeds, a pointer to the newly created {@link InputMethod_TextConfig}
    instance is returned. If the creation fails, NULL is returned, possible cause is insufficient memory.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_Create() -> *mut InputMethod_TextConfig;
    /** @brief Destroy a {@link InputMethod_TextConfig} instance.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be destroyed.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_Destroy(config: *mut InputMethod_TextConfig);
    /** @brief Set input type into TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be set.
    @param inputType The text input type of text Editor, which is defined in {@link InputMethod_TextInputType}.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_SetInputType(
        config: *mut InputMethod_TextConfig,
        inputType: InputMethod_TextInputType,
    ) -> InputMethod_ErrorCode;
    /** @brief Set enter key type into TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be set.
    @param enterKeyType The enter key type of text Editor, which is defined in {@link InputMethod_EnterKeyType}.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_SetEnterKeyType(
        config: *mut InputMethod_TextConfig,
        enterKeyType: InputMethod_EnterKeyType,
    ) -> InputMethod_ErrorCode;
    /** @brief Set preview text support into TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be set.
    @param supported Indicates whether the preview text is supported.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_SetPreviewTextSupport(
        config: *mut InputMethod_TextConfig,
        supported: bool,
    ) -> InputMethod_ErrorCode;
    /** @brief Set selection into TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be set.
    @param start The start position of selection.
    @param end The end position of selection.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_SetSelection(
        config: *mut InputMethod_TextConfig,
        start: i32,
        end: i32,
    ) -> InputMethod_ErrorCode;
    /** @brief Set window id into TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be set.
    @param windowId The window ID of the application currently bound to the input method.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_SetWindowId(
        config: *mut InputMethod_TextConfig,
        windowId: i32,
    ) -> InputMethod_ErrorCode;
    /** @brief Get input type from TextConfig

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be get from.
    @param inputType Represents a pointer to an {@link InputMethod_TextInputType} instance.
        The text input type of text Editor
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_GetInputType(
        config: *mut InputMethod_TextConfig,
        inputType: *mut InputMethod_TextInputType,
    ) -> InputMethod_ErrorCode;
    /** @brief Get enter key type from TextConfig

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be get from.
    @param enterKeyType Represents a pointer to an {@link InputMethod_EnterKeyType} instance.
        Indicates the enter key type of text Editor
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_GetEnterKeyType(
        config: *mut InputMethod_TextConfig,
        enterKeyType: *mut InputMethod_EnterKeyType,
    ) -> InputMethod_ErrorCode;
    /** @brief Get is preview text supported from TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be get from.
    @param supported Indicates whether the preview text is supported.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_IsPreviewTextSupported(
        config: *mut InputMethod_TextConfig,
        supported: *mut bool,
    ) -> InputMethod_ErrorCode;
    /** @brief Get cursor info from TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be get from.
    @param cursorInfo Represents a pointer to an {@link InputMethod_CursorInfo} instance.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_GetCursorInfo(
        config: *mut InputMethod_TextConfig,
        cursorInfo: *mut *mut InputMethod_CursorInfo,
    ) -> InputMethod_ErrorCode;
    /** @brief Get text avoid information from text configuration.

     @param config Indicates the text configuration.
     @param avoidInfo Indicates the text avoid information.
     @return Returns a specific error code.
         {@link IME_ERR_OK} - success.
         {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
     Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_GetTextAvoidInfo(
        config: *mut InputMethod_TextConfig,
        avoidInfo: *mut *mut InputMethod_TextAvoidInfo,
    ) -> InputMethod_ErrorCode;
    /** @brief Get selection from TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be get from.
    @param start Represents selection start position.
    @param end Represents selection end position.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_GetSelection(
        config: *mut InputMethod_TextConfig,
        start: *mut i32,
        end: *mut i32,
    ) -> InputMethod_ErrorCode;
    /** @brief Get window id from TextConfig.

    @param config Represents a pointer to an {@link InputMethod_TextConfig} instance which will be get from.
    @param windowId The window ID of the application currently bound to the input method.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextConfig_GetWindowId(
        config: *mut InputMethod_TextConfig,
        windowId: *mut i32,
    ) -> InputMethod_ErrorCode;
}
