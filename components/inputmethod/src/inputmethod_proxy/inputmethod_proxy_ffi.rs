// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[cfg(feature = "api-15")]
use crate::attach_options::InputMethod_AttachOptions;
use crate::cursor_info::InputMethod_CursorInfo;
use crate::private_command::InputMethod_PrivateCommand;
use crate::types::*;

/// Define the InputMethod_InputMethodProxy structure type.
///
/// Provides methods for controlling input method.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
pub struct InputMethod_InputMethodProxy {
    _unused: [u8; 0],
}
extern "C" {
    /// Show keyboard.
    ///
    /// # Arguments
    ///
    /// * `inputMethodProxy` - Represents a pointer to an [`InputMethod_InputMethodProxy`] instance.
    /// The inputMethodProxy is obtained from [`OH_InputMethodController_Attach`].
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_IMCLIENT`] - input method client error.
    /// [`IME_ERR_IMMS`] - input method manager service error.
    /// [`IME_ERR_DETACHED`] - input method client detached.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_InputMethodProxy_ShowKeyboard(
        inputMethodProxy: *mut InputMethod_InputMethodProxy,
    ) -> InputMethodResult;
    /// ShowTextInput.
    ///
    /// # Arguments
    ///
    /// * `inputMethodProxy` - Represents a pointer to an [`InputMethod_InputMethodProxy`] instance.
    /// The inputMethodProxy is obtained from [`OH_InputMethodController_Attach`].
    ///
    /// * `options` - Represents a pointer to an [`InputMethod_AttachOptions`] instance which will be get value from.
    /// [`ShowKeyboard`] - property is always true,can not be changed,so no need to focus on
    /// [`InputMethod_RequestKeyboardReason`] - property is the requestKeyboardReason for show keyboard
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_IMCLIENT`] - input method client error.
    /// [`IME_ERR_IMMS`] - input method manager service error.
    /// [`IME_ERR_DETACHED`] - input method client detached.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer. If inputMethodProxy is NULL, or options is NULL.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 15
    #[cfg(feature = "api-15")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-15")))]
    pub fn OH_InputMethodProxy_ShowTextInput(
        inputMethodProxy: *mut InputMethod_InputMethodProxy,
        options: *mut InputMethod_AttachOptions,
    ) -> InputMethodResult;
    /// Hide keyboard.
    ///
    /// # Arguments
    ///
    /// * `inputMethodProxy` - Represents a pointer to an [`InputMethod_InputMethodProxy`] instance.
    /// The inputMethodProxy is obtained from [`OH_InputMethodController_Attach`].
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_IMCLIENT`] - input method client error.
    /// [`IME_ERR_IMMS`] - input method manager service error.
    /// [`IME_ERR_DETACHED`] - input method client detached.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_InputMethodProxy_HideKeyboard(
        inputMethodProxy: *mut InputMethod_InputMethodProxy,
    ) -> InputMethodResult;
    /// Notify selection change.
    ///
    /// Notify selection change when text or cursor position or selected text changed.
    ///
    /// # Arguments
    ///
    /// * `inputMethodProxy` - Represents a pointer to an [`InputMethod_InputMethodProxy`] instance.
    /// The inputMethodProxy is obtained from [`OH_InputMethodController_Attach`].
    ///
    /// * `text` - The whole input text.
    ///
    /// * `length` - The length of text. Max length is 8K.
    ///
    /// * `start` - The start position of selected text.
    ///
    /// * `end` - The end position of selected text.
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_PARAMCHECK`] - parameter check failed.
    /// [`IME_ERR_IMCLIENT`] - input method client error.
    /// [`IME_ERR_IMMS`] - input method manager service error.
    /// [`IME_ERR_DETACHED`] - input method client detached.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_InputMethodProxy_NotifySelectionChange(
        inputMethodProxy: *mut InputMethod_InputMethodProxy,
        text: *mut u16,
        length: usize,
        start: ::core::ffi::c_int,
        end: ::core::ffi::c_int,
    ) -> InputMethodResult;
    /// Notify text editor configuration change.
    ///
    /// # Arguments
    ///
    /// * `inputMethodProxy` - Represents a pointer to an [`InputMethod_InputMethodProxy`] instance.
    /// The inputMethodProxy is obtained from [`OH_InputMethodController_Attach`].
    ///
    /// * `enterKey` - The enter key type.
    ///
    /// * `textType` - The text input type.
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_PARAMCHECK`] - parameter check failed.
    /// [`IME_ERR_IMCLIENT`] - input method client error.
    /// [`IME_ERR_IMMS`] - input method manager service error.
    /// [`IME_ERR_DETACHED`] - input method client detached.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_InputMethodProxy_NotifyConfigurationChange(
        inputMethodProxy: *mut InputMethod_InputMethodProxy,
        enterKey: InputMethod_EnterKeyType,
        textType: InputMethod_TextInputType,
    ) -> InputMethodResult;
    /// Notify cursor update.
    ///
    /// # Arguments
    ///
    /// * `inputMethodProxy` - Represents a pointer to an [`InputMethod_InputMethodProxy`] instance.
    /// The inputMethodProxy is obtained from [`OH_InputMethodController_Attach`].
    ///
    /// * `cursorInfo` - Represents a pointer to an [`InputMethod_CursorInfo`] instance.
    /// The cursor information.
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_PARAMCHECK`] - parameter check failed.
    /// [`IME_ERR_IMCLIENT`] - input method client error.
    /// [`IME_ERR_IMMS`] - input method manager service error.
    /// [`IME_ERR_DETACHED`] - input method client detached.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_InputMethodProxy_NotifyCursorUpdate(
        inputMethodProxy: *mut InputMethod_InputMethodProxy,
        cursorInfo: *mut InputMethod_CursorInfo,
    ) -> InputMethodResult;
    /// Send private command.
    ///
    /// # Arguments
    ///
    /// * `inputMethodProxy` - Represents a pointer to an [`InputMethod_InputMethodProxy`] instance.
    /// The inputMethodProxy is obtained from [`OH_InputMethodController_Attach`].
    ///
    /// * `privateCommand` - The private commands, which is defined in [`InputMethod_PrivateCommand`]. Max size 32KB.
    ///
    /// * `size` - The size of privateCommand. Max is 5.
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_PARAMCHECK`] - parameter check failed.
    /// [`IME_ERR_IMCLIENT`] - input method client error.
    /// [`IME_ERR_IMMS`] - input method manager service error.
    /// [`IME_ERR_DETACHED`] - input method client detached.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_InputMethodProxy_SendPrivateCommand(
        inputMethodProxy: *mut InputMethod_InputMethodProxy,
        privateCommand: *mut *mut InputMethod_PrivateCommand,
        size: usize,
    ) -> InputMethodResult;
}
