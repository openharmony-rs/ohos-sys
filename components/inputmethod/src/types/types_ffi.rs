// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_KeyboardStatus {
    /// The keyboard status is none.
    pub const IME_KEYBOARD_STATUS_NONE: InputMethod_KeyboardStatus = InputMethod_KeyboardStatus(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_KeyboardStatus {
    /// The keyboard status is hide.
    pub const IME_KEYBOARD_STATUS_HIDE: InputMethod_KeyboardStatus = InputMethod_KeyboardStatus(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_KeyboardStatus {
    /// The keyboard status is show.
    pub const IME_KEYBOARD_STATUS_SHOW: InputMethod_KeyboardStatus = InputMethod_KeyboardStatus(2);
}
#[repr(transparent)]
/// Keyboard status.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct InputMethod_KeyboardStatus(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is UNSPECIFIED.
    pub const IME_ENTER_KEY_UNSPECIFIED: InputMethod_EnterKeyType = InputMethod_EnterKeyType(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is NONE.
    pub const IME_ENTER_KEY_NONE: InputMethod_EnterKeyType = InputMethod_EnterKeyType(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is GO.
    pub const IME_ENTER_KEY_GO: InputMethod_EnterKeyType = InputMethod_EnterKeyType(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is SEARCH.
    pub const IME_ENTER_KEY_SEARCH: InputMethod_EnterKeyType = InputMethod_EnterKeyType(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is SEND.
    pub const IME_ENTER_KEY_SEND: InputMethod_EnterKeyType = InputMethod_EnterKeyType(4);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is NEXT.
    pub const IME_ENTER_KEY_NEXT: InputMethod_EnterKeyType = InputMethod_EnterKeyType(5);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is DONE.
    pub const IME_ENTER_KEY_DONE: InputMethod_EnterKeyType = InputMethod_EnterKeyType(6);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is PREVIOUS.
    pub const IME_ENTER_KEY_PREVIOUS: InputMethod_EnterKeyType = InputMethod_EnterKeyType(7);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_EnterKeyType {
    /// The enter key type is NEWLINE.
    pub const IME_ENTER_KEY_NEWLINE: InputMethod_EnterKeyType = InputMethod_EnterKeyType(8);
}
#[repr(transparent)]
/// Enter key type.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct InputMethod_EnterKeyType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_Direction {
    /// The direction is NONE.
    pub const IME_DIRECTION_NONE: InputMethod_Direction = InputMethod_Direction(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_Direction {
    /// The direction is UP.
    pub const IME_DIRECTION_UP: InputMethod_Direction = InputMethod_Direction(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_Direction {
    /// The direction is DOWN.
    pub const IME_DIRECTION_DOWN: InputMethod_Direction = InputMethod_Direction(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_Direction {
    /// The direction is LEFT.
    pub const IME_DIRECTION_LEFT: InputMethod_Direction = InputMethod_Direction(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_Direction {
    /// The direction is RIGHT.
    pub const IME_DIRECTION_RIGHT: InputMethod_Direction = InputMethod_Direction(4);
}
#[repr(transparent)]
/// Direction.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct InputMethod_Direction(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ExtendAction {
    /// Select all text.
    pub const IME_EXTEND_ACTION_SELECT_ALL: InputMethod_ExtendAction = InputMethod_ExtendAction(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ExtendAction {
    /// Cut selected text.
    pub const IME_EXTEND_ACTION_CUT: InputMethod_ExtendAction = InputMethod_ExtendAction(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ExtendAction {
    /// Copy selected text.
    pub const IME_EXTEND_ACTION_COPY: InputMethod_ExtendAction = InputMethod_ExtendAction(4);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ExtendAction {
    /// Paste from paste board.
    pub const IME_EXTEND_ACTION_PASTE: InputMethod_ExtendAction = InputMethod_ExtendAction(5);
}
#[repr(transparent)]
/// The extend action.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct InputMethod_ExtendAction(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is NONE.
    pub const IME_TEXT_INPUT_TYPE_NONE: InputMethod_TextInputType = InputMethod_TextInputType(-1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is TEXT.
    pub const IME_TEXT_INPUT_TYPE_TEXT: InputMethod_TextInputType = InputMethod_TextInputType(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is MULTILINE.
    pub const IME_TEXT_INPUT_TYPE_MULTILINE: InputMethod_TextInputType =
        InputMethod_TextInputType(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is NUMBER.
    pub const IME_TEXT_INPUT_TYPE_NUMBER: InputMethod_TextInputType = InputMethod_TextInputType(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is PHONE.
    pub const IME_TEXT_INPUT_TYPE_PHONE: InputMethod_TextInputType = InputMethod_TextInputType(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is DATETIME.
    pub const IME_TEXT_INPUT_TYPE_DATETIME: InputMethod_TextInputType =
        InputMethod_TextInputType(4);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is EMAIL ADDRESS.
    pub const IME_TEXT_INPUT_TYPE_EMAIL_ADDRESS: InputMethod_TextInputType =
        InputMethod_TextInputType(5);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is URL.
    pub const IME_TEXT_INPUT_TYPE_URL: InputMethod_TextInputType = InputMethod_TextInputType(6);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is VISIBLE PASSWORD.
    pub const IME_TEXT_INPUT_TYPE_VISIBLE_PASSWORD: InputMethod_TextInputType =
        InputMethod_TextInputType(7);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is NUMBER PASSWORD.
    pub const IME_TEXT_INPUT_TYPE_NUMBER_PASSWORD: InputMethod_TextInputType =
        InputMethod_TextInputType(8);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is SCREEN LOCK PASSWORD.
    pub const IME_TEXT_INPUT_TYPE_SCREEN_LOCK_PASSWORD: InputMethod_TextInputType =
        InputMethod_TextInputType(9);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is USER NAME.
    pub const IME_TEXT_INPUT_TYPE_USER_NAME: InputMethod_TextInputType =
        InputMethod_TextInputType(10);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is NEW PASSWORD.
    pub const IME_TEXT_INPUT_TYPE_NEW_PASSWORD: InputMethod_TextInputType =
        InputMethod_TextInputType(11);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_TextInputType {
    /// The text input type is NUMBER DECIMAL.
    pub const IME_TEXT_INPUT_TYPE_NUMBER_DECIMAL: InputMethod_TextInputType =
        InputMethod_TextInputType(12);
}
#[repr(transparent)]
/// The text input type.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct InputMethod_TextInputType(pub ::core::ffi::c_int);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_CommandValueType {
    /// Value type is NONE.
    pub const IME_COMMAND_VALUE_TYPE_NONE: InputMethod_CommandValueType =
        InputMethod_CommandValueType(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_CommandValueType {
    /// Value type is STRING.
    pub const IME_COMMAND_VALUE_TYPE_STRING: InputMethod_CommandValueType =
        InputMethod_CommandValueType(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_CommandValueType {
    /// Value type is BOOL.
    pub const IME_COMMAND_VALUE_TYPE_BOOL: InputMethod_CommandValueType =
        InputMethod_CommandValueType(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_CommandValueType {
    /// Value type is INT32.
    pub const IME_COMMAND_VALUE_TYPE_INT32: InputMethod_CommandValueType =
        InputMethod_CommandValueType(3);
}
#[repr(transparent)]
/// The value type of command data.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct InputMethod_CommandValueType(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code in the correct case.
    pub const IME_ERR_OK: InputMethod_ErrorCode = InputMethod_ErrorCode(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when error is undefined.
    pub const IME_ERR_UNDEFINED: InputMethod_ErrorCode = InputMethod_ErrorCode(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when parameter check failed.
    pub const IME_ERR_PARAMCHECK: InputMethod_ErrorCode = InputMethod_ErrorCode(401);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when the package manager error.
    pub const IME_ERR_PACKAGEMANAGER: InputMethod_ErrorCode = InputMethod_ErrorCode(12800001);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when input method engine error.
    pub const IME_ERR_IMENGINE: InputMethod_ErrorCode = InputMethod_ErrorCode(12800002);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when input method client error.
    pub const IME_ERR_IMCLIENT: InputMethod_ErrorCode = InputMethod_ErrorCode(12800003);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when configuration persisting error.
    pub const IME_ERR_CONFIG_PERSIST: InputMethod_ErrorCode = InputMethod_ErrorCode(12800005);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when input method controller error.
    pub const IME_ERR_CONTROLLER: InputMethod_ErrorCode = InputMethod_ErrorCode(12800006);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when input method setting error.
    pub const IME_ERR_SETTINGS: InputMethod_ErrorCode = InputMethod_ErrorCode(12800007);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when input method manager service error.
    pub const IME_ERR_IMMS: InputMethod_ErrorCode = InputMethod_ErrorCode(12800008);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when input method client is detached.
    pub const IME_ERR_DETACHED: InputMethod_ErrorCode = InputMethod_ErrorCode(12800009);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when unexpected null pointer.
    pub const IME_ERR_NULL_POINTER: InputMethod_ErrorCode = InputMethod_ErrorCode(12802000);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl InputMethod_ErrorCode {
    /// The error code when query failed.
    pub const IME_ERR_QUERY_FAILED: InputMethod_ErrorCode = InputMethod_ErrorCode(12802001);
}
#[repr(transparent)]
/// The value type of command data.
///
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Clone, Hash, PartialEq, Eq)]
pub struct InputMethod_ErrorCode(pub ::core::ffi::c_uint);
