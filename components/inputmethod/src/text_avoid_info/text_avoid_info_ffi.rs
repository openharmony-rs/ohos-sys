/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[repr(C)]
pub struct InputMethod_TextAvoidInfo {
    _unused: [u8; 0],
}
extern "C" {
    /** @brief Create a new {@link InputMethod_TextAvoidInfo} instance.

    @param positionY The y-coordinate of the avoid area.
    @param height The height of the avoid area.
    @return If the creation succeeds, a pointer to the newly created {@link InputMethod_TextAvoidInfo}
    instance is returned. If the creation fails, NULL is returned, possible cause is insufficient memory.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextAvoidInfo_Create(positionY: f64, height: f64) -> *mut InputMethod_TextAvoidInfo;
    /** @brief Destroy a {@link InputMethod_TextAvoidInfo} instance.

    @param options Represents a pointer to an {@link InputMethod_TextAvoidInfo} instance which will be destroyed.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextAvoidInfo_Destroy(info: *mut InputMethod_TextAvoidInfo);
    /** @brief Set positionY value into {@link InputMethod_TextAvoidInfo}.

    @param info Represents a pointer to an {@link InputMethod_TextAvoidInfo} instance which will be set value.
    @param positionY Represents positionY value.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextAvoidInfo_SetPositionY(
        info: *mut InputMethod_TextAvoidInfo,
        positionY: f64,
    ) -> InputMethod_ErrorCode;
    /** @brief Set height value into {@link InputMethod_TextAvoidInfo}.

    @param info Represents a pointer to an {@link InputMethod_TextAvoidInfo} instance which will be set value.
    @param height Represents height value.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextAvoidInfo_SetHeight(
        info: *mut InputMethod_TextAvoidInfo,
        height: f64,
    ) -> InputMethod_ErrorCode;
    /** @brief Get positionY value from {@link InputMethod_TextAvoidInfo}.

    @param info Represents a pointer to an {@link InputMethod_TextAvoidInfo} instance which will be get value from.
    @param positionY Represents positionY value.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextAvoidInfo_GetPositionY(
        info: *mut InputMethod_TextAvoidInfo,
        positionY: *mut f64,
    ) -> InputMethod_ErrorCode;
    /** @brief Get height value into {@link InputMethod_TextAvoidInfo}.

    @param info Represents a pointer to an {@link InputMethod_TextAvoidInfo} instance which will be get value from.
    @param height Represents height value.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_TextAvoidInfo_GetHeight(
        info: *mut InputMethod_TextAvoidInfo,
        height: *mut f64,
    ) -> InputMethod_ErrorCode;
}
