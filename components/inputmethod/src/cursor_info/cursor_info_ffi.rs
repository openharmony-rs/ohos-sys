// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[repr(C)]
pub struct InputMethod_CursorInfo {
    _unused: [u8; 0],
}
extern "C" {
    /// Create a new [`InputMethod_CursorInfo`] instance.
    ///
    /// # Arguments
    ///
    /// * `left` - The left point of the cursor and must be absolute coordinate of the physical screen.
    ///
    /// * `top` - The top point of the cursor and must be absolute coordinate of the physical screen.
    ///
    /// * `width` - The width of the cursor.
    ///
    /// * `height` - The height of the cursor.
    ///
    /// # Returns
    ///
    /// * If the creation succeeds, a pointer to the newly created [`InputMethod_CursorInfo`]
    /// instance is returned. If the creation fails, NULL is returned, possible cause is insufficient memory.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_Create(
        left: f64,
        top: f64,
        width: f64,
        height: f64,
    ) -> *mut InputMethod_CursorInfo;
    /// Destroy a [`InputMethod_CursorInfo`] instance.
    ///
    /// # Arguments
    ///
    /// * `cursorInfo` - Represents a pointer to an [`InputMethod_CursorInfo`] instance which will be destroyed.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_Destroy(cursorInfo: *mut InputMethod_CursorInfo);
    /// Set cursor info.
    ///
    /// # Arguments
    ///
    /// * `cursorInfo` - Represents a pointer to an [`InputMethod_CursorInfo`] instance.
    ///
    /// * `left` - The left point of the cursor and must be absolute coordinate of the physical screen.
    ///
    /// * `top` - The top point of the cursor and must be absolute coordinate of the physical screen.
    ///
    /// * `width` - The width of the cursor.
    ///
    /// * `height` - The height of the cursor.
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_SetRect(
        cursorInfo: *mut InputMethod_CursorInfo,
        left: f64,
        top: f64,
        width: f64,
        height: f64,
    ) -> InputMethod_ErrorCode;
    /// Get cursor info.
    ///
    /// # Arguments
    ///
    /// * `cursorInfo` - Represents a pointer to an [`InputMethod_CursorInfo`] instance.
    ///
    /// * `left` - The left point of the cursor and must be absolute coordinate of the physical screen.
    ///
    /// * `top` - The top point of the cursor and must be absolute coordinate of the physical screen.
    ///
    /// * `width` - The width of the cursor.
    ///
    /// * `height` - The height of the cursor.
    ///
    /// # Returns
    ///
    /// * Returns a specific error code.
    /// [`IME_ERR_OK`] - success.
    /// [`IME_ERR_NULL_POINTER`] - unexpected null pointer.
    /// Specific error codes can be referenced [`InputMethod_ErrorCode`].
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_GetRect(
        cursorInfo: *mut InputMethod_CursorInfo,
        left: *mut f64,
        top: *mut f64,
        width: *mut f64,
        height: *mut f64,
    ) -> InputMethod_ErrorCode;
}
