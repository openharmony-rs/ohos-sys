/* automatically generated by rust-bindgen 0.71.1 */

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use crate::types::*;

#[repr(C)]
pub struct InputMethod_CursorInfo {
    _unused: [u8; 0],
}
extern "C" {
    /** @brief Create a new {@link InputMethod_CursorInfo} instance.

    @param left The left point of the cursor and must be absolute coordinate of the physical screen.
    @param top The top point of the cursor and must be absolute coordinate of the physical screen.
    @param width The width of the cursor.
    @param height The height of the cursor.
    @return If the creation succeeds, a pointer to the newly created {@link InputMethod_CursorInfo}
    instance is returned. If the creation fails, NULL is returned, possible cause is insufficient memory.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_Create(
        left: f64,
        top: f64,
        width: f64,
        height: f64,
    ) -> *mut InputMethod_CursorInfo;
    /** @brief Destroy a {@link InputMethod_CursorInfo} instance.

    @param cursorInfo Represents a pointer to an {@link InputMethod_CursorInfo} instance which will be destroyed.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_Destroy(cursorInfo: *mut InputMethod_CursorInfo);
    /** @brief Set cursor info.

    @param cursorInfo Represents a pointer to an {@link InputMethod_CursorInfo} instance.
    @param left The left point of the cursor and must be absolute coordinate of the physical screen.
    @param top The top point of the cursor and must be absolute coordinate of the physical screen.
    @param width The width of the cursor.
    @param height The height of the cursor.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_SetRect(
        cursorInfo: *mut InputMethod_CursorInfo,
        left: f64,
        top: f64,
        width: f64,
        height: f64,
    ) -> InputMethod_ErrorCode;
    /** @brief Get cursor info.

    @param cursorInfo Represents a pointer to an {@link InputMethod_CursorInfo} instance.
    @param left The left point of the cursor and must be absolute coordinate of the physical screen.
    @param top The top point of the cursor and must be absolute coordinate of the physical screen.
    @param width The width of the cursor.
    @param height The height of the cursor.
    @return Returns a specific error code.
        {@link IME_ERR_OK} - success.
        {@link IME_ERR_NULL_POINTER} - unexpected null pointer.
    Specific error codes can be referenced {@link InputMethod_ErrorCode}.
    @since 12*/
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_CursorInfo_GetRect(
        cursorInfo: *mut InputMethod_CursorInfo,
        left: *mut f64,
        top: *mut f64,
        width: *mut f64,
        height: *mut f64,
    ) -> InputMethod_ErrorCode;
}
