// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl AbilityRuntime_AreaMode {
    /// System level device encryption area.
    pub const ABILITY_RUNTIME_AREA_MODE_EL1: AbilityRuntime_AreaMode = AbilityRuntime_AreaMode(0);
    /// User credential encryption area.
    pub const ABILITY_RUNTIME_AREA_MODE_EL2: AbilityRuntime_AreaMode = AbilityRuntime_AreaMode(1);
    /// User credential encryption area.
    /// when screen locked, can read/write, and create file.
    pub const ABILITY_RUNTIME_AREA_MODE_EL3: AbilityRuntime_AreaMode = AbilityRuntime_AreaMode(2);
    /// User credential encryption area.
    /// when screen locked, FEB2.0 can read/write, FEB3.0 can't
    /// read/write, and all can't create file.
    pub const ABILITY_RUNTIME_AREA_MODE_EL4: AbilityRuntime_AreaMode = AbilityRuntime_AreaMode(3);
    /// User privacy-sensitive encryption area.
    /// when the screen locked, a closed file cannot be opened, read, or written,
    /// a file can be created and then opened, read, or written.
    pub const ABILITY_RUNTIME_AREA_MODE_EL5: AbilityRuntime_AreaMode = AbilityRuntime_AreaMode(4);
}
#[repr(transparent)]
/// File area mode.
///
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AbilityRuntime_AreaMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl AbilityRuntime_StartVisibility {
    /// Indicates that the ability will hide after process startup.
    pub const ABILITY_RUNTIME_HIDE_UPON_START: AbilityRuntime_StartVisibility =
        AbilityRuntime_StartVisibility(0);
    /// Indicates that the ability will show after process startup.
    pub const ABILITY_RUNTIME_SHOW_UPON_START: AbilityRuntime_StartVisibility =
        AbilityRuntime_StartVisibility(1);
}
#[repr(transparent)]
/// Start Visibility.
///
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AbilityRuntime_StartVisibility(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl AbilityRuntime_WindowMode {
    /// The window mode is not defined.
    pub const ABILITY_RUNTIME_WINDOW_MODE_UNDEFINED: AbilityRuntime_WindowMode =
        AbilityRuntime_WindowMode(0);
    /// Full screen mode.
    pub const ABILITY_RUNTIME_WINDOW_MODE_FULL_SCREEN: AbilityRuntime_WindowMode =
        AbilityRuntime_WindowMode(1);
}
#[repr(transparent)]
/// Window mode.
///
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AbilityRuntime_WindowMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
impl AbilityRuntime_SupportedWindowMode {
    /// Indicates supported window mode of full screen mode
    pub const ABILITY_RUNTIME_SUPPORTED_WINDOW_MODE_FULL_SCREEN:
        AbilityRuntime_SupportedWindowMode = AbilityRuntime_SupportedWindowMode(0);
    /// Indicates supported window mode of split mode
    pub const ABILITY_RUNTIME_SUPPORTED_WINDOW_MODE_SPLIT: AbilityRuntime_SupportedWindowMode =
        AbilityRuntime_SupportedWindowMode(1);
    /// Indicates supported window mode of floating mode
    pub const ABILITY_RUNTIME_SUPPORTED_WINDOW_MODE_FLOATING: AbilityRuntime_SupportedWindowMode =
        AbilityRuntime_SupportedWindowMode(2);
}
#[repr(transparent)]
/// Support window mode
///
///
/// Available since API-level: 17
#[cfg(feature = "api-17")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct AbilityRuntime_SupportedWindowMode(pub ::core::ffi::c_uint);
