// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#[cfg(feature = "api-15")]
use crate::base::want::AbilityBase_Want;
use crate::runtime::{AbilityRuntimeResult, AbilityRuntime_AreaMode};

extern "C" {
    /// Obtain the cache directory of the application.
    ///
    /// # Arguments
    ///
    /// * `buffer` - A pointer to a buffer that receives the cache directory of the application.
    ///
    /// * `bufferSize` - The length of the buffer.
    ///
    /// * `writeLength` - The string length actually written to the buffer,
    /// when returning [`ABILITY_RUNTIME_ERROR_CODE_NO_ERROR`].
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ABILITY_RUNTIME_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ABILITY_RUNTIME_ERROR_CODE_PARAM_INVALID`] if the buffer or writeLength is null,
    /// or the buffer size is less than the minimum buffer size.
    /// [`ABILITY_RUNTIME_ERROR_CODE_CONTEXT_NOT_EXIST`] if the application context does not exist.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_AbilityRuntime_ApplicationContextGetCacheDir(
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> AbilityRuntimeResult;
    /// Obtain the area mode of the application.
    ///
    /// # Arguments
    ///
    /// * `areaMode` - A pointer to the area mode.
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ABILITY_RUNTIME_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ABILITY_RUNTIME_ERROR_CODE_PARAM_INVALID`] if the areaMode is null.
    /// [`ABILITY_RUNTIME_ERROR_CODE_CONTEXT_NOT_EXIST`] if the application context does not exist.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_AbilityRuntime_ApplicationContextGetAreaMode(
        areaMode: *mut AbilityRuntime_AreaMode,
    ) -> AbilityRuntimeResult;
    /// Obtain the bundle name.
    ///
    /// # Arguments
    ///
    /// * `buffer` - A pointer to a buffer that receives the bundle name.
    ///
    /// * `bufferSize` - The length of the buffer.
    ///
    /// * `writeLength` - The string length actually written to the buffer,
    /// when returning [`ABILITY_RUNTIME_ERROR_CODE_NO_ERROR`].
    ///
    /// # Returns
    ///
    /// * The error code.
    /// [`ABILITY_RUNTIME_ERROR_CODE_NO_ERROR`] if the operation is successful.
    /// [`ABILITY_RUNTIME_ERROR_CODE_PARAM_INVALID`] if the buffer or writeLength is null,
    /// or the buffer size is less than the minimum buffer size.
    /// [`ABILITY_RUNTIME_ERROR_CODE_CONTEXT_NOT_EXIST`] if the application context does not exist.
    ///
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_AbilityRuntime_ApplicationContextGetBundleName(
        buffer: *mut ::core::ffi::c_char,
        bufferSize: i32,
        writeLength: *mut i32,
    ) -> AbilityRuntimeResult;
}
