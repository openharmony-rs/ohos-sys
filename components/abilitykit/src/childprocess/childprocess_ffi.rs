// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use ohos_sys_opaque_types::OHIPCRemoteProxy;

pub type Ability_NativeChildProcessResult = Result<(), Ability_NativeChildProcessErrorCode>;
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl Ability_NativeChildProcessErrorCode {
    /// Invalid parameter.
    pub const INVALID_PARAM: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(401).unwrap() });
    /// Creating a native child process is not supported.
    pub const NOT_SUPPORTED: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(801).unwrap() });
    /// Internal error.
    pub const INTERNAL: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16000050).unwrap() });
    /// A new child process cannot be created during the startup of another native child process.
    /// You can try again after the child process is started.
    pub const BUSY: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010001).unwrap() });
    /// Starting the native child process times out.
    pub const TIMEOUT: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010002).unwrap() });
    /// Server error.
    pub const SERVICE_ERROR: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010003).unwrap() });
    /// The multi-process mode is disabled. A child process cannot be started.
    pub const MULTI_PROCESS_DISABLED: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010004).unwrap() });
    /// A process cannot be created in a child process.
    pub const ALREADY_IN_CHILD: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010005).unwrap() });
    /// The number of native child processes reaches the maximum.
    pub const MAX_CHILD_PROCESSES_REACHED: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010006).unwrap() });
    /// The child process fails to load the dynamic library because the file does not exist
    /// or the corresponding method is not implemented or exported.
    pub const LIB_LOADING_FAILED: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010007).unwrap() });
    /// The child process fails to call the OnConnect method of the dynamic library.
    /// An invalid IPC object pointer may be returned.
    pub const CONNECTION_FAILED: Ability_NativeChildProcessErrorCode =
        Ability_NativeChildProcessErrorCode(const { core::num::NonZero::new(16010008).unwrap() });
}
#[repr(transparent)]
/// Enumerates the error codes used by the native child process module.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct Ability_NativeChildProcessErrorCode(pub core::num::NonZero<::core::ffi::c_uint>);
/// Defines a callback function for notifying the child process startup result.
///
/// # Arguments
///
/// * `errCode` - Error code corresponding to the callback function. The following values are available:
/// [`NCP_NO_ERROR`] if the child process is created successfully.
///
/// [`NCP_ERR_LIB_LOADING_FAILED`] if loading the dynamic library file fails or the necessary export function
/// is not implemented in the dynamic library.
///
/// [`NCP_ERR_CONNECTION_FAILED`] if the OnConnect method implemented in the dynamic library does not return
/// a valid IPC stub pointer.
///
/// For details, see [`Ability_NativeChildProcess_ErrCode`].
///
/// * `remoteProxy` - Pointer to the IPC object of the child process. If an exception occurs, the value may be nullptr.
/// The object must be released by calling [`OH_IPCRemoteProxy_Destory`] when it is no longer needed.
/// [`OH_Ability_CreateNativeChildProcess`] [`OH_IPCRemoteProxy_Destory`]
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
pub type OH_Ability_OnNativeChildProcessStarted = ::core::option::Option<
    unsafe extern "C" fn(errCode: ::core::ffi::c_int, remoteProxy: *mut OHIPCRemoteProxy),
>;
/// The info of the file descriptors passed to child process.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeChildProcess_Fd {
    /// the key of the file descriptor.
    pub fdName: *mut ::core::ffi::c_char,
    /// the value of the file descriptor.
    pub fd: i32,
    /// the next pointer of the linked list.
    pub next: *mut NativeChildProcess_Fd,
}
/// The list of the info of the file descriptors passed to child process.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeChildProcess_FdList {
    /// the head of the list.
    /// For details, see [`NativeChildProcess_Fd`].
    pub head: *mut NativeChildProcess_Fd,
}
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
impl NativeChildProcess_IsolationMode {
    /// Normal isolation mode, parent process shares the same sandbox or internet with the child process.
    pub const NCP_ISOLATION_MODE_NORMAL: NativeChildProcess_IsolationMode =
        NativeChildProcess_IsolationMode(0);
    /// Isolated mode, parent process does not share the same sandbox or internet with the child process.
    pub const NCP_ISOLATION_MODE_ISOLATED: NativeChildProcess_IsolationMode =
        NativeChildProcess_IsolationMode(1);
}
#[repr(transparent)]
/// Enumerates the isolation modes used by the native child process module.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct NativeChildProcess_IsolationMode(pub ::core::ffi::c_uint);
/// The options used by the child process.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeChildProcess_Options {
    /// the isolation mode used by the child process.
    /// For details, see [`NativeChildProcess_IsolationMode`].
    pub isolationMode: NativeChildProcess_IsolationMode,
    /// reserved field for future extension purposes
    pub reserved: i64,
}
/// The arguments passed to the child process.
///
/// Available since API-level: 13
#[cfg(feature = "api-13")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NativeChildProcess_Args {
    /// the entry parameter.
    pub entryParams: *mut ::core::ffi::c_char,
    /// the list of the info of the file descriptors passed to child process.
    /// For details, see [`NativeChildProcess_FdList`].
    pub fdList: NativeChildProcess_FdList,
}
extern "C" {
    /// Creates a child process, loads the specified dynamic library file, and returns the startup result
    /// asynchronously through a callback parameter.
    /// The callback notification is an independent thread. When implementing the callback function,
    /// pay attention to thread synchronization and do not perform time-consuming operations to avoid long-time blocking.
    ///
    /// The dynamic library specified must implement and export the following functions:
    ///
    /// 1. OHIPCRemoteStub* NativeChildProcess_OnConnect()
    ///
    /// 2. void NativeChildProcess_MainProc()
    ///
    ///
    /// The processing logic sequence is shown in the following pseudocode:
    ///
    /// Main process:
    ///
    /// 1. OH_Ability_CreateNativeChildProcess(libName, onProcessStartedCallback)
    ///
    /// Child process:
    ///
    /// 2. dlopen(libName)
    ///
    /// 3. dlsym("NativeChildProcess_OnConnect")
    ///
    /// 4. dlsym("NativeChildProcess_MainProc")
    ///
    /// 5. ipcRemote = NativeChildProcess_OnConnect()
    ///
    /// 6. NativeChildProcess_MainProc()
    ///
    /// Main process:
    ///
    /// 7. onProcessStartedCallback(ipcRemote, errCode)
    ///
    /// Child process:
    ///
    /// 8. The child process exits after the NativeChildProcess_MainProc() function is returned.
    ///
    ///
    /// # Arguments
    ///
    /// * `libName` - Name of the dynamic library file loaded in the child process. The value cannot be nullptr.
    ///
    /// * `onProcessStarted` - Pointer to the callback function for notifying the child process startup result.
    /// The value cannot be nullptr. For details, see [`OH_Ability_OnNativeChildProcessStarted`].
    ///
    /// # Returns
    ///
    /// * Returns [`NCP_NO_ERROR`] if the call is successful, but the actual startup result is notified by the
    /// callback function.
    ///
    /// Returns [`NCP_ERR_INVALID_PARAM`] if the dynamic library name or callback function pointer is invalid.
    ///
    /// Returns [`NCP_ERR_NOT_SUPPORTED`] if the device does not support the creation of native child processes.
    ///
    /// Returns [`NCP_ERR_MULTI_PROCESS_DISABLED`] if the multi-process mode is disabled on the device.
    ///
    /// Returns [`NCP_ERR_ALREADY_IN_CHILD`] if it is not allowed to create another child process in the child process.
    ///
    /// Returns [`NCP_ERR_MAX_CHILD_PROCESSES_REACHED`] if the maximum number of native child processes is reached.
    ///
    /// For details, see [`Ability_NativeChildProcess_ErrCode`].
    /// [`OH_Ability_OnNativeChildProcessStarted`]
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_Ability_CreateNativeChildProcess(
        libName: *const ::core::ffi::c_char,
        onProcessStarted: OH_Ability_OnNativeChildProcessStarted,
    ) -> ::core::ffi::c_int;
    /// Starts a child process, loads the specified dynamic library file.
    ///
    /// The dynamic library specified must implement a function with NativeChildProcess_Args as a
    /// pamameter(function name can be customized), and export the function, such as:
    ///
    /// 1. void Main(NativeChildProcess_Args args);
    ///
    /// The processing logic sequence is shown in the following pseudocode:
    ///
    /// Main process:
    ///
    /// 1. OH_Ability_StartNativeChildProcess(entryPoint, args, options)
    ///
    /// Child process:
    ///
    /// 2. dlopen(libName)
    ///
    /// 3. dlsym("Main")
    ///
    /// 4. Main(args)
    ///
    /// 5. The child process exits after the Main(args) function is returned
    ///
    ///
    /// # Arguments
    ///
    /// * `entry` - Dynamic library and entry function loaded in child process, such as "libEntry.so:Main".
    /// The value cannot be nullptr.
    ///
    /// * `args` - The arguments passed to the child process.
    /// For details, see [`NativeChildProcess_Args`].
    ///
    /// * `options` - The child process options.
    /// For details, see [`NativeChildProcess_Options`].
    ///
    /// * `pid` - The started child process id.
    ///
    /// # Returns
    ///
    /// * Returns [`NCP_NO_ERROR`] if the call is successful.
    ///
    /// Returns [`NCP_ERR_INVALID_PARAM`] if the dynamic library name or callback function pointer is invalid.
    ///
    /// Returns [`NCP_ERR_NOT_SUPPORTED`] if the device does not support the creation of native child processes.
    ///
    /// Returns [`NCP_ERR_ALREADY_IN_CHILD`] if it is not allowed to create another child process in the child process.
    ///
    /// Returns [`NCP_ERR_MAX_CHILD_PROCESSES_REACHED`] if the maximum number of native child processes is reached.
    ///
    /// For details, see [`Ability_NativeChildProcess_ErrCode`].
    /// [`OH_Ability_OnNativeChildProcessStarted`]
    /// Available since API-level: 13
    #[cfg(feature = "api-13")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-13")))]
    pub fn OH_Ability_StartNativeChildProcess(
        entry: *const ::core::ffi::c_char,
        args: NativeChildProcess_Args,
        options: NativeChildProcess_Options,
        pid: *mut i32,
    ) -> Ability_NativeChildProcessResult;
    /// Child process get self NativeChildProcess_Args.
    ///
    ///
    /// # Returns
    ///
    /// * Returns a pointer to the arguments passed to current child process.
    ///
    /// For details, see [`NativeChildProcess_Args`].
    ///
    /// Available since API-level: 17
    #[cfg(feature = "api-17")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-17")))]
    pub fn OH_Ability_GetCurrentChildProcessArgs() -> *mut NativeChildProcess_Args;
}
