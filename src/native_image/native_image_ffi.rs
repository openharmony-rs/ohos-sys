// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use ohos_sys_opaque_types::OHNativeWindow;
#[cfg(feature = "api-12")]
use ohos_sys_opaque_types::OHNativeWindowBuffer;

#[repr(C)]
pub struct OH_NativeImage {
    _unused: [u8; 0],
}
/// The callback function of frame available.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
/// # Arguments
///
/// `context` - User defined context, returned to the user in the callback function
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
pub type OH_OnFrameAvailable =
    ::core::option::Option<unsafe extern "C" fn(context: *mut ::core::ffi::c_void)>;
/// A listener for native image, use <b>OH_NativeImage_SetOnFrameAvailableListener</b> to register
///
/// the listener object to <b>OH_NativeImage</b>, the callback will be triggered when there is available frame
///
///
/// Available since API-level: 11
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_OnFrameAvailableListener {
    /// User defined context, returned to the user in the callback function
    pub context: *mut ::core::ffi::c_void,
    /// The callback function of frame available.
    pub onFrameAvailable: OH_OnFrameAvailable,
}
extern "C" {
    /// Create a <b>OH_NativeImage</b> related to an Opengl ES texture and target.
    ///
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `textureId` - Indicates the id of the Opengl ES texture which the native image attached to.
    ///
    /// `textureTarget` - Indicates the Opengl ES target.
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OH_NativeImage</b> instance created if the operation is successful,
    ///
    /// returns <b>NULL</b> otherwise.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_NativeImage_Create(textureId: u32, textureTarget: u32) -> *mut OH_NativeImage;
    /// Acquire the OHNativeWindow for the OH_NativeImage.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// # Returns
    ///
    /// Returns the pointer to the OHNativeWindow if the operation is successful, returns <b>NULL</b> otherwise.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_NativeImage_AcquireNativeWindow(image: *mut OH_NativeImage) -> *mut OHNativeWindow;
    /// Attach the OH_NativeImage to Opengl ES context, and the Opengl ES texture is bound to the
    ///
    /// GL_TEXTURE_EXTERNAL_OES, which will update by the OH_NativeImage.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// `textureId` - Indicates the id of the Opengl ES texture which the native image attached to.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_NativeImage_AttachContext(image: *mut OH_NativeImage, textureId: u32) -> i32;
    /// Detach the OH_NativeImage from the Opengl ES context.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_NativeImage_DetachContext(image: *mut OH_NativeImage) -> i32;
    /// Update the related Opengl ES texture with the OH_NativeImage acquired buffer.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_NativeImage_UpdateSurfaceImage(image: *mut OH_NativeImage) -> i32;
    /// Get the timestamp of the texture image set by the most recent call to OH_NativeImage_UpdateSurfaceImage.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// # Returns
    ///
    /// Returns the timestamp associated to the texture image.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_NativeImage_GetTimestamp(image: *mut OH_NativeImage) -> i64;
    /// Return the transform matrix of the texture image set by the most recent call to
    ///
    /// OH_NativeImage_UpdateSurfaceImage.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// `matrix` - Indicates the retrieved 4*4 transform matrix .
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    ///
    /// Deprecated** since 12
    /// OH_NativeImage_GetTransformMatrixV2
    pub fn OH_NativeImage_GetTransformMatrix(image: *mut OH_NativeImage, matrix: *mut f32) -> i32;
    /// Return the native image's surface id.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// `surfaceId` - Indicates the surface id.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_NativeImage_GetSurfaceId(image: *mut OH_NativeImage, surfaceId: *mut u64) -> i32;
    /// Set the frame available callback.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// `listener` - Indicates the callback function.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_NativeImage_SetOnFrameAvailableListener(
        image: *mut OH_NativeImage,
        listener: OH_OnFrameAvailableListener,
    ) -> i32;
    /// Unset the frame available callback.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_NativeImage_UnsetOnFrameAvailableListener(image: *mut OH_NativeImage) -> i32;
    /// Destroy the <b>OH_NativeImage</b> created by OH_NativeImage_Create, and the pointer to
    ///
    /// <b>OH_NativeImage</b> will be null after this operation.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> pointer.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    pub fn OH_NativeImage_Destroy(image: *mut *mut OH_NativeImage);
    /// Obtains the transform matrix of the texture image by producer transform type.
    ///
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// `matrix` - Indicates the retrieved 4*4 transform matrix .
    ///
    /// # Returns
    ///
    /// 0 - Success.
    /// 40001000 - image is NULL.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeImage_GetTransformMatrixV2(image: *mut OH_NativeImage, matrix: *mut f32)
        -> i32;
    /// Acquire an <b>OHNativeWindowBuffer</b> through an <b>OH_NativeImage</b> instance for content consumer.
    ///
    /// This method can not be used at the same time with <b>OH_NativeImage_UpdateSurfaceImage</b>.
    ///
    /// This method will create an <b>OHNativeWindowBuffer</b>.
    ///
    /// When using <b>OHNativeWindowBuffer</b>, need to increase its reference count
    /// by <b>OH_NativeWindow_NativeObjectReference</b>.
    ///
    /// When the <b>OHNativeWindowBuffer</b> is used up, its reference count needs to be decremented
    /// by <b>OH_NativeWindow_NativeObjectUnreference</b>.
    ///
    /// This interface needs to be used in conjunction with <b>OH_NativeImage_ReleaseNativeWindowBuffer<otherwise memory leaks will occur.
    ///
    /// When the fenceFd is used up, you need to close it.
    ///
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// `nativeWindowBuffer` - Indicates the pointer to an <b>OHNativeWindowBuffer</b> point.
    ///
    /// `fenceFd` - Indicates the pointer to a file descriptor handle.
    ///
    /// # Returns
    ///
    /// [`NATIVE_ERROR_OK`] 0 - Success.
    /// [`NATIVE_ERROR_INVALID_ARGUMENTS`] 40001000 - image, nativeWindowBuffer, fenceFd is NULL.
    /// [`NATIVE_ERROR_NO_BUFFER`] 40601000 - No buffer for consume.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeImage_AcquireNativeWindowBuffer(
        image: *mut OH_NativeImage,
        nativeWindowBuffer: *mut *mut OHNativeWindowBuffer,
        fenceFd: *mut ::core::ffi::c_int,
    ) -> i32;
    /// Release the <b>OHNativeWindowBuffer</b> to the buffer queue through an
    /// <b>OH_NativeImage</b> instance for reuse.
    ///
    /// The fenceFd will be close by system.
    ///
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    /// # Arguments
    ///
    /// `image` - Indicates the pointer to a <b>OH_NativeImage</b> instance.
    ///
    /// `nativeWindowBuffer` - Indicates the pointer to an <b>OHNativeWindowBuffer</b> instance.
    ///
    /// `fenceFd` - Indicates a file descriptor handle, which is used for timing synchronization.
    ///
    /// # Returns
    ///
    /// [`NATIVE_ERROR_OK`] 0 - Success.
    /// [`NATIVE_ERROR_INVALID_ARGUMENTS`] 40001000 - image, nativeWindowBuffer is NULL.
    /// [`NATIVE_ERROR_BUFFER_STATE_INVALID`] 41207000 - nativeWindowBuffer state invalid.
    /// [`NATIVE_ERROR_BUFFER_NOT_IN_CACHE`] 41210000 - nativeWindowBuffer not in cache.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeImage_ReleaseNativeWindowBuffer(
        image: *mut OH_NativeImage,
        nativeWindowBuffer: *mut OHNativeWindowBuffer,
        fenceFd: ::core::ffi::c_int,
    ) -> i32;
    /// Create a <b>OH_NativeImage</b> as a consumerSurface.
    ///
    /// This method can not be used at the same time with <b>OH_NativeImage_UpdateSurfaceImage</b>.
    ///
    /// This interface needs to be used in conjunction with <b>OH_NativeImage_Destroy<otherwise memory leaks will occur.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeImage
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OH_NativeImage</b> instance created if the operation is successful,
    ///
    /// returns <b>NULL</b> otherwise.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_ConsumerSurface_Create() -> *mut OH_NativeImage;
}
