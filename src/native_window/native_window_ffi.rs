// automatically generated by rust-bindgen 0.71.1

#![allow(non_upper_case_globals)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
use ohos_sys_opaque_types::{OHNativeWindow, OHNativeWindowBuffer, OH_NativeBuffer};

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct BufferHandle {
    /// < buffer fd, -1 if not supported
    pub fd: i32,
    /// < the width of memory
    pub width: i32,
    /// < the stride of memory
    pub stride: i32,
    /// < the height of memory
    pub height: i32,
    pub size: i32,
    /// < the format of memory
    pub format: i32,
    /// < the usage of memory
    pub usage: u64,
    /// < Virtual address of memory
    pub virAddr: *mut ::core::ffi::c_void,
    /// < Shared memory key
    pub key: i32,
    /// < Physical address
    pub phyAddr: u64,
    /// < the number of reserved fd value
    pub reserveFds: u32,
    /// < the number of reserved integer value
    pub reserveInts: u32,
    /// < the data
    pub reserve: __IncompleteArrayField<i32>,
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// None color space
    pub const OH_COLORSPACE_NONE: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(0);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT601_P | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_P << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_BT601_EBU_FULL: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(1);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT601_N | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_N << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_BT601_SMPTE_C_FULL: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(2);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT709 | (TRANSFUNC_BT709 << 8) | (MATRIX_BT709 << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_BT709_FULL: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(3);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT2020 | (TRANSFUNC_HLG << 8) | (MATRIX_BT2020 << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_BT2020_HLG_FULL: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(4);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT2020 | (TRANSFUNC_PQ << 8) | (MATRIX_BT2020 << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_BT2020_PQ_FULL: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(5);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT601_P | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_P << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_BT601_EBU_LIMIT: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(6);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT601_N | (TRANSFUNC_BT709 << 8) | (MATRIX_BT601_N << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_BT601_SMPTE_C_LIMIT: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(7);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT709 | (TRANSFUNC_BT709 << 8) | (MATRIX_BT709 << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_BT709_LIMIT: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(8);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT2020 | (TRANSFUNC_HLG << 8) | (MATRIX_BT2020 << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_BT2020_HLG_LIMIT: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(9);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT2020 | (TRANSFUNC_PQ << 8) | (MATRIX_BT2020 << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_BT2020_PQ_LIMIT: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(10);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_SRGB | (TRANSFUNC_SRGB << 8) | (MATRIX_BT601_N << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_SRGB_FULL: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(11);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_P3_D65 | (TRANSFUNC_SRGB << 8) | (MATRIX_P3 << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_P3_FULL: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(12);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_P3_D65 | (TRANSFUNC_HLG << 8) | (MATRIX_P3 << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_P3_HLG_FULL: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(13);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_P3_D65 | (TRANSFUNC_PQ << 8) | (MATRIX_P3 << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_P3_PQ_FULL: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(14);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_ADOBERGB | (TRANSFUNC_ADOBERGB << 8) | (MATRIX_ADOBERGB << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_ADOBERGB_FULL: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(15);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_SRGB | (TRANSFUNC_SRGB << 8) | (MATRIX_BT601_N << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_SRGB_LIMIT: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(16);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_P3_D65 | (TRANSFUNC_SRGB << 8) | (MATRIX_P3 << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_P3_LIMIT: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(17);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_P3_D65 | (TRANSFUNC_HLG << 8) | (MATRIX_P3 << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_P3_HLG_LIMIT: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(18);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_P3_D65 | (TRANSFUNC_PQ << 8) | (MATRIX_P3 << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_P3_PQ_LIMIT: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(19);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_ADOBERGB | (TRANSFUNC_ADOBERGB << 8) | (MATRIX_ADOBERGB << 16) | (RANGE_LIMITED << 21)
    pub const OH_COLORSPACE_ADOBERGB_LIMIT: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(20);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_SRGB | (TRANSFUNC_LINEAR << 8)
    pub const OH_COLORSPACE_LINEAR_SRGB: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(21);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// equal to OH_COLORSPACE_LINEAR_SRGB
    pub const OH_COLORSPACE_LINEAR_BT709: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(22);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_P3_D65 | (TRANSFUNC_LINEAR << 8)
    pub const OH_COLORSPACE_LINEAR_P3: OH_NativeBuffer_ColorSpace = OH_NativeBuffer_ColorSpace(23);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT2020 | (TRANSFUNC_LINEAR << 8)
    pub const OH_COLORSPACE_LINEAR_BT2020: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(24);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// equal to OH_COLORSPACE_SRGB_FULL
    pub const OH_COLORSPACE_DISPLAY_SRGB: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(25);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// equal to OH_COLORSPACE_P3_FULL
    pub const OH_COLORSPACE_DISPLAY_P3_SRGB: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(26);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// equal to OH_COLORSPACE_P3_HLG_FULL
    pub const OH_COLORSPACE_DISPLAY_P3_HLG: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(27);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// equal to OH_COLORSPACE_P3_PQ_FULL
    pub const OH_COLORSPACE_DISPLAY_P3_PQ: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(28);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// COLORPRIMARIES_BT2020 | (TRANSFUNC_SRGB << 8) | (MATRIX_BT2020 << 16) | (RANGE_FULL << 21)
    pub const OH_COLORSPACE_DISPLAY_BT2020_SRGB: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(29);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// equal to OH_COLORSPACE_BT2020_HLG_FULL
    pub const OH_COLORSPACE_DISPLAY_BT2020_HLG: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(30);
}
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
impl OH_NativeBuffer_ColorSpace {
    /// equal to OH_COLORSPACE_BT2020_PQ_FULL
    pub const OH_COLORSPACE_DISPLAY_BT2020_PQ: OH_NativeBuffer_ColorSpace =
        OH_NativeBuffer_ColorSpace(31);
}
#[repr(transparent)]
/// Indicates the color space of a native buffer.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 11
///
/// Version: 1.0
////**
/// Indicates the color space of a native buffer.
/// Move from native_buffer.h to native_common.h
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-11")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OH_NativeBuffer_ColorSpace(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_NativeBuffer_MetadataType {
    /// HLG
    pub const OH_VIDEO_HDR_HLG: OH_NativeBuffer_MetadataType = OH_NativeBuffer_MetadataType(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_NativeBuffer_MetadataType {
    /// HDR10
    pub const OH_VIDEO_HDR_HDR10: OH_NativeBuffer_MetadataType = OH_NativeBuffer_MetadataType(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_NativeBuffer_MetadataType {
    /// HDR VIVID
    pub const OH_VIDEO_HDR_VIVID: OH_NativeBuffer_MetadataType = OH_NativeBuffer_MetadataType(2);
}
#[repr(transparent)]
/// Indicates the HDR metadata type of a native buffer.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OH_NativeBuffer_MetadataType(pub ::core::ffi::c_uint);
/// Indicates the color x and y.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_NativeBuffer_ColorXY {
    /// color X
    pub x: f32,
    /// color Y
    pub y: f32,
}
/// Indicates the smpte2086 metadata.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_NativeBuffer_Smpte2086 {
    /// primary red
    pub displayPrimaryRed: OH_NativeBuffer_ColorXY,
    /// primary green
    pub displayPrimaryGreen: OH_NativeBuffer_ColorXY,
    /// primary blue
    pub displayPrimaryBlue: OH_NativeBuffer_ColorXY,
    /// white point
    pub whitePoint: OH_NativeBuffer_ColorXY,
    /// max luminance
    pub maxLuminance: f32,
    /// min luminance
    pub minLuminance: f32,
}
/// Indicates the cta861.3 metadata.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_NativeBuffer_Cta861 {
    /// max content lightLevel
    pub maxContentLightLevel: f32,
    /// max frame average light level
    pub maxFrameAverageLightLevel: f32,
}
/// Indicates the HDR static metadata.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[repr(C)]
#[derive(Debug)]
pub struct OH_NativeBuffer_StaticMetadata {
    /// smpte 2086 metadata
    pub smpte2086: OH_NativeBuffer_Smpte2086,
    /// CTA-861.3 metadata
    pub cta861: OH_NativeBuffer_Cta861,
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_NativeBuffer_MetadataKey {
    /// value: OH_NativeBuffer_MetadataType
    pub const OH_HDR_METADATA_TYPE: OH_NativeBuffer_MetadataKey = OH_NativeBuffer_MetadataKey(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_NativeBuffer_MetadataKey {
    /// value: OH_NativeBuffer_StaticMetadata
    pub const OH_HDR_STATIC_METADATA: OH_NativeBuffer_MetadataKey = OH_NativeBuffer_MetadataKey(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OH_NativeBuffer_MetadataKey {
    /// byte stream of SEI in video stream
    pub const OH_HDR_DYNAMIC_METADATA: OH_NativeBuffer_MetadataKey = OH_NativeBuffer_MetadataKey(2);
}
#[repr(transparent)]
/// Indicates the HDR metadata key of a native buffer.
///
///
/// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeBuffer
///
/// Available since API-level: 12
///
/// Version: 1.0
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OH_NativeBuffer_MetadataKey(pub ::core::ffi::c_uint);
#[repr(C)]
pub struct OHIPCParcel {
    _unused: [u8; 0],
}
/// indicates a dirty region where content is updated.
///
/// Available since API-level: 8
#[repr(C)]
#[derive(Debug)]
pub struct Region {
    pub rects: *mut Region_Rect,
    /// if rectNumber is 0, fill the Buffer dirty size by default
    pub rectNumber: i32,
}
/// if rects is nullptr, fill the Buffer dirty size by default
#[repr(C)]
#[derive(Debug)]
pub struct Region_Rect {
    pub x: i32,
    pub y: i32,
    pub w: u32,
    pub h: u32,
}
pub mod NativeWindowOperation {
    /// Indicates the operation code in the function OH_NativeWindow_NativeWindowHandleOpt.
    ///
    /// Available since API-level: 8
    pub type Type = ::core::ffi::c_uint;
    /// set native window buffer geometry,
    /// variable parameter in function is
    /// [in] int32_t width, [in] int32_t height
    pub const SET_BUFFER_GEOMETRY: Type = 0;
    /// get native window buffer geometry,
    /// variable parameter in function is
    /// [out] int32_t *height, [out] int32_t *width
    pub const GET_BUFFER_GEOMETRY: Type = 1;
    /// get native window buffer format,
    /// variable parameter in function is
    /// [out] int32_t *format
    pub const GET_FORMAT: Type = 2;
    /// set native window buffer format,
    /// variable parameter in function is
    /// [in] int32_t format
    pub const SET_FORMAT: Type = 3;
    /// get native window buffer usage,
    /// variable parameter in function is
    /// [out] uint64_t *usage.
    pub const GET_USAGE: Type = 4;
    /// set native window buffer usage,
    /// variable parameter in function is
    /// [in] uint64_t usage.
    pub const SET_USAGE: Type = 5;
    /// set native window buffer stride,
    /// variable parameter in function is
    /// [in] int32_t stride.
    pub const SET_STRIDE: Type = 6;
    /// get native window buffer stride,
    /// variable parameter in function is
    /// [out] int32_t *stride.
    pub const GET_STRIDE: Type = 7;
    /// set native window buffer swap interval,
    /// variable parameter in function is
    /// [in] int32_t interval.
    pub const SET_SWAP_INTERVAL: Type = 8;
    /// get native window buffer swap interval,
    /// variable parameter in function is
    /// [out] int32_t *interval.
    pub const GET_SWAP_INTERVAL: Type = 9;
    /// set native window buffer timeout,
    /// variable parameter in function is
    /// [in] int32_t timeout.
    pub const SET_TIMEOUT: Type = 10;
    /// get native window buffer timeout,
    /// variable parameter in function is
    /// [out] int32_t *timeout.
    pub const GET_TIMEOUT: Type = 11;
    /// set native window buffer colorGamut,
    /// variable parameter in function is
    /// [in] int32_t colorGamut.
    pub const SET_COLOR_GAMUT: Type = 12;
    /// get native window buffer colorGamut,
    /// variable parameter in function is
    /// [out int32_t *colorGamut].
    pub const GET_COLOR_GAMUT: Type = 13;
    /// set native window buffer transform,
    /// variable parameter in function is
    /// [in] int32_t transform.
    pub const SET_TRANSFORM: Type = 14;
    /// get native window buffer transform,
    /// variable parameter in function is
    /// [out] int32_t *transform.
    pub const GET_TRANSFORM: Type = 15;
    /// set native window buffer uiTimestamp,
    /// variable parameter in function is
    /// [in] uint64_t uiTimestamp.
    pub const SET_UI_TIMESTAMP: Type = 16;
    /// get native window bufferqueue size,
    /// variable parameter in function is
    /// [out] int32_t *size.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const GET_BUFFERQUEUE_SIZE: Type = 17;
    /// set surface source type,
    /// variable parameter in function is
    /// [in] int32_t sourceType.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const SET_SOURCE_TYPE: Type = 18;
    /// get surface source type,
    /// variable parameter in function is
    /// [out] int32_t *sourceType.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const GET_SOURCE_TYPE: Type = 19;
    /// set app framework type,
    /// variable parameter in function is
    /// [in] char* frameworkType. maximum length is 64 bytes, otherwise the setting fails.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const SET_APP_FRAMEWORK_TYPE: Type = 20;
    /// get app framework type,
    /// variable parameter in function is
    /// [out] char** frameworkType.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const GET_APP_FRAMEWORK_TYPE: Type = 21;
    /// set hdr white point brightness,
    /// variable parameter in function is
    /// [in] float brightness. the value range is 0.0f to 1.0f.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const SET_HDR_WHITE_POINT_BRIGHTNESS: Type = 22;
    /// set sdr white point brightness,
    /// variable parameter in function is
    /// [in] float brightness. the value range is 0.0f to 1.0f.
    ///
    /// Available since API-level: 12
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub const SET_SDR_WHITE_POINT_BRIGHTNESS: Type = 23;
}
impl OHScalingMode {
    /// the window content is not updated until a buffer of
    /// the window size is received
    pub const OH_SCALING_MODE_FREEZE: OHScalingMode = OHScalingMode(0);
}
impl OHScalingMode {
    /// the buffer is scaled in two dimensions to match the window size
    pub const OH_SCALING_MODE_SCALE_TO_WINDOW: OHScalingMode = OHScalingMode(1);
}
impl OHScalingMode {
    /// the buffer is uniformly scaled so that the smaller size of
    /// the buffer matches the window size
    pub const OH_SCALING_MODE_SCALE_CROP: OHScalingMode = OHScalingMode(2);
}
impl OHScalingMode {
    /// the window is clipped to the size of the buffer's clipping rectangle
    /// pixels outside the clipping rectangle are considered fully transparent.
    pub const OH_SCALING_MODE_NO_SCALE_CROP: OHScalingMode = OHScalingMode(3);
}
#[repr(transparent)]
/// Indicates Scaling Mode.
///
/// Available since API-level: 9
/// = "10")
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OHScalingMode(pub ::core::ffi::c_uint);
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHScalingModeV2 {
    /// the window content is not updated until a buffer of
    /// the window size is received
    pub const OH_SCALING_MODE_FREEZE_V2: OHScalingModeV2 = OHScalingModeV2(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHScalingModeV2 {
    /// the buffer is scaled in two dimensions to match the window size
    pub const OH_SCALING_MODE_SCALE_TO_WINDOW_V2: OHScalingModeV2 = OHScalingModeV2(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHScalingModeV2 {
    /// the buffer is uniformly scaled so that the smaller size of
    /// the buffer matches the window size
    pub const OH_SCALING_MODE_SCALE_CROP_V2: OHScalingModeV2 = OHScalingModeV2(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHScalingModeV2 {
    /// the window is clipped to the size of the buffer's clipping rectangle
    /// pixels outside the clipping rectangle are considered fully transparent.
    pub const OH_SCALING_MODE_NO_SCALE_CROP_V2: OHScalingModeV2 = OHScalingModeV2(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHScalingModeV2 {
    /// Adapt to the buffer and scale proportionally to the buffer size. Prioritize displaying all buffer content.
    /// If the size is not the same as the window size, fill the unfilled area of the window with a background color.
    pub const OH_SCALING_MODE_SCALE_FIT_V2: OHScalingModeV2 = OHScalingModeV2(4);
}
#[repr(transparent)]
/// Indicates Scaling Mode.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OHScalingModeV2(pub ::core::ffi::c_uint);
impl OHHDRMetadataKey {
    pub const OH_METAKEY_RED_PRIMARY_X: OHHDRMetadataKey = OHHDRMetadataKey(0);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_RED_PRIMARY_Y: OHHDRMetadataKey = OHHDRMetadataKey(1);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_GREEN_PRIMARY_X: OHHDRMetadataKey = OHHDRMetadataKey(2);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_GREEN_PRIMARY_Y: OHHDRMetadataKey = OHHDRMetadataKey(3);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_BLUE_PRIMARY_X: OHHDRMetadataKey = OHHDRMetadataKey(4);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_BLUE_PRIMARY_Y: OHHDRMetadataKey = OHHDRMetadataKey(5);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_WHITE_PRIMARY_X: OHHDRMetadataKey = OHHDRMetadataKey(6);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_WHITE_PRIMARY_Y: OHHDRMetadataKey = OHHDRMetadataKey(7);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_MAX_LUMINANCE: OHHDRMetadataKey = OHHDRMetadataKey(8);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_MIN_LUMINANCE: OHHDRMetadataKey = OHHDRMetadataKey(9);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_MAX_CONTENT_LIGHT_LEVEL: OHHDRMetadataKey = OHHDRMetadataKey(10);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_MAX_FRAME_AVERAGE_LIGHT_LEVEL: OHHDRMetadataKey = OHHDRMetadataKey(11);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_HDR10_PLUS: OHHDRMetadataKey = OHHDRMetadataKey(12);
}
impl OHHDRMetadataKey {
    pub const OH_METAKEY_HDR_VIVID: OHHDRMetadataKey = OHHDRMetadataKey(13);
}
#[repr(transparent)]
/// Enumerates the HDR metadata keys.
///
/// Available since API-level: 9
/// = "10")
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OHHDRMetadataKey(pub ::core::ffi::c_uint);
/// Defines the HDR metadata.
///
/// Available since API-level: 9
/// = "10")
#[repr(C)]
#[derive(Debug)]
pub struct OHHDRMetaData {
    pub key: OHHDRMetadataKey,
    pub value: f32,
}
/// Defines the ExtData Handle
///
/// Available since API-level: 9
/// = "10")
#[repr(C)]
#[derive(Debug)]
pub struct OHExtDataHandle {
    pub fd: i32,
    pub reserveInts: u32,
    pub reserve: __IncompleteArrayField<i32>,
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHSurfaceSource {
    pub const OH_SURFACE_SOURCE_DEFAULT: OHSurfaceSource = OHSurfaceSource(0);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHSurfaceSource {
    pub const OH_SURFACE_SOURCE_UI: OHSurfaceSource = OHSurfaceSource(1);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHSurfaceSource {
    pub const OH_SURFACE_SOURCE_GAME: OHSurfaceSource = OHSurfaceSource(2);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHSurfaceSource {
    pub const OH_SURFACE_SOURCE_CAMERA: OHSurfaceSource = OHSurfaceSource(3);
}
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
impl OHSurfaceSource {
    pub const OH_SURFACE_SOURCE_VIDEO: OHSurfaceSource = OHSurfaceSource(4);
}
#[repr(transparent)]
/// Indicates the source type of surface.
///
/// Available since API-level: 12
#[cfg(feature = "api-12")]
#[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
#[derive(Debug, Clone, Hash, PartialEq, Eq)]
pub struct OHSurfaceSource(pub ::core::ffi::c_uint);
extern "C" {
    /// Creates a <b>OHNativeWindow</b> instance. A new <b>OHNativeWindow</b> instance is created each time this function is called.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `pSurface` - Indicates the pointer to a <b>ProduceSurface</b>. The type is a pointer to <b>sptr<OHOS::Surface></b>.
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OHNativeWindow</b> instance created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    ///
    /// Deprecated** since 12
    pub fn OH_NativeWindow_CreateNativeWindow(
        pSurface: *mut ::core::ffi::c_void,
    ) -> *mut OHNativeWindow;
    /// Decreases the reference count of a <b>OHNativeWindow</b> instance by 1, and when the reference count reaches 0, destroys the instance.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_DestroyNativeWindow(window: *mut OHNativeWindow);
    /// Creates a <b>OHNativeWindowBuffer</b> instance. A new <b>OHNativeWindowBuffer</b> instance is created each time this function is called.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `pSurfaceBuffer` - Indicates the pointer to a produce buffer. The type is <b>sptr<OHOS::SurfaceBuffer></b>.
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OHNativeWindowBuffer</b> instance created.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    ///
    /// Deprecated** since 12
    /// OH_NativeWindow_CreateNativeWindowBufferFromNativeBuffer
    pub fn OH_NativeWindow_CreateNativeWindowBufferFromSurfaceBuffer(
        pSurfaceBuffer: *mut ::core::ffi::c_void,
    ) -> *mut OHNativeWindowBuffer;
    /// Creates a <b>OHNativeWindowBuffer</b> instance.
    /// A new <b>OHNativeWindowBuffer</b> instance is created each time this function is called.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `nativeBuffer` - Indicates the pointer to a native buffer. The type is <b>OH_NativeBuffer*</b>.
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>OHNativeWindowBuffer</b> instance created.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_NativeWindow_CreateNativeWindowBufferFromNativeBuffer(
        nativeBuffer: *mut OH_NativeBuffer,
    ) -> *mut OHNativeWindowBuffer;
    /// Decreases the reference count of a <b>OHNativeWindowBuffer</b> instance by 1 and, when the reference count reaches 0, destroys the instance.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `buffer` - Indicates the pointer to a <b>OHNativeWindowBuffer</b> instance.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_DestroyNativeWindowBuffer(buffer: *mut OHNativeWindowBuffer);
    /// Requests a <b>OHNativeWindowBuffer</b> through a <b>OHNativeWindow</b> instance for content production.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `buffer` - Indicates the double pointer to a <b>OHNativeWindowBuffer</b> instance.
    ///
    /// `fenceFd` - Indicates the pointer to a file descriptor handle.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_NativeWindowRequestBuffer(
        window: *mut OHNativeWindow,
        buffer: *mut *mut OHNativeWindowBuffer,
        fenceFd: *mut ::core::ffi::c_int,
    ) -> i32;
    /// Flushes the <b>OHNativeWindowBuffer</b> filled with the content to the buffer queue through a <b>OHNativeWindow</b> instance for content consumption.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `buffer` - Indicates the pointer to a <b>OHNativeWindowBuffer</b> instance.
    ///
    /// `fenceFd` - Indicates a file descriptor handle, which is used for timing synchronization.
    ///
    /// `region` - Indicates a dirty region where content is updated.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_NativeWindowFlushBuffer(
        window: *mut OHNativeWindow,
        buffer: *mut OHNativeWindowBuffer,
        fenceFd: ::core::ffi::c_int,
        region: Region,
    ) -> i32;
    /// Get the last flushed <b>OHNativeWindowBuffer</b> from a <b>OHNativeWindow</b> instance.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `buffer` - Indicates the pointer to a <b>OHNativeWindowBuffer</b> pointer.
    ///
    /// `fenceFd` - Indicates the pointer to a file descriptor handle.
    ///
    /// `matrix` - Indicates the retrieved 4*4 transform matrix.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 11
    ///
    /// Version: 1.0
    ///
    /// Deprecated** since 12
    /// OH_NativeWindow_GetLastFlushedBufferV2
    #[cfg(feature = "api-11")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-11")))]
    pub fn OH_NativeWindow_GetLastFlushedBuffer(
        window: *mut OHNativeWindow,
        buffer: *mut *mut OHNativeWindowBuffer,
        fenceFd: *mut ::core::ffi::c_int,
        matrix: *mut f32,
    ) -> i32;
    /// Returns the <b>OHNativeWindowBuffer</b> to the buffer queue through a <b>OHNativeWindow</b> instance, without filling in any content. The <b>OHNativeWindowBuffer</b> can be used for another request.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `buffer` - Indicates the pointer to a <b>OHNativeWindowBuffer</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_NativeWindowAbortBuffer(
        window: *mut OHNativeWindow,
        buffer: *mut OHNativeWindowBuffer,
    ) -> i32;
    /// Sets or obtains the attributes of a native window, including the width, height, and content format.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `code` - Indicates the operation code, pointer to <b>NativeWindowOperation</b>.
    ///
    /// `...` - variable parameter, must correspond to code one-to-one.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_NativeWindowHandleOpt(
        window: *mut OHNativeWindow,
        code: ::core::ffi::c_int,
        ...
    ) -> i32;
    /// Obtains the pointer to a <b>BufferHandle</b> of a <b>OHNativeWindowBuffer</b> instance.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `buffer` - Indicates the pointer to a <b>OHNativeWindowBuffer</b> instance.
    ///
    /// # Returns
    ///
    /// Returns the pointer to the <b>BufferHandle</b> instance obtained.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_GetBufferHandleFromNative(
        buffer: *mut OHNativeWindowBuffer,
    ) -> *mut BufferHandle;
    /// Adds the reference count of a native object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `obj` - Indicates the pointer to a <b>OHNativeWindow</b> or <b>OHNativeWindowBuffer</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_NativeObjectReference(obj: *mut ::core::ffi::c_void) -> i32;
    /// Decreases the reference count of a native object and, when the reference count reaches 0, destroys this object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `obj` - Indicates the pointer to a <b>OHNativeWindow</b> or <b>OHNativeWindowBuffer</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_NativeObjectUnreference(obj: *mut ::core::ffi::c_void) -> i32;
    /// Obtains the magic ID of a native object.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `obj` - Indicates the pointer to a <b>OHNativeWindow</b> or <b>OHNativeWindowBuffer</b> instance.
    ///
    /// # Returns
    ///
    /// Returns the magic ID, which is unique for each native object.
    ///
    /// Available since API-level: 8
    ///
    /// Version: 1.0
    pub fn OH_NativeWindow_GetNativeObjectMagic(obj: *mut ::core::ffi::c_void) -> i32;
    /// Sets scalingMode of a native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `sequence` - Indicates the sequence to a produce buffer.
    ///
    /// `scalingMode` - Indicates the enum value to <b>OHScalingMode</b>
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    /// = "10")
    pub fn OH_NativeWindow_NativeWindowSetScalingMode(
        window: *mut OHNativeWindow,
        sequence: u32,
        scalingMode: OHScalingMode,
    ) -> i32;
    /// Sets metaData of a native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `sequence` - Indicates the sequence to a produce buffer.
    ///
    /// `size` - Indicates the size of a <b>OHHDRMetaData</b> vector.
    ///
    /// `metaDate` - Indicates the pointer to a <b>OHHDRMetaData</b> vector.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    /// = "10")
    pub fn OH_NativeWindow_NativeWindowSetMetaData(
        window: *mut OHNativeWindow,
        sequence: u32,
        size: i32,
        metaData: *const OHHDRMetaData,
    ) -> i32;
    /// Sets metaDataSet of a native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `sequence` - Indicates the sequence to a produce buffer.
    ///
    /// `key` - Indicates the enum value to <b>OHHDRMetadataKey</b>
    ///
    /// `size` - Indicates the size of a uint8_t vector.
    ///
    /// `metaDate` - Indicates the pointer to a uint8_t vector.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    /// = "10")
    pub fn OH_NativeWindow_NativeWindowSetMetaDataSet(
        window: *mut OHNativeWindow,
        sequence: u32,
        key: OHHDRMetadataKey,
        size: i32,
        metaData: *const u8,
    ) -> i32;
    /// Sets tunnel handle of a native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `handle` - Indicates the pointer to a <b>OHExtDataHandle</b>.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 9
    ///
    /// Version: 1.0
    /// = "10")
    pub fn OH_NativeWindow_NativeWindowSetTunnelHandle(
        window: *mut OHNativeWindow,
        handle: *const OHExtDataHandle,
    ) -> i32;
    /// Attach a buffer to an <b>OHNativeWindow</b> instance.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// `buffer` - Indicates the pointer to a <b>OHNativeWindowBuffer</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_NativeWindowAttachBuffer(
        window: *mut OHNativeWindow,
        buffer: *mut OHNativeWindowBuffer,
    ) -> i32;
    /// Detach a buffer from an <b>OHNativeWindow</b> instance.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// `buffer` - Indicates the pointer to a <b>OHNativeWindowBuffer</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_NativeWindowDetachBuffer(
        window: *mut OHNativeWindow,
        buffer: *mut OHNativeWindowBuffer,
    ) -> i32;
    /// Get surfaceId from native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// `surfaceId` - Indicates the pointer to a surfaceId.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is success, otherwise, failed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_GetSurfaceId(window: *mut OHNativeWindow, surfaceId: *mut u64) -> i32;
    /// Creates an <b>OHNativeWindow</b> instance.
    ///
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `surfaceId` - Indicates the surfaceId to a surface.
    ///
    /// `window` - indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is Success, otherwise, failed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_CreateNativeWindowFromSurfaceId(
        surfaceId: u64,
        window: *mut *mut OHNativeWindow,
    ) -> i32;
    /// Sets scalingMode of a native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// `scalingMode` - Indicates the enum value to <b>OHScalingModeV2</b>
    ///
    /// # Returns
    ///
    /// Returns an error code, 0 is Success, otherwise, failed.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_NativeWindowSetScalingModeV2(
        window: *mut OHNativeWindow,
        scalingMode: OHScalingModeV2,
    ) -> i32;
    /// Set native window buffer hold.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_SetBufferHold(window: *mut OHNativeWindow);
    /// Write an OHNativeWindow to an OHIPCParcel.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// `parcel` - Indicates the pointer to an <b>OHIPCParcel</b> instance.
    ///
    /// # Returns
    ///
    /// 0 - Success.
    /// 40001000 - parcel is NULL or window is NULL.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_WriteToParcel(
        window: *mut OHNativeWindow,
        parcel: *mut OHIPCParcel,
    ) -> i32;
    /// Read an OHNativeWindow from an OHIPCParcel.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `parcel` - Indicates the pointer to an <b>OHIPCParcel</b> instance.
    ///
    /// `window` - Indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// # Returns
    ///
    /// 0 - Success.
    /// 40001000 - parcel is NULL or parcel does not contain the window.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_ReadFromParcel(
        parcel: *mut OHIPCParcel,
        window: *mut *mut OHNativeWindow,
    ) -> i32;
    /// Get the last flushed <b>OHNativeWindowBuffer</b> from an <b>OHNativeWindow</b> instance.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to an <b>OHNativeWindow</b> instance.
    ///
    /// `buffer` - Indicates the pointer to an <b>OHNativeWindowBuffer</b> pointer.
    ///
    /// `fenceFd` - Indicates the pointer to a file descriptor handle.
    ///
    /// `matrix` - Indicates the retrieved 4*4 transform matrix.
    ///
    /// # Returns
    ///
    /// 0 - Success.
    /// 40001000 - window is NULL or buffer is NULL or fenceFd is NULL.
    /// 41207000 - buffer state is wrong.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_GetLastFlushedBufferV2(
        window: *mut OHNativeWindow,
        buffer: *mut *mut OHNativeWindowBuffer,
        fenceFd: *mut ::core::ffi::c_int,
        matrix: *mut f32,
    ) -> i32;
    /// Set the color space of the native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `colorSpace` - Indicates the color space of native window, see <b>OH_NativeBuffer_ColorSpace</b>.
    ///
    /// # Returns
    ///
    /// [`NATIVE_ERROR_OK`] 0 - Success.
    /// [`NATIVE_ERROR_INVALID_ARGUMENTS`] 40001000 - window is NULL.
    /// [`NATIVE_ERROR_BUFFER_STATE_INVALID`] 41207000 - Incorrect colorSpace state.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_SetColorSpace(
        window: *mut OHNativeWindow,
        colorSpace: OH_NativeBuffer_ColorSpace,
    ) -> i32;
    /// Get the color space of the native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `colorSpace` - Indicates the color space of native window, see <b>OH_NativeBuffer_ColorSpace</b>.
    ///
    /// # Returns
    ///
    /// [`NATIVE_ERROR_OK`] 0 - Success.
    /// [`NATIVE_ERROR_INVALID_ARGUMENTS`] 40001000 - window is NULL.
    /// [`NATIVE_ERROR_BUFFER_STATE_INVALID`] 41207000 - Incorrect colorSpace state.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_GetColorSpace(
        window: *mut OHNativeWindow,
        colorSpace: *mut OH_NativeBuffer_ColorSpace,
    ) -> i32;
    /// Set the metadata type of the native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `metadataKey` - Indicates the metadata type of native window, see <b>OH_NativeBuffer_MetadataKey</b>.
    ///
    /// `size` - Indicates the size of a uint8_t vector.
    ///
    /// `metadata` - Indicates the pointer to a uint8_t vector.
    ///
    /// # Returns
    ///
    /// [`NATIVE_ERROR_OK`] 0 - Success.
    /// [`NATIVE_ERROR_INVALID_ARGUMENTS`] 40001000 - window or metadata is NULL.
    /// [`NATIVE_ERROR_BUFFER_STATE_INVALID`] 41207000 - Incorrect metadata state.
    /// [`NATIVE_ERROR_UNSUPPORTED`] 50102000 - Unsupported metadata key.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_SetMetadataValue(
        window: *mut OHNativeWindow,
        metadataKey: OH_NativeBuffer_MetadataKey,
        size: i32,
        metadata: *mut u8,
    ) -> i32;
    /// Set the metadata type of the native window.
    ///
    ///
    /// Required System Capabilities: SystemCapability.Graphic.Graphic2D.NativeWindow
    /// # Arguments
    ///
    /// `window` - Indicates the pointer to a <b>OHNativeWindow</b> instance.
    ///
    /// `metadataKey` - Indicates the metadata type of native window, see <b>OH_NativeBuffer_MetadataKey</b>.
    ///
    /// `size` - Indicates the size of a uint8_t vector.
    ///
    /// `metadata` - Indicates the pointer to a uint8_t vector.
    ///
    /// # Returns
    ///
    /// [`NATIVE_ERROR_OK`] 0 - Success.
    /// [`NATIVE_ERROR_INVALID_ARGUMENTS`] 40001000 - window, metadata, or size is NULL.
    /// [`NATIVE_ERROR_BUFFER_STATE_INVALID`] 41207000 - Incorrect metadata state.
    /// [`NATIVE_ERROR_UNSUPPORTED`] 50102000 - Unsupported metadata key.
    ///
    /// Available since API-level: 12
    ///
    /// Version: 1.0
    #[cfg(feature = "api-12")]
    #[cfg_attr(docsrs, doc(cfg(feature = "api-12")))]
    pub fn OH_NativeWindow_GetMetadataValue(
        window: *mut OHNativeWindow,
        metadataKey: OH_NativeBuffer_MetadataKey,
        size: *mut i32,
        metadata: *mut *mut u8,
    ) -> i32;
}
